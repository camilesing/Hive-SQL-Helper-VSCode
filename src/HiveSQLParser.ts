// Generated from gen/HiveSQL.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { HiveSQLListener } from "./HiveSQLListener.js";
import { HiveSQLVisitor } from "./HiveSQLVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class HiveSQLParser extends antlr.Parser {
    public static readonly KW_ABORT = 1;
    public static readonly KW_ACTIVATE = 2;
    public static readonly KW_ACTIVE = 3;
    public static readonly KW_ADD = 4;
    public static readonly KW_ADMIN = 5;
    public static readonly KW_AFTER = 6;
    public static readonly KW_ALL = 7;
    public static readonly KW_ALLOC_FRACTION = 8;
    public static readonly KW_ALTER = 9;
    public static readonly KW_ANALYZE = 10;
    public static readonly KW_AND = 11;
    public static readonly KW_ANTI = 12;
    public static readonly KW_ANY = 13;
    public static readonly KW_APPLICATION = 14;
    public static readonly KW_ARCHIVE = 15;
    public static readonly KW_ARRAY = 16;
    public static readonly KW_AS = 17;
    public static readonly KW_ASC = 18;
    public static readonly KW_AST = 19;
    public static readonly KW_AT = 20;
    public static readonly KW_AUTHORIZATION = 21;
    public static readonly KW_AUTOCOMMIT = 22;
    public static readonly KW_BATCH = 23;
    public static readonly KW_BEFORE = 24;
    public static readonly KW_BETWEEN = 25;
    public static readonly KW_BIGINT = 26;
    public static readonly KW_BINARY = 27;
    public static readonly KW_BOOLEAN = 28;
    public static readonly KW_BOTH = 29;
    public static readonly KW_BUCKET = 30;
    public static readonly KW_BUCKETS = 31;
    public static readonly KW_BY = 32;
    public static readonly KW_CACHE = 33;
    public static readonly KW_CASCADE = 34;
    public static readonly KW_CASE = 35;
    public static readonly KW_CAST = 36;
    public static readonly KW_CBO = 37;
    public static readonly KW_CHANGE = 38;
    public static readonly KW_CHAR = 39;
    public static readonly KW_CHECK = 40;
    public static readonly KW_CLUSTER = 41;
    public static readonly KW_CLUSTERED = 42;
    public static readonly KW_CLUSTERSTATUS = 43;
    public static readonly KW_COLLECTION = 44;
    public static readonly KW_COLUMN = 45;
    public static readonly KW_COLUMNS = 46;
    public static readonly KW_COMMENT = 47;
    public static readonly KW_COMMIT = 48;
    public static readonly KW_COMPACT = 49;
    public static readonly KW_COMPACTIONS = 50;
    public static readonly KW_COMPACT_ID = 51;
    public static readonly KW_COMPUTE = 52;
    public static readonly KW_CONCATENATE = 53;
    public static readonly KW_CONF = 54;
    public static readonly KW_CONSTRAINT = 55;
    public static readonly KW_CONTINUE = 56;
    public static readonly KW_COST = 57;
    public static readonly KW_CREATE = 58;
    public static readonly KW_CRON = 59;
    public static readonly KW_CROSS = 60;
    public static readonly KW_CUBE = 61;
    public static readonly KW_CURRENT = 62;
    public static readonly KW_CURRENT_DATE = 63;
    public static readonly KW_CURRENT_TIMESTAMP = 64;
    public static readonly KW_CURSOR = 65;
    public static readonly KW_DATA = 66;
    public static readonly KW_DATABASE = 67;
    public static readonly KW_DATABASES = 68;
    public static readonly KW_DATACONNECTOR = 69;
    public static readonly KW_DATACONNECTORS = 70;
    public static readonly KW_DATE = 71;
    public static readonly KW_DATETIME = 72;
    public static readonly KW_DAY = 73;
    public static readonly KW_DAYOFWEEK = 74;
    public static readonly KW_DBPROPERTIES = 75;
    public static readonly KW_DCPROPERTIES = 76;
    public static readonly KW_DDL = 77;
    public static readonly KW_DEBUG = 78;
    public static readonly KW_DECIMAL = 79;
    public static readonly KW_DEFAULT = 80;
    public static readonly KW_DEFERRED = 81;
    public static readonly KW_DEFINED = 82;
    public static readonly KW_DELETE = 83;
    public static readonly KW_DELIMITED = 84;
    public static readonly KW_DEPENDENCY = 85;
    public static readonly KW_DESC = 86;
    public static readonly KW_DESCRIBE = 87;
    public static readonly KW_DETAIL = 88;
    public static readonly KW_DIRECTORIES = 89;
    public static readonly KW_DIRECTORY = 90;
    public static readonly KW_DISABLE = 91;
    public static readonly KW_DISTINCT = 92;
    public static readonly KW_DISTRIBUTE = 93;
    public static readonly KW_DISTRIBUTED = 94;
    public static readonly KW_DO = 95;
    public static readonly KW_DOUBLE = 96;
    public static readonly KW_DOW = 97;
    public static readonly KW_DROP = 98;
    public static readonly KW_DUMP = 99;
    public static readonly KW_ELEM_TYPE = 100;
    public static readonly KW_ELSE = 101;
    public static readonly KW_ENABLE = 102;
    public static readonly KW_END = 103;
    public static readonly KW_ENFORCED = 104;
    public static readonly KW_ESCAPED = 105;
    public static readonly KW_EVERY = 106;
    public static readonly KW_EXCEPT = 107;
    public static readonly KW_EXCHANGE = 108;
    public static readonly KW_EXCLUSIVE = 109;
    public static readonly KW_EXECUTE = 110;
    public static readonly KW_EXECUTED = 111;
    public static readonly KW_EXISTS = 112;
    public static readonly KW_EXPIRE_SNAPSHOTS = 113;
    public static readonly KW_EXPLAIN = 114;
    public static readonly KW_EXPORT = 115;
    public static readonly KW_EXPRESSION = 116;
    public static readonly KW_EXTENDED = 117;
    public static readonly KW_EXTERNAL = 118;
    public static readonly KW_EXTRACT = 119;
    public static readonly KW_FALSE = 120;
    public static readonly KW_FETCH = 121;
    public static readonly KW_FIELDS = 122;
    public static readonly KW_FILE = 123;
    public static readonly KW_FILEFORMAT = 124;
    public static readonly KW_FIRST = 125;
    public static readonly KW_FLOAT = 126;
    public static readonly KW_FLOOR = 127;
    public static readonly KW_FOLLOWING = 128;
    public static readonly KW_FOR = 129;
    public static readonly KW_FORCE = 130;
    public static readonly KW_FOREIGN = 131;
    public static readonly KW_FORMAT = 132;
    public static readonly KW_FORMATTED = 133;
    public static readonly KW_FROM = 134;
    public static readonly KW_FULL = 135;
    public static readonly KW_FUNCTION = 136;
    public static readonly KW_FUNCTIONS = 137;
    public static readonly KW_GRANT = 138;
    public static readonly KW_GROUP = 139;
    public static readonly KW_GROUPING = 140;
    public static readonly KW_HAVING = 141;
    public static readonly KW_HDFS = 142;
    public static readonly KW_HOLD_DDLTIME = 143;
    public static readonly KW_HOUR = 144;
    public static readonly KW_IDXPROPERTIES = 145;
    public static readonly KW_IF = 146;
    public static readonly KW_IGNORE = 147;
    public static readonly KW_IMPORT = 148;
    public static readonly KW_IN = 149;
    public static readonly KW_INDEX = 150;
    public static readonly KW_INDEXES = 151;
    public static readonly KW_INNER = 152;
    public static readonly KW_INPATH = 153;
    public static readonly KW_INPUTDRIVER = 154;
    public static readonly KW_INPUTFORMAT = 155;
    public static readonly KW_INSERT = 156;
    public static readonly KW_INT = 157;
    public static readonly KW_INTERSECT = 158;
    public static readonly KW_INTERVAL = 159;
    public static readonly KW_INTO = 160;
    public static readonly KW_IS = 161;
    public static readonly KW_ISOLATION = 162;
    public static readonly KW_ITEMS = 163;
    public static readonly KW_JAR = 164;
    public static readonly KW_JOIN = 165;
    public static readonly KW_JOINCOST = 166;
    public static readonly KW_KEY = 167;
    public static readonly KW_KEYS = 168;
    public static readonly KW_KEY_TYPE = 169;
    public static readonly KW_KILL = 170;
    public static readonly KW_LAST = 171;
    public static readonly KW_LATERAL = 172;
    public static readonly KW_LEADING = 173;
    public static readonly KW_LEFT = 174;
    public static readonly KW_LESS = 175;
    public static readonly KW_LEVEL = 176;
    public static readonly KW_LIKE = 177;
    public static readonly KW_LIMIT = 178;
    public static readonly KW_LINES = 179;
    public static readonly KW_LOAD = 180;
    public static readonly KW_LOCAL = 181;
    public static readonly KW_LOCATION = 182;
    public static readonly KW_LOCK = 183;
    public static readonly KW_LOCKS = 184;
    public static readonly KW_LOGICAL = 185;
    public static readonly KW_LONG = 186;
    public static readonly KW_MACRO = 187;
    public static readonly KW_MANAGED = 188;
    public static readonly KW_MANAGEDLOCATION = 189;
    public static readonly KW_MANAGEMENT = 190;
    public static readonly KW_MAP = 191;
    public static readonly KW_MAPJOIN = 192;
    public static readonly KW_MAPPING = 193;
    public static readonly KW_MATCHED = 194;
    public static readonly KW_MATERIALIZED = 195;
    public static readonly KW_MERGE = 196;
    public static readonly KW_METADATA = 197;
    public static readonly KW_MINUS = 198;
    public static readonly KW_MINUTE = 199;
    public static readonly KW_MONTH = 200;
    public static readonly KW_MORE = 201;
    public static readonly KW_MOVE = 202;
    public static readonly KW_MSCK = 203;
    public static readonly KW_NONE = 204;
    public static readonly KW_NORELY = 205;
    public static readonly KW_NOSCAN = 206;
    public static readonly KW_NOT = 207;
    public static readonly KW_NOVALIDATE = 208;
    public static readonly KW_NO_DROP = 209;
    public static readonly KW_NULL = 210;
    public static readonly KW_NULLS = 211;
    public static readonly KW_OF = 212;
    public static readonly KW_OFFLINE = 213;
    public static readonly KW_OFFSET = 214;
    public static readonly KW_ON = 215;
    public static readonly KW_ONLY = 216;
    public static readonly KW_OPERATOR = 217;
    public static readonly KW_OPTION = 218;
    public static readonly KW_OR = 219;
    public static readonly KW_ORDER = 220;
    public static readonly KW_OUT = 221;
    public static readonly KW_OUTER = 222;
    public static readonly KW_OUTPUTDRIVER = 223;
    public static readonly KW_OUTPUTFORMAT = 224;
    public static readonly KW_OVER = 225;
    public static readonly KW_OVERWRITE = 226;
    public static readonly KW_OWNER = 227;
    public static readonly KW_PARTITION = 228;
    public static readonly KW_PARTITIONED = 229;
    public static readonly KW_PARTITIONS = 230;
    public static readonly KW_PATH = 231;
    public static readonly KW_PERCENT = 232;
    public static readonly KW_PKFK_JOIN = 233;
    public static readonly KW_PLAN = 234;
    public static readonly KW_PLANS = 235;
    public static readonly KW_PLUS = 236;
    public static readonly KW_POOL = 237;
    public static readonly KW_PRECEDING = 238;
    public static readonly KW_PRECISION = 239;
    public static readonly KW_PREPARE = 240;
    public static readonly KW_PRESERVE = 241;
    public static readonly KW_PRIMARY = 242;
    public static readonly KW_PRINCIPALS = 243;
    public static readonly KW_PROCEDURE = 244;
    public static readonly KW_PROTECTION = 245;
    public static readonly KW_PURGE = 246;
    public static readonly KW_QUALIFY = 247;
    public static readonly KW_QUARTER = 248;
    public static readonly KW_QUERY = 249;
    public static readonly KW_QUERY_PARALLELISM = 250;
    public static readonly KW_RANGE = 251;
    public static readonly KW_READ = 252;
    public static readonly KW_READONLY = 253;
    public static readonly KW_READS = 254;
    public static readonly KW_REAL = 255;
    public static readonly KW_REBUILD = 256;
    public static readonly KW_RECORDREADER = 257;
    public static readonly KW_RECORDWRITER = 258;
    public static readonly KW_REDUCE = 259;
    public static readonly KW_REFERENCES = 260;
    public static readonly KW_REGEXP = 261;
    public static readonly KW_RELOAD = 262;
    public static readonly KW_RELY = 263;
    public static readonly KW_REMOTE = 264;
    public static readonly KW_RENAME = 265;
    public static readonly KW_REOPTIMIZATION = 266;
    public static readonly KW_REPAIR = 267;
    public static readonly KW_REPL = 268;
    public static readonly KW_REPLACE = 269;
    public static readonly KW_REPLICATION = 270;
    public static readonly KW_RESOURCE = 271;
    public static readonly KW_RESPECT = 272;
    public static readonly KW_RESTRICT = 273;
    public static readonly KW_REVOKE = 274;
    public static readonly KW_REWRITE = 275;
    public static readonly KW_RIGHT = 276;
    public static readonly KW_RLIKE = 277;
    public static readonly KW_ROLE = 278;
    public static readonly KW_ROLES = 279;
    public static readonly KW_ROLLBACK = 280;
    public static readonly KW_ROLLUP = 281;
    public static readonly KW_ROW = 282;
    public static readonly KW_ROWS = 283;
    public static readonly KW_SCHEDULED = 284;
    public static readonly KW_SCHEDULING_POLICY = 285;
    public static readonly KW_SCHEMA = 286;
    public static readonly KW_SCHEMAS = 287;
    public static readonly KW_SECOND = 288;
    public static readonly KW_SELECT = 289;
    public static readonly KW_SEMI = 290;
    public static readonly KW_SERDE = 291;
    public static readonly KW_SERDEPROPERTIES = 292;
    public static readonly KW_SERVER = 293;
    public static readonly KW_SET = 294;
    public static readonly KW_SETS = 295;
    public static readonly KW_SET_CURRENT_SNAPSHOT = 296;
    public static readonly KW_SHARED = 297;
    public static readonly KW_SHOW = 298;
    public static readonly KW_SHOW_DATABASE = 299;
    public static readonly KW_SKEWED = 300;
    public static readonly KW_SMALLINT = 301;
    public static readonly KW_SNAPSHOT = 302;
    public static readonly KW_SOME = 303;
    public static readonly KW_SORT = 304;
    public static readonly KW_SORTED = 305;
    public static readonly KW_SPEC = 306;
    public static readonly KW_SSL = 307;
    public static readonly KW_START = 308;
    public static readonly KW_STATISTICS = 309;
    public static readonly KW_STATUS = 310;
    public static readonly KW_STORED = 311;
    public static readonly KW_STREAMTABLE = 312;
    public static readonly KW_STRING = 313;
    public static readonly KW_STRUCT = 314;
    public static readonly KW_SUMMARY = 315;
    public static readonly KW_SYNC = 316;
    public static readonly KW_SYSTEM_TIME = 317;
    public static readonly KW_SYSTEM_VERSION = 318;
    public static readonly KW_TABLE = 319;
    public static readonly KW_TABLES = 320;
    public static readonly KW_TABLESAMPLE = 321;
    public static readonly KW_TBLPROPERTIES = 322;
    public static readonly KW_TEMPORARY = 323;
    public static readonly KW_TERMINATED = 324;
    public static readonly KW_THEN = 325;
    public static readonly KW_TIME = 326;
    public static readonly KW_TIMESTAMP = 327;
    public static readonly KW_TIMESTAMPLOCALTZ = 328;
    public static readonly KW_TIMESTAMPTZ = 329;
    public static readonly KW_TINYINT = 330;
    public static readonly KW_TO = 331;
    public static readonly KW_TOUCH = 332;
    public static readonly KW_TRAILING = 333;
    public static readonly KW_TRANSACTION = 334;
    public static readonly KW_TRANSACTIONAL = 335;
    public static readonly KW_TRANSACTIONS = 336;
    public static readonly KW_TRANSFORM = 337;
    public static readonly KW_TRIGGER = 338;
    public static readonly KW_TRIM = 339;
    public static readonly KW_TRUE = 340;
    public static readonly KW_TRUNCATE = 341;
    public static readonly KW_TYPE = 342;
    public static readonly KW_UNARCHIVE = 343;
    public static readonly KW_UNBOUNDED = 344;
    public static readonly KW_UNDO = 345;
    public static readonly KW_UNION = 346;
    public static readonly KW_UNIONTYPE = 347;
    public static readonly KW_UNIQUE = 348;
    public static readonly KW_UNIQUEJOIN = 349;
    public static readonly KW_UNKNOWN = 350;
    public static readonly KW_UNLOCK = 351;
    public static readonly KW_UNMANAGED = 352;
    public static readonly KW_UNSET = 353;
    public static readonly KW_UNSIGNED = 354;
    public static readonly KW_UPDATE = 355;
    public static readonly KW_URI = 356;
    public static readonly KW_URL = 357;
    public static readonly KW_USE = 358;
    public static readonly KW_USER = 359;
    public static readonly KW_USING = 360;
    public static readonly KW_UTC = 361;
    public static readonly KW_UTCTIMESTAMP = 362;
    public static readonly KW_VALIDATE = 363;
    public static readonly KW_VALUES = 364;
    public static readonly KW_VALUE_TYPE = 365;
    public static readonly KW_VARCHAR = 366;
    public static readonly KW_VECTORIZATION = 367;
    public static readonly KW_VIEW = 368;
    public static readonly KW_VIEWS = 369;
    public static readonly KW_WAIT = 370;
    public static readonly KW_WEEK = 371;
    public static readonly KW_WHEN = 372;
    public static readonly KW_WHERE = 373;
    public static readonly KW_WHILE = 374;
    public static readonly KW_WINDOW = 375;
    public static readonly KW_WITH = 376;
    public static readonly KW_WITHIN = 377;
    public static readonly KW_WORK = 378;
    public static readonly KW_WORKLOAD = 379;
    public static readonly KW_WRITE = 380;
    public static readonly KW_YEAR = 381;
    public static readonly KW_ZONE = 382;
    public static readonly DOT = 383;
    public static readonly COLON = 384;
    public static readonly COMMA = 385;
    public static readonly SEMICOLON = 386;
    public static readonly LPAREN = 387;
    public static readonly RPAREN = 388;
    public static readonly LSQUARE = 389;
    public static readonly RSQUARE = 390;
    public static readonly LCURLY = 391;
    public static readonly RCURLY = 392;
    public static readonly UNDERLINE_SIGN = 393;
    public static readonly EQUAL = 394;
    public static readonly EQUAL_NS = 395;
    public static readonly NOTEQUAL = 396;
    public static readonly LESSTHANOREQUALTO = 397;
    public static readonly LESSTHAN = 398;
    public static readonly GREATERTHANOREQUALTO = 399;
    public static readonly GREATERTHAN = 400;
    public static readonly DIVIDE = 401;
    public static readonly PLUS = 402;
    public static readonly MINUS = 403;
    public static readonly STAR = 404;
    public static readonly MOD = 405;
    public static readonly DIV = 406;
    public static readonly AMPERSAND = 407;
    public static readonly TILDE = 408;
    public static readonly BITWISEOR = 409;
    public static readonly CONCATENATE = 410;
    public static readonly BITWISEXOR = 411;
    public static readonly QUESTION = 412;
    public static readonly DOLLAR = 413;
    public static readonly StringLiteral = 414;
    public static readonly CharSetLiteral = 415;
    public static readonly IntegralLiteral = 416;
    public static readonly NumberLiteral = 417;
    public static readonly ByteLengthLiteral = 418;
    public static readonly Number = 419;
    public static readonly Identifier = 420;
    public static readonly CharSetName = 421;
    public static readonly WHITE_SPACE = 422;
    public static readonly LINE_COMMENT = 423;
    public static readonly QUERY_HINT = 424;
    public static readonly SHOW_HINT = 425;
    public static readonly HIDDEN_HINT = 426;
    public static readonly RULE_statement = 0;
    public static readonly RULE_sqlStatement = 1;
    public static readonly RULE_explainStatement = 2;
    public static readonly RULE_explainOption = 3;
    public static readonly RULE_vectorizationOnly = 4;
    public static readonly RULE_vectorizatonDetail = 5;
    public static readonly RULE_execStatement = 6;
    public static readonly RULE_loadStatement = 7;
    public static readonly RULE_replicationClause = 8;
    public static readonly RULE_exportStatement = 9;
    public static readonly RULE_importStatement = 10;
    public static readonly RULE_replDumpStatement = 11;
    public static readonly RULE_replDbPolicy = 12;
    public static readonly RULE_replLoadStatement = 13;
    public static readonly RULE_replConfigs = 14;
    public static readonly RULE_replConfigsList = 15;
    public static readonly RULE_replTableLevelPolicy = 16;
    public static readonly RULE_replStatusStatement = 17;
    public static readonly RULE_ddlStatement = 18;
    public static readonly RULE_ifExists = 19;
    public static readonly RULE_restrictOrCascade = 20;
    public static readonly RULE_ifNotExists = 21;
    public static readonly RULE_force = 22;
    public static readonly RULE_rewriteEnabled = 23;
    public static readonly RULE_rewriteDisabled = 24;
    public static readonly RULE_storedAsDirs = 25;
    public static readonly RULE_orReplace = 26;
    public static readonly RULE_createDatabaseStatement = 27;
    public static readonly RULE_dbLocation = 28;
    public static readonly RULE_dbManagedLocation = 29;
    public static readonly RULE_dbProperties = 30;
    public static readonly RULE_dbPropertiesList = 31;
    public static readonly RULE_dbConnectorName = 32;
    public static readonly RULE_switchDatabaseStatement = 33;
    public static readonly RULE_dropDatabaseStatement = 34;
    public static readonly RULE_databaseComment = 35;
    public static readonly RULE_truncateTableStatement = 36;
    public static readonly RULE_dropTableStatement = 37;
    public static readonly RULE_inputFileFormat = 38;
    public static readonly RULE_tabTypeExpr = 39;
    public static readonly RULE_partTypeExpr = 40;
    public static readonly RULE_tabPartColTypeExpr = 41;
    public static readonly RULE_descStatement = 42;
    public static readonly RULE_analyzeStatement = 43;
    public static readonly RULE_from_in = 44;
    public static readonly RULE_db_schema = 45;
    public static readonly RULE_showStatement = 46;
    public static readonly RULE_showTablesFilterExpr = 47;
    public static readonly RULE_lockStatement = 48;
    public static readonly RULE_lockDatabase = 49;
    public static readonly RULE_lockMode = 50;
    public static readonly RULE_unlockStatement = 51;
    public static readonly RULE_unlockDatabase = 52;
    public static readonly RULE_createRoleStatement = 53;
    public static readonly RULE_dropRoleStatement = 54;
    public static readonly RULE_grantPrivileges = 55;
    public static readonly RULE_revokePrivileges = 56;
    public static readonly RULE_grantRole = 57;
    public static readonly RULE_revokeRole = 58;
    public static readonly RULE_showRoleGrants = 59;
    public static readonly RULE_showRoles = 60;
    public static readonly RULE_showCurrentRole = 61;
    public static readonly RULE_setRole = 62;
    public static readonly RULE_showGrants = 63;
    public static readonly RULE_showRolePrincipals = 64;
    public static readonly RULE_privilegeIncludeColObject = 65;
    public static readonly RULE_privilegeObject = 66;
    public static readonly RULE_privObject = 67;
    public static readonly RULE_privObjectCols = 68;
    public static readonly RULE_privilegeList = 69;
    public static readonly RULE_privlegeDef = 70;
    public static readonly RULE_privilegeType = 71;
    public static readonly RULE_principalSpecification = 72;
    public static readonly RULE_principalName = 73;
    public static readonly RULE_withGrantOption = 74;
    public static readonly RULE_grantOptionFor = 75;
    public static readonly RULE_adminOptionFor = 76;
    public static readonly RULE_withAdminOption = 77;
    public static readonly RULE_metastoreCheck = 78;
    public static readonly RULE_resourceList = 79;
    public static readonly RULE_resource = 80;
    public static readonly RULE_resourceType = 81;
    public static readonly RULE_createFunctionStatement = 82;
    public static readonly RULE_dropFunctionStatement = 83;
    public static readonly RULE_reloadFunctionsStatement = 84;
    public static readonly RULE_createMacroStatement = 85;
    public static readonly RULE_dropMacroStatement = 86;
    public static readonly RULE_createViewStatement = 87;
    public static readonly RULE_viewPartition = 88;
    public static readonly RULE_viewOrganization = 89;
    public static readonly RULE_viewClusterSpec = 90;
    public static readonly RULE_viewComplexSpec = 91;
    public static readonly RULE_viewDistSpec = 92;
    public static readonly RULE_viewSortSpec = 93;
    public static readonly RULE_dropViewStatement = 94;
    public static readonly RULE_createMaterializedViewStatement = 95;
    public static readonly RULE_dropMaterializedViewStatement = 96;
    public static readonly RULE_createScheduledQueryStatement = 97;
    public static readonly RULE_dropScheduledQueryStatement = 98;
    public static readonly RULE_alterScheduledQueryStatement = 99;
    public static readonly RULE_alterScheduledQueryChange = 100;
    public static readonly RULE_scheduleSpec = 101;
    public static readonly RULE_executedAsSpec = 102;
    public static readonly RULE_definedAsSpec = 103;
    public static readonly RULE_showFunctionIdentifier = 104;
    public static readonly RULE_showStmtIdentifier = 105;
    public static readonly RULE_tableComment = 106;
    public static readonly RULE_tableUsing = 107;
    public static readonly RULE_createTablePartitionSpec = 108;
    public static readonly RULE_createTablePartitionColumnTypeSpec = 109;
    public static readonly RULE_createTablePartitionColumnSpec = 110;
    public static readonly RULE_partitionTransformSpec = 111;
    public static readonly RULE_columnNameTransformConstraint = 112;
    public static readonly RULE_partitionTransformType = 113;
    public static readonly RULE_tableBuckets = 114;
    public static readonly RULE_tableImplBuckets = 115;
    public static readonly RULE_tableSkewed = 116;
    public static readonly RULE_rowFormat = 117;
    public static readonly RULE_recordReader = 118;
    public static readonly RULE_recordWriter = 119;
    public static readonly RULE_rowFormatSerde = 120;
    public static readonly RULE_rowFormatDelimited = 121;
    public static readonly RULE_tableRowFormat = 122;
    public static readonly RULE_tablePropertiesPrefixed = 123;
    public static readonly RULE_tableProperties = 124;
    public static readonly RULE_tablePropertiesList = 125;
    public static readonly RULE_keyValueProperty = 126;
    public static readonly RULE_keyProperty = 127;
    public static readonly RULE_tableRowFormatFieldIdentifier = 128;
    public static readonly RULE_tableRowFormatCollItemsIdentifier = 129;
    public static readonly RULE_tableRowFormatMapKeysIdentifier = 130;
    public static readonly RULE_tableRowFormatLinesIdentifier = 131;
    public static readonly RULE_tableRowNullFormat = 132;
    public static readonly RULE_tableFileFormat = 133;
    public static readonly RULE_tableLocation = 134;
    public static readonly RULE_columnNameTypeList = 135;
    public static readonly RULE_columnNameTypeOrConstraintList = 136;
    public static readonly RULE_columnNameColonTypeList = 137;
    public static readonly RULE_columnNameList = 138;
    public static readonly RULE_columnName = 139;
    public static readonly RULE_extColumnName = 140;
    public static readonly RULE_columnNameOrderList = 141;
    public static readonly RULE_columnParenthesesList = 142;
    public static readonly RULE_enableValidateSpecification = 143;
    public static readonly RULE_enableSpecification = 144;
    public static readonly RULE_validateSpecification = 145;
    public static readonly RULE_enforcedSpecification = 146;
    public static readonly RULE_relySpecification = 147;
    public static readonly RULE_createConstraint = 148;
    public static readonly RULE_alterConstraintWithName = 149;
    public static readonly RULE_tableLevelConstraint = 150;
    public static readonly RULE_pkUkConstraint = 151;
    public static readonly RULE_checkConstraint = 152;
    public static readonly RULE_createForeignKey = 153;
    public static readonly RULE_alterForeignKeyWithName = 154;
    public static readonly RULE_skewedValueElement = 155;
    public static readonly RULE_skewedColumnValuePairList = 156;
    public static readonly RULE_skewedColumnValuePair = 157;
    public static readonly RULE_skewedColumnValues = 158;
    public static readonly RULE_skewedColumnValue = 159;
    public static readonly RULE_skewedValueLocationElement = 160;
    public static readonly RULE_orderSpecification = 161;
    public static readonly RULE_nullOrdering = 162;
    public static readonly RULE_columnNameOrder = 163;
    public static readonly RULE_columnNameCommentList = 164;
    public static readonly RULE_columnNameComment = 165;
    public static readonly RULE_orderSpecificationRewrite = 166;
    public static readonly RULE_columnRefOrder = 167;
    public static readonly RULE_columnNameType = 168;
    public static readonly RULE_columnNameTypeOrConstraint = 169;
    public static readonly RULE_tableConstraint = 170;
    public static readonly RULE_columnNameTypeConstraint = 171;
    public static readonly RULE_columnConstraint = 172;
    public static readonly RULE_foreignKeyConstraint = 173;
    public static readonly RULE_colConstraint = 174;
    public static readonly RULE_alterColumnConstraint = 175;
    public static readonly RULE_alterForeignKeyConstraint = 176;
    public static readonly RULE_alterColConstraint = 177;
    public static readonly RULE_columnConstraintType = 178;
    public static readonly RULE_defaultVal = 179;
    public static readonly RULE_tableConstraintType = 180;
    public static readonly RULE_constraintOptsCreate = 181;
    public static readonly RULE_constraintOptsAlter = 182;
    public static readonly RULE_columnNameColonType = 183;
    public static readonly RULE_colType = 184;
    public static readonly RULE_colTypeList = 185;
    public static readonly RULE_type = 186;
    public static readonly RULE_primitiveType = 187;
    public static readonly RULE_listType = 188;
    public static readonly RULE_structType = 189;
    public static readonly RULE_mapType = 190;
    public static readonly RULE_unionType = 191;
    public static readonly RULE_setOperator = 192;
    public static readonly RULE_queryStatementExpression = 193;
    public static readonly RULE_queryStatementExpressionBody = 194;
    public static readonly RULE_withClause = 195;
    public static readonly RULE_cteStatement = 196;
    public static readonly RULE_fromStatement = 197;
    public static readonly RULE_singleFromStatement = 198;
    public static readonly RULE_regularBody = 199;
    public static readonly RULE_atomSelectStatement = 200;
    public static readonly RULE_selectStatement = 201;
    public static readonly RULE_setOpSelectStatement = 202;
    public static readonly RULE_selectStatementWithCTE = 203;
    public static readonly RULE_body = 204;
    public static readonly RULE_insertClause = 205;
    public static readonly RULE_destination = 206;
    public static readonly RULE_limitClause = 207;
    public static readonly RULE_deleteStatement = 208;
    public static readonly RULE_columnAssignmentClause = 209;
    public static readonly RULE_precedencePlusExpressionOrDefault = 210;
    public static readonly RULE_setColumnsClause = 211;
    public static readonly RULE_updateStatement = 212;
    public static readonly RULE_sqlTransactionStatement = 213;
    public static readonly RULE_startTransactionStatement = 214;
    public static readonly RULE_transactionMode = 215;
    public static readonly RULE_transactionAccessMode = 216;
    public static readonly RULE_isolationLevel = 217;
    public static readonly RULE_levelOfIsolation = 218;
    public static readonly RULE_commitStatement = 219;
    public static readonly RULE_rollbackStatement = 220;
    public static readonly RULE_setAutoCommitStatement = 221;
    public static readonly RULE_abortTransactionStatement = 222;
    public static readonly RULE_abortCompactionStatement = 223;
    public static readonly RULE_mergeStatement = 224;
    public static readonly RULE_whenClauses = 225;
    public static readonly RULE_whenNotMatchedClause = 226;
    public static readonly RULE_whenMatchedAndClause = 227;
    public static readonly RULE_whenMatchedThenClause = 228;
    public static readonly RULE_updateOrDelete = 229;
    public static readonly RULE_killQueryStatement = 230;
    public static readonly RULE_compactionId = 231;
    public static readonly RULE_compactionPool = 232;
    public static readonly RULE_compactionType = 233;
    public static readonly RULE_compactionStatus = 234;
    public static readonly RULE_alterStatement = 235;
    public static readonly RULE_alterTableStatementSuffix = 236;
    public static readonly RULE_alterTblPartitionStatementSuffix = 237;
    public static readonly RULE_alterStatementPartitionKeyType = 238;
    public static readonly RULE_alterViewStatementSuffix = 239;
    public static readonly RULE_alterMaterializedViewStatementSuffix = 240;
    public static readonly RULE_alterMaterializedViewSuffixRewrite = 241;
    public static readonly RULE_alterMaterializedViewSuffixRebuild = 242;
    public static readonly RULE_alterDatabaseStatementSuffix = 243;
    public static readonly RULE_alterDatabaseSuffixProperties = 244;
    public static readonly RULE_alterScopeProperties = 245;
    public static readonly RULE_alterDatabaseSuffixSetOwner = 246;
    public static readonly RULE_alterDatabaseSuffixSetLocation = 247;
    public static readonly RULE_alterDatabaseSuffixSetManagedLocation = 248;
    public static readonly RULE_alterStatementSuffixRename = 249;
    public static readonly RULE_alterStatementSuffixAddCol = 250;
    public static readonly RULE_alterStatementSuffixAddConstraint = 251;
    public static readonly RULE_alterStatementSuffixUpdateColumns = 252;
    public static readonly RULE_alterStatementSuffixDropConstraint = 253;
    public static readonly RULE_alterStatementSuffixRenameCol = 254;
    public static readonly RULE_alterStatementSuffixUpdateStatsCol = 255;
    public static readonly RULE_alterStatementSuffixUpdateStats = 256;
    public static readonly RULE_alterStatementChangeColPosition = 257;
    public static readonly RULE_alterStatementSuffixAddPartitions = 258;
    public static readonly RULE_alterStatementSuffixAddPartitionsElement = 259;
    public static readonly RULE_alterStatementSuffixTouch = 260;
    public static readonly RULE_alterStatementSuffixArchive = 261;
    public static readonly RULE_alterStatementSuffixUnArchive = 262;
    public static readonly RULE_partitionLocation = 263;
    public static readonly RULE_alterStatementSuffixDropPartitions = 264;
    public static readonly RULE_alterStatementSuffixProperties = 265;
    public static readonly RULE_alterViewSuffixProperties = 266;
    public static readonly RULE_alterStatementSuffixSerdeProperties = 267;
    public static readonly RULE_tablePartitionPrefix = 268;
    public static readonly RULE_alterStatementSuffixFileFormat = 269;
    public static readonly RULE_alterStatementSuffixClusterbySortby = 270;
    public static readonly RULE_alterTblPartitionStatementSuffixSkewedLocation = 271;
    public static readonly RULE_skewedLocations = 272;
    public static readonly RULE_skewedLocationsList = 273;
    public static readonly RULE_skewedLocationMap = 274;
    public static readonly RULE_alterStatementSuffixLocation = 275;
    public static readonly RULE_alterStatementSuffixSkewedby = 276;
    public static readonly RULE_alterStatementSuffixExchangePartition = 277;
    public static readonly RULE_alterStatementSuffixRenamePart = 278;
    public static readonly RULE_alterStatementSuffixStatsPart = 279;
    public static readonly RULE_alterStatementSuffixMergeFiles = 280;
    public static readonly RULE_alterStatementSuffixBucketNum = 281;
    public static readonly RULE_blocking = 282;
    public static readonly RULE_compactPool = 283;
    public static readonly RULE_alterStatementSuffixCompact = 284;
    public static readonly RULE_alterStatementSuffixSetOwner = 285;
    public static readonly RULE_alterStatementSuffixSetPartSpec = 286;
    public static readonly RULE_alterStatementSuffixExecute = 287;
    public static readonly RULE_fileFormat = 288;
    public static readonly RULE_alterDataConnectorStatementSuffix = 289;
    public static readonly RULE_alterDataConnectorSuffixProperties = 290;
    public static readonly RULE_alterDataConnectorSuffixSetOwner = 291;
    public static readonly RULE_alterDataConnectorSuffixSetUrl = 292;
    public static readonly RULE_likeTableOrFile = 293;
    public static readonly RULE_createTableStatement = 294;
    public static readonly RULE_createDataConnectorStatement = 295;
    public static readonly RULE_dataConnectorComment = 296;
    public static readonly RULE_dataConnectorUrl = 297;
    public static readonly RULE_dataConnectorType = 298;
    public static readonly RULE_dcProperties = 299;
    public static readonly RULE_dropDataConnectorStatement = 300;
    public static readonly RULE_tableAllColumns = 301;
    public static readonly RULE_tableOrColumn = 302;
    public static readonly RULE_defaultValue = 303;
    public static readonly RULE_expressionList = 304;
    public static readonly RULE_aliasList = 305;
    public static readonly RULE_fromClause = 306;
    public static readonly RULE_fromSource = 307;
    public static readonly RULE_atomjoinSource = 308;
    public static readonly RULE_joinSource = 309;
    public static readonly RULE_joinSourcePart = 310;
    public static readonly RULE_uniqueJoinSource = 311;
    public static readonly RULE_uniqueJoinExpr = 312;
    public static readonly RULE_uniqueJoinToken = 313;
    public static readonly RULE_joinToken = 314;
    public static readonly RULE_lateralView = 315;
    public static readonly RULE_tableAlias = 316;
    public static readonly RULE_tableBucketSample = 317;
    public static readonly RULE_splitSample = 318;
    public static readonly RULE_tableSample = 319;
    public static readonly RULE_tableSource = 320;
    public static readonly RULE_asOfClause = 321;
    public static readonly RULE_uniqueJoinTableSource = 322;
    public static readonly RULE_tableName = 323;
    public static readonly RULE_viewName = 324;
    public static readonly RULE_subQuerySource = 325;
    public static readonly RULE_partitioningSpec = 326;
    public static readonly RULE_partitionTableFunctionSource = 327;
    public static readonly RULE_partitionedTableFunction = 328;
    public static readonly RULE_whereClause = 329;
    public static readonly RULE_searchCondition = 330;
    public static readonly RULE_valuesSource = 331;
    public static readonly RULE_valuesClause = 332;
    public static readonly RULE_valuesTableConstructor = 333;
    public static readonly RULE_valueRowConstructor = 334;
    public static readonly RULE_firstValueRowConstructor = 335;
    public static readonly RULE_virtualTableSource = 336;
    public static readonly RULE_selectClause = 337;
    public static readonly RULE_all_distinct = 338;
    public static readonly RULE_selectList = 339;
    public static readonly RULE_selectTrfmClause = 340;
    public static readonly RULE_selectItem = 341;
    public static readonly RULE_trfmClause = 342;
    public static readonly RULE_selectExpression = 343;
    public static readonly RULE_selectExpressionList = 344;
    public static readonly RULE_window_clause = 345;
    public static readonly RULE_window_defn = 346;
    public static readonly RULE_window_specification = 347;
    public static readonly RULE_window_frame = 348;
    public static readonly RULE_window_range_expression = 349;
    public static readonly RULE_window_value_expression = 350;
    public static readonly RULE_window_frame_start_boundary = 351;
    public static readonly RULE_window_frame_boundary = 352;
    public static readonly RULE_groupByClause = 353;
    public static readonly RULE_groupby_expression = 354;
    public static readonly RULE_groupByEmpty = 355;
    public static readonly RULE_rollupStandard = 356;
    public static readonly RULE_rollupOldSyntax = 357;
    public static readonly RULE_groupingSetExpression = 358;
    public static readonly RULE_groupingSetExpressionMultiple = 359;
    public static readonly RULE_groupingExpressionSingle = 360;
    public static readonly RULE_havingClause = 361;
    public static readonly RULE_qualifyClause = 362;
    public static readonly RULE_havingCondition = 363;
    public static readonly RULE_expressionsInParenthesis = 364;
    public static readonly RULE_expressionsNotInParenthesis = 365;
    public static readonly RULE_expressionPart = 366;
    public static readonly RULE_expressionOrDefault = 367;
    public static readonly RULE_firstExpressionsWithAlias = 368;
    public static readonly RULE_expressionWithAlias = 369;
    public static readonly RULE_expressions = 370;
    public static readonly RULE_columnRefOrderInParenthesis = 371;
    public static readonly RULE_columnRefOrderNotInParenthesis = 372;
    public static readonly RULE_orderByClause = 373;
    public static readonly RULE_clusterByClause = 374;
    public static readonly RULE_partitionByClause = 375;
    public static readonly RULE_distributeByClause = 376;
    public static readonly RULE_sortByClause = 377;
    public static readonly RULE_trimFunction = 378;
    public static readonly RULE_function_ = 379;
    public static readonly RULE_null_treatment = 380;
    public static readonly RULE_functionName = 381;
    public static readonly RULE_castExpression = 382;
    public static readonly RULE_caseExpression = 383;
    public static readonly RULE_whenExpression = 384;
    public static readonly RULE_floorExpression = 385;
    public static readonly RULE_floorDateQualifiers = 386;
    public static readonly RULE_extractExpression = 387;
    public static readonly RULE_timeQualifiers = 388;
    public static readonly RULE_constant = 389;
    public static readonly RULE_prepareStmtParam = 390;
    public static readonly RULE_parameterIdx = 391;
    public static readonly RULE_stringLiteralSequence = 392;
    public static readonly RULE_charSetStringLiteral = 393;
    public static readonly RULE_dateLiteral = 394;
    public static readonly RULE_timestampLiteral = 395;
    public static readonly RULE_timestampLocalTZLiteral = 396;
    public static readonly RULE_intervalValue = 397;
    public static readonly RULE_intervalLiteral = 398;
    public static readonly RULE_intervalExpression = 399;
    public static readonly RULE_intervalQualifiers = 400;
    public static readonly RULE_expression = 401;
    public static readonly RULE_atomExpression = 402;
    public static readonly RULE_precedenceFieldExpression = 403;
    public static readonly RULE_precedenceUnaryOperator = 404;
    public static readonly RULE_precedenceUnaryPrefixExpression = 405;
    public static readonly RULE_precedenceBitwiseXorOperator = 406;
    public static readonly RULE_precedenceBitwiseXorExpression = 407;
    public static readonly RULE_precedenceStarOperator = 408;
    public static readonly RULE_precedenceStarExpression = 409;
    public static readonly RULE_precedencePlusOperator = 410;
    public static readonly RULE_precedencePlusExpression = 411;
    public static readonly RULE_precedenceConcatenateOperator = 412;
    public static readonly RULE_precedenceConcatenateExpression = 413;
    public static readonly RULE_precedenceAmpersandOperator = 414;
    public static readonly RULE_precedenceAmpersandExpression = 415;
    public static readonly RULE_precedenceBitwiseOrOperator = 416;
    public static readonly RULE_precedenceBitwiseOrExpression = 417;
    public static readonly RULE_precedenceRegexpOperator = 418;
    public static readonly RULE_precedenceSimilarOperator = 419;
    public static readonly RULE_subQueryExpression = 420;
    public static readonly RULE_precedenceSimilarExpression = 421;
    public static readonly RULE_precedenceSimilarExpressionMain = 422;
    public static readonly RULE_precedenceSimilarExpressionPart = 423;
    public static readonly RULE_precedenceSimilarExpressionAtom = 424;
    public static readonly RULE_precedenceSimilarExpressionQuantifierPredicate = 425;
    public static readonly RULE_quantifierType = 426;
    public static readonly RULE_precedenceSimilarExpressionIn = 427;
    public static readonly RULE_precedenceSimilarExpressionPartNot = 428;
    public static readonly RULE_precedenceDistinctOperator = 429;
    public static readonly RULE_precedenceEqualOperator = 430;
    public static readonly RULE_precedenceEqualExpression = 431;
    public static readonly RULE_isCondition = 432;
    public static readonly RULE_precedenceUnarySuffixExpression = 433;
    public static readonly RULE_precedenceNotOperator = 434;
    public static readonly RULE_precedenceNotExpression = 435;
    public static readonly RULE_precedenceAndOperator = 436;
    public static readonly RULE_precedenceAndExpression = 437;
    public static readonly RULE_precedenceOrOperator = 438;
    public static readonly RULE_precedenceOrExpression = 439;
    public static readonly RULE_booleanValue = 440;
    public static readonly RULE_booleanValueTok = 441;
    public static readonly RULE_tableOrPartition = 442;
    public static readonly RULE_partitionSpec = 443;
    public static readonly RULE_partitionVal = 444;
    public static readonly RULE_partitionSelectorSpec = 445;
    public static readonly RULE_partitionSelectorVal = 446;
    public static readonly RULE_partitionSelectorOperator = 447;
    public static readonly RULE_subQuerySelectorOperator = 448;
    public static readonly RULE_sysFuncNames = 449;
    public static readonly RULE_descFuncNames = 450;
    public static readonly RULE_id_ = 451;
    public static readonly RULE_functionIdentifier = 452;
    public static readonly RULE_principalIdentifier = 453;
    public static readonly RULE_nonReserved = 454;
    public static readonly RULE_sql11ReservedKeywordsUsedAsFunctionName = 455;
    public static readonly RULE_hint = 456;
    public static readonly RULE_hintList = 457;
    public static readonly RULE_hintItem = 458;
    public static readonly RULE_hintName = 459;
    public static readonly RULE_hintArgs = 460;
    public static readonly RULE_hintArgName = 461;
    public static readonly RULE_prepareStatement = 462;
    public static readonly RULE_executeStatement = 463;
    public static readonly RULE_executeParamList = 464;
    public static readonly RULE_resourcePlanDdlStatements = 465;
    public static readonly RULE_rpAssign = 466;
    public static readonly RULE_rpAssignList = 467;
    public static readonly RULE_rpUnassign = 468;
    public static readonly RULE_rpUnassignList = 469;
    public static readonly RULE_createResourcePlanStatement = 470;
    public static readonly RULE_withReplace = 471;
    public static readonly RULE_activate = 472;
    public static readonly RULE_enable = 473;
    public static readonly RULE_disable = 474;
    public static readonly RULE_unmanaged = 475;
    public static readonly RULE_alterResourcePlanStatement = 476;
    public static readonly RULE_globalWmStatement = 477;
    public static readonly RULE_replaceResourcePlanStatement = 478;
    public static readonly RULE_dropResourcePlanStatement = 479;
    public static readonly RULE_poolPath = 480;
    public static readonly RULE_triggerExpression = 481;
    public static readonly RULE_triggerExpressionStandalone = 482;
    public static readonly RULE_triggerOrExpression = 483;
    public static readonly RULE_triggerAndExpression = 484;
    public static readonly RULE_triggerAtomExpression = 485;
    public static readonly RULE_triggerLiteral = 486;
    public static readonly RULE_comparisionOperator = 487;
    public static readonly RULE_triggerActionExpression = 488;
    public static readonly RULE_triggerActionExpressionStandalone = 489;
    public static readonly RULE_createTriggerStatement = 490;
    public static readonly RULE_alterTriggerStatement = 491;
    public static readonly RULE_dropTriggerStatement = 492;
    public static readonly RULE_poolAssign = 493;
    public static readonly RULE_poolAssignList = 494;
    public static readonly RULE_createPoolStatement = 495;
    public static readonly RULE_alterPoolStatement = 496;
    public static readonly RULE_dropPoolStatement = 497;
    public static readonly RULE_createMappingStatement = 498;
    public static readonly RULE_alterMappingStatement = 499;
    public static readonly RULE_dropMappingStatement = 500;

    public static readonly literalNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, "'.'", "':'", 
        "','", "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'_'", null, 
        "'<=>'", null, "'<='", "'<'", "'>='", "'>'", "'/'", "'+'", "'-'", 
        "'*'", "'%'", "'DIV'", "'&'", "'~'", "'|'", "'||'", "'^'", "'?'", 
        "'$'"
    ];

    public static readonly symbolicNames = [
        null, "KW_ABORT", "KW_ACTIVATE", "KW_ACTIVE", "KW_ADD", "KW_ADMIN", 
        "KW_AFTER", "KW_ALL", "KW_ALLOC_FRACTION", "KW_ALTER", "KW_ANALYZE", 
        "KW_AND", "KW_ANTI", "KW_ANY", "KW_APPLICATION", "KW_ARCHIVE", "KW_ARRAY", 
        "KW_AS", "KW_ASC", "KW_AST", "KW_AT", "KW_AUTHORIZATION", "KW_AUTOCOMMIT", 
        "KW_BATCH", "KW_BEFORE", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", 
        "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_CACHE", 
        "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CBO", "KW_CHANGE", "KW_CHAR", 
        "KW_CHECK", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", "KW_COLLECTION", 
        "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPACT", 
        "KW_COMPACTIONS", "KW_COMPACT_ID", "KW_COMPUTE", "KW_CONCATENATE", 
        "KW_CONF", "KW_CONSTRAINT", "KW_CONTINUE", "KW_COST", "KW_CREATE", 
        "KW_CRON", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", 
        "KW_CURRENT_TIMESTAMP", "KW_CURSOR", "KW_DATA", "KW_DATABASE", "KW_DATABASES", 
        "KW_DATACONNECTOR", "KW_DATACONNECTORS", "KW_DATE", "KW_DATETIME", 
        "KW_DAY", "KW_DAYOFWEEK", "KW_DBPROPERTIES", "KW_DCPROPERTIES", 
        "KW_DDL", "KW_DEBUG", "KW_DECIMAL", "KW_DEFAULT", "KW_DEFERRED", 
        "KW_DEFINED", "KW_DELETE", "KW_DELIMITED", "KW_DEPENDENCY", "KW_DESC", 
        "KW_DESCRIBE", "KW_DETAIL", "KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", 
        "KW_DISTINCT", "KW_DISTRIBUTE", "KW_DISTRIBUTED", "KW_DO", "KW_DOUBLE", 
        "KW_DOW", "KW_DROP", "KW_DUMP", "KW_ELEM_TYPE", "KW_ELSE", "KW_ENABLE", 
        "KW_END", "KW_ENFORCED", "KW_ESCAPED", "KW_EVERY", "KW_EXCEPT", 
        "KW_EXCHANGE", "KW_EXCLUSIVE", "KW_EXECUTE", "KW_EXECUTED", "KW_EXISTS", 
        "KW_EXPIRE_SNAPSHOTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXPRESSION", 
        "KW_EXTENDED", "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", "KW_FETCH", 
        "KW_FIELDS", "KW_FILE", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", 
        "KW_FLOOR", "KW_FOLLOWING", "KW_FOR", "KW_FORCE", "KW_FOREIGN", 
        "KW_FORMAT", "KW_FORMATTED", "KW_FROM", "KW_FULL", "KW_FUNCTION", 
        "KW_FUNCTIONS", "KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_HAVING", 
        "KW_HDFS", "KW_HOLD_DDLTIME", "KW_HOUR", "KW_IDXPROPERTIES", "KW_IF", 
        "KW_IGNORE", "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", "KW_INNER", 
        "KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", "KW_INT", 
        "KW_INTERSECT", "KW_INTERVAL", "KW_INTO", "KW_IS", "KW_ISOLATION", 
        "KW_ITEMS", "KW_JAR", "KW_JOIN", "KW_JOINCOST", "KW_KEY", "KW_KEYS", 
        "KW_KEY_TYPE", "KW_KILL", "KW_LAST", "KW_LATERAL", "KW_LEADING", 
        "KW_LEFT", "KW_LESS", "KW_LEVEL", "KW_LIKE", "KW_LIMIT", "KW_LINES", 
        "KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", 
        "KW_LONG", "KW_MACRO", "KW_MANAGED", "KW_MANAGEDLOCATION", "KW_MANAGEMENT", 
        "KW_MAP", "KW_MAPJOIN", "KW_MAPPING", "KW_MATCHED", "KW_MATERIALIZED", 
        "KW_MERGE", "KW_METADATA", "KW_MINUS", "KW_MINUTE", "KW_MONTH", 
        "KW_MORE", "KW_MOVE", "KW_MSCK", "KW_NONE", "KW_NORELY", "KW_NOSCAN", 
        "KW_NOT", "KW_NOVALIDATE", "KW_NO_DROP", "KW_NULL", "KW_NULLS", 
        "KW_OF", "KW_OFFLINE", "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OPERATOR", 
        "KW_OPTION", "KW_OR", "KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", 
        "KW_OUTPUTFORMAT", "KW_OVER", "KW_OVERWRITE", "KW_OWNER", "KW_PARTITION", 
        "KW_PARTITIONED", "KW_PARTITIONS", "KW_PATH", "KW_PERCENT", "KW_PKFK_JOIN", 
        "KW_PLAN", "KW_PLANS", "KW_PLUS", "KW_POOL", "KW_PRECEDING", "KW_PRECISION", 
        "KW_PREPARE", "KW_PRESERVE", "KW_PRIMARY", "KW_PRINCIPALS", "KW_PROCEDURE", 
        "KW_PROTECTION", "KW_PURGE", "KW_QUALIFY", "KW_QUARTER", "KW_QUERY", 
        "KW_QUERY_PARALLELISM", "KW_RANGE", "KW_READ", "KW_READONLY", "KW_READS", 
        "KW_REAL", "KW_REBUILD", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_REDUCE", 
        "KW_REFERENCES", "KW_REGEXP", "KW_RELOAD", "KW_RELY", "KW_REMOTE", 
        "KW_RENAME", "KW_REOPTIMIZATION", "KW_REPAIR", "KW_REPL", "KW_REPLACE", 
        "KW_REPLICATION", "KW_RESOURCE", "KW_RESPECT", "KW_RESTRICT", "KW_REVOKE", 
        "KW_REWRITE", "KW_RIGHT", "KW_RLIKE", "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", 
        "KW_ROLLUP", "KW_ROW", "KW_ROWS", "KW_SCHEDULED", "KW_SCHEDULING_POLICY", 
        "KW_SCHEMA", "KW_SCHEMAS", "KW_SECOND", "KW_SELECT", "KW_SEMI", 
        "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SERVER", "KW_SET", "KW_SETS", 
        "KW_SET_CURRENT_SNAPSHOT", "KW_SHARED", "KW_SHOW", "KW_SHOW_DATABASE", 
        "KW_SKEWED", "KW_SMALLINT", "KW_SNAPSHOT", "KW_SOME", "KW_SORT", 
        "KW_SORTED", "KW_SPEC", "KW_SSL", "KW_START", "KW_STATISTICS", "KW_STATUS", 
        "KW_STORED", "KW_STREAMTABLE", "KW_STRING", "KW_STRUCT", "KW_SUMMARY", 
        "KW_SYNC", "KW_SYSTEM_TIME", "KW_SYSTEM_VERSION", "KW_TABLE", "KW_TABLES", 
        "KW_TABLESAMPLE", "KW_TBLPROPERTIES", "KW_TEMPORARY", "KW_TERMINATED", 
        "KW_THEN", "KW_TIME", "KW_TIMESTAMP", "KW_TIMESTAMPLOCALTZ", "KW_TIMESTAMPTZ", 
        "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRAILING", "KW_TRANSACTION", 
        "KW_TRANSACTIONAL", "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIGGER", 
        "KW_TRIM", "KW_TRUE", "KW_TRUNCATE", "KW_TYPE", "KW_UNARCHIVE", 
        "KW_UNBOUNDED", "KW_UNDO", "KW_UNION", "KW_UNIONTYPE", "KW_UNIQUE", 
        "KW_UNIQUEJOIN", "KW_UNKNOWN", "KW_UNLOCK", "KW_UNMANAGED", "KW_UNSET", 
        "KW_UNSIGNED", "KW_UPDATE", "KW_URI", "KW_URL", "KW_USE", "KW_USER", 
        "KW_USING", "KW_UTC", "KW_UTCTIMESTAMP", "KW_VALIDATE", "KW_VALUES", 
        "KW_VALUE_TYPE", "KW_VARCHAR", "KW_VECTORIZATION", "KW_VIEW", "KW_VIEWS", 
        "KW_WAIT", "KW_WEEK", "KW_WHEN", "KW_WHERE", "KW_WHILE", "KW_WINDOW", 
        "KW_WITH", "KW_WITHIN", "KW_WORK", "KW_WORKLOAD", "KW_WRITE", "KW_YEAR", 
        "KW_ZONE", "DOT", "COLON", "COMMA", "SEMICOLON", "LPAREN", "RPAREN", 
        "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", "UNDERLINE_SIGN", "EQUAL", 
        "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", "GREATERTHANOREQUALTO", 
        "GREATERTHAN", "DIVIDE", "PLUS", "MINUS", "STAR", "MOD", "DIV", 
        "AMPERSAND", "TILDE", "BITWISEOR", "CONCATENATE", "BITWISEXOR", 
        "QUESTION", "DOLLAR", "StringLiteral", "CharSetLiteral", "IntegralLiteral", 
        "NumberLiteral", "ByteLengthLiteral", "Number", "Identifier", "CharSetName", 
        "WHITE_SPACE", "LINE_COMMENT", "QUERY_HINT", "SHOW_HINT", "HIDDEN_HINT"
    ];
    public static readonly ruleNames = [
        "statement", "sqlStatement", "explainStatement", "explainOption", 
        "vectorizationOnly", "vectorizatonDetail", "execStatement", "loadStatement", 
        "replicationClause", "exportStatement", "importStatement", "replDumpStatement", 
        "replDbPolicy", "replLoadStatement", "replConfigs", "replConfigsList", 
        "replTableLevelPolicy", "replStatusStatement", "ddlStatement", "ifExists", 
        "restrictOrCascade", "ifNotExists", "force", "rewriteEnabled", "rewriteDisabled", 
        "storedAsDirs", "orReplace", "createDatabaseStatement", "dbLocation", 
        "dbManagedLocation", "dbProperties", "dbPropertiesList", "dbConnectorName", 
        "switchDatabaseStatement", "dropDatabaseStatement", "databaseComment", 
        "truncateTableStatement", "dropTableStatement", "inputFileFormat", 
        "tabTypeExpr", "partTypeExpr", "tabPartColTypeExpr", "descStatement", 
        "analyzeStatement", "from_in", "db_schema", "showStatement", "showTablesFilterExpr", 
        "lockStatement", "lockDatabase", "lockMode", "unlockStatement", 
        "unlockDatabase", "createRoleStatement", "dropRoleStatement", "grantPrivileges", 
        "revokePrivileges", "grantRole", "revokeRole", "showRoleGrants", 
        "showRoles", "showCurrentRole", "setRole", "showGrants", "showRolePrincipals", 
        "privilegeIncludeColObject", "privilegeObject", "privObject", "privObjectCols", 
        "privilegeList", "privlegeDef", "privilegeType", "principalSpecification", 
        "principalName", "withGrantOption", "grantOptionFor", "adminOptionFor", 
        "withAdminOption", "metastoreCheck", "resourceList", "resource", 
        "resourceType", "createFunctionStatement", "dropFunctionStatement", 
        "reloadFunctionsStatement", "createMacroStatement", "dropMacroStatement", 
        "createViewStatement", "viewPartition", "viewOrganization", "viewClusterSpec", 
        "viewComplexSpec", "viewDistSpec", "viewSortSpec", "dropViewStatement", 
        "createMaterializedViewStatement", "dropMaterializedViewStatement", 
        "createScheduledQueryStatement", "dropScheduledQueryStatement", 
        "alterScheduledQueryStatement", "alterScheduledQueryChange", "scheduleSpec", 
        "executedAsSpec", "definedAsSpec", "showFunctionIdentifier", "showStmtIdentifier", 
        "tableComment", "tableUsing", "createTablePartitionSpec", "createTablePartitionColumnTypeSpec", 
        "createTablePartitionColumnSpec", "partitionTransformSpec", "columnNameTransformConstraint", 
        "partitionTransformType", "tableBuckets", "tableImplBuckets", "tableSkewed", 
        "rowFormat", "recordReader", "recordWriter", "rowFormatSerde", "rowFormatDelimited", 
        "tableRowFormat", "tablePropertiesPrefixed", "tableProperties", 
        "tablePropertiesList", "keyValueProperty", "keyProperty", "tableRowFormatFieldIdentifier", 
        "tableRowFormatCollItemsIdentifier", "tableRowFormatMapKeysIdentifier", 
        "tableRowFormatLinesIdentifier", "tableRowNullFormat", "tableFileFormat", 
        "tableLocation", "columnNameTypeList", "columnNameTypeOrConstraintList", 
        "columnNameColonTypeList", "columnNameList", "columnName", "extColumnName", 
        "columnNameOrderList", "columnParenthesesList", "enableValidateSpecification", 
        "enableSpecification", "validateSpecification", "enforcedSpecification", 
        "relySpecification", "createConstraint", "alterConstraintWithName", 
        "tableLevelConstraint", "pkUkConstraint", "checkConstraint", "createForeignKey", 
        "alterForeignKeyWithName", "skewedValueElement", "skewedColumnValuePairList", 
        "skewedColumnValuePair", "skewedColumnValues", "skewedColumnValue", 
        "skewedValueLocationElement", "orderSpecification", "nullOrdering", 
        "columnNameOrder", "columnNameCommentList", "columnNameComment", 
        "orderSpecificationRewrite", "columnRefOrder", "columnNameType", 
        "columnNameTypeOrConstraint", "tableConstraint", "columnNameTypeConstraint", 
        "columnConstraint", "foreignKeyConstraint", "colConstraint", "alterColumnConstraint", 
        "alterForeignKeyConstraint", "alterColConstraint", "columnConstraintType", 
        "defaultVal", "tableConstraintType", "constraintOptsCreate", "constraintOptsAlter", 
        "columnNameColonType", "colType", "colTypeList", "type", "primitiveType", 
        "listType", "structType", "mapType", "unionType", "setOperator", 
        "queryStatementExpression", "queryStatementExpressionBody", "withClause", 
        "cteStatement", "fromStatement", "singleFromStatement", "regularBody", 
        "atomSelectStatement", "selectStatement", "setOpSelectStatement", 
        "selectStatementWithCTE", "body", "insertClause", "destination", 
        "limitClause", "deleteStatement", "columnAssignmentClause", "precedencePlusExpressionOrDefault", 
        "setColumnsClause", "updateStatement", "sqlTransactionStatement", 
        "startTransactionStatement", "transactionMode", "transactionAccessMode", 
        "isolationLevel", "levelOfIsolation", "commitStatement", "rollbackStatement", 
        "setAutoCommitStatement", "abortTransactionStatement", "abortCompactionStatement", 
        "mergeStatement", "whenClauses", "whenNotMatchedClause", "whenMatchedAndClause", 
        "whenMatchedThenClause", "updateOrDelete", "killQueryStatement", 
        "compactionId", "compactionPool", "compactionType", "compactionStatus", 
        "alterStatement", "alterTableStatementSuffix", "alterTblPartitionStatementSuffix", 
        "alterStatementPartitionKeyType", "alterViewStatementSuffix", "alterMaterializedViewStatementSuffix", 
        "alterMaterializedViewSuffixRewrite", "alterMaterializedViewSuffixRebuild", 
        "alterDatabaseStatementSuffix", "alterDatabaseSuffixProperties", 
        "alterScopeProperties", "alterDatabaseSuffixSetOwner", "alterDatabaseSuffixSetLocation", 
        "alterDatabaseSuffixSetManagedLocation", "alterStatementSuffixRename", 
        "alterStatementSuffixAddCol", "alterStatementSuffixAddConstraint", 
        "alterStatementSuffixUpdateColumns", "alterStatementSuffixDropConstraint", 
        "alterStatementSuffixRenameCol", "alterStatementSuffixUpdateStatsCol", 
        "alterStatementSuffixUpdateStats", "alterStatementChangeColPosition", 
        "alterStatementSuffixAddPartitions", "alterStatementSuffixAddPartitionsElement", 
        "alterStatementSuffixTouch", "alterStatementSuffixArchive", "alterStatementSuffixUnArchive", 
        "partitionLocation", "alterStatementSuffixDropPartitions", "alterStatementSuffixProperties", 
        "alterViewSuffixProperties", "alterStatementSuffixSerdeProperties", 
        "tablePartitionPrefix", "alterStatementSuffixFileFormat", "alterStatementSuffixClusterbySortby", 
        "alterTblPartitionStatementSuffixSkewedLocation", "skewedLocations", 
        "skewedLocationsList", "skewedLocationMap", "alterStatementSuffixLocation", 
        "alterStatementSuffixSkewedby", "alterStatementSuffixExchangePartition", 
        "alterStatementSuffixRenamePart", "alterStatementSuffixStatsPart", 
        "alterStatementSuffixMergeFiles", "alterStatementSuffixBucketNum", 
        "blocking", "compactPool", "alterStatementSuffixCompact", "alterStatementSuffixSetOwner", 
        "alterStatementSuffixSetPartSpec", "alterStatementSuffixExecute", 
        "fileFormat", "alterDataConnectorStatementSuffix", "alterDataConnectorSuffixProperties", 
        "alterDataConnectorSuffixSetOwner", "alterDataConnectorSuffixSetUrl", 
        "likeTableOrFile", "createTableStatement", "createDataConnectorStatement", 
        "dataConnectorComment", "dataConnectorUrl", "dataConnectorType", 
        "dcProperties", "dropDataConnectorStatement", "tableAllColumns", 
        "tableOrColumn", "defaultValue", "expressionList", "aliasList", 
        "fromClause", "fromSource", "atomjoinSource", "joinSource", "joinSourcePart", 
        "uniqueJoinSource", "uniqueJoinExpr", "uniqueJoinToken", "joinToken", 
        "lateralView", "tableAlias", "tableBucketSample", "splitSample", 
        "tableSample", "tableSource", "asOfClause", "uniqueJoinTableSource", 
        "tableName", "viewName", "subQuerySource", "partitioningSpec", "partitionTableFunctionSource", 
        "partitionedTableFunction", "whereClause", "searchCondition", "valuesSource", 
        "valuesClause", "valuesTableConstructor", "valueRowConstructor", 
        "firstValueRowConstructor", "virtualTableSource", "selectClause", 
        "all_distinct", "selectList", "selectTrfmClause", "selectItem", 
        "trfmClause", "selectExpression", "selectExpressionList", "window_clause", 
        "window_defn", "window_specification", "window_frame", "window_range_expression", 
        "window_value_expression", "window_frame_start_boundary", "window_frame_boundary", 
        "groupByClause", "groupby_expression", "groupByEmpty", "rollupStandard", 
        "rollupOldSyntax", "groupingSetExpression", "groupingSetExpressionMultiple", 
        "groupingExpressionSingle", "havingClause", "qualifyClause", "havingCondition", 
        "expressionsInParenthesis", "expressionsNotInParenthesis", "expressionPart", 
        "expressionOrDefault", "firstExpressionsWithAlias", "expressionWithAlias", 
        "expressions", "columnRefOrderInParenthesis", "columnRefOrderNotInParenthesis", 
        "orderByClause", "clusterByClause", "partitionByClause", "distributeByClause", 
        "sortByClause", "trimFunction", "function_", "null_treatment", "functionName", 
        "castExpression", "caseExpression", "whenExpression", "floorExpression", 
        "floorDateQualifiers", "extractExpression", "timeQualifiers", "constant", 
        "prepareStmtParam", "parameterIdx", "stringLiteralSequence", "charSetStringLiteral", 
        "dateLiteral", "timestampLiteral", "timestampLocalTZLiteral", "intervalValue", 
        "intervalLiteral", "intervalExpression", "intervalQualifiers", "expression", 
        "atomExpression", "precedenceFieldExpression", "precedenceUnaryOperator", 
        "precedenceUnaryPrefixExpression", "precedenceBitwiseXorOperator", 
        "precedenceBitwiseXorExpression", "precedenceStarOperator", "precedenceStarExpression", 
        "precedencePlusOperator", "precedencePlusExpression", "precedenceConcatenateOperator", 
        "precedenceConcatenateExpression", "precedenceAmpersandOperator", 
        "precedenceAmpersandExpression", "precedenceBitwiseOrOperator", 
        "precedenceBitwiseOrExpression", "precedenceRegexpOperator", "precedenceSimilarOperator", 
        "subQueryExpression", "precedenceSimilarExpression", "precedenceSimilarExpressionMain", 
        "precedenceSimilarExpressionPart", "precedenceSimilarExpressionAtom", 
        "precedenceSimilarExpressionQuantifierPredicate", "quantifierType", 
        "precedenceSimilarExpressionIn", "precedenceSimilarExpressionPartNot", 
        "precedenceDistinctOperator", "precedenceEqualOperator", "precedenceEqualExpression", 
        "isCondition", "precedenceUnarySuffixExpression", "precedenceNotOperator", 
        "precedenceNotExpression", "precedenceAndOperator", "precedenceAndExpression", 
        "precedenceOrOperator", "precedenceOrExpression", "booleanValue", 
        "booleanValueTok", "tableOrPartition", "partitionSpec", "partitionVal", 
        "partitionSelectorSpec", "partitionSelectorVal", "partitionSelectorOperator", 
        "subQuerySelectorOperator", "sysFuncNames", "descFuncNames", "id_", 
        "functionIdentifier", "principalIdentifier", "nonReserved", "sql11ReservedKeywordsUsedAsFunctionName", 
        "hint", "hintList", "hintItem", "hintName", "hintArgs", "hintArgName", 
        "prepareStatement", "executeStatement", "executeParamList", "resourcePlanDdlStatements", 
        "rpAssign", "rpAssignList", "rpUnassign", "rpUnassignList", "createResourcePlanStatement", 
        "withReplace", "activate", "enable", "disable", "unmanaged", "alterResourcePlanStatement", 
        "globalWmStatement", "replaceResourcePlanStatement", "dropResourcePlanStatement", 
        "poolPath", "triggerExpression", "triggerExpressionStandalone", 
        "triggerOrExpression", "triggerAndExpression", "triggerAtomExpression", 
        "triggerLiteral", "comparisionOperator", "triggerActionExpression", 
        "triggerActionExpressionStandalone", "createTriggerStatement", "alterTriggerStatement", 
        "dropTriggerStatement", "poolAssign", "poolAssignList", "createPoolStatement", 
        "alterPoolStatement", "dropPoolStatement", "createMappingStatement", 
        "alterMappingStatement", "dropMappingStatement",
    ];

    public get grammarFileName(): string { return "HiveSQL.g4"; }
    public get literalNames(): (string | null)[] { return HiveSQLParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return HiveSQLParser.symbolicNames; }
    public get ruleNames(): string[] { return HiveSQLParser.ruleNames; }
    public get serializedATN(): number[] { return HiveSQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, HiveSQLParser._ATN, HiveSQLParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 0, HiveSQLParser.RULE_statement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1002;
            this.sqlStatement();
            this.state = 1003;
            this.match(HiveSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlStatement(): SqlStatementContext {
        let localContext = new SqlStatementContext(this.context, this.state);
        this.enterRule(localContext, 2, HiveSQLParser.RULE_sqlStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1009;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 1538) !== 0) || _la === 48 || _la === 58 || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & 2282258713) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & 8912897) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4194561) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 8456201) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & 810024961) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & 17858625) !== 0) || _la === 308 || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & 8537089) !== 0) || _la === 376 || _la === 387) {
                {
                this.state = 1007;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_EXPLAIN:
                    {
                    this.state = 1005;
                    this.explainStatement();
                    }
                    break;
                case HiveSQLParser.KW_ABORT:
                case HiveSQLParser.KW_ALTER:
                case HiveSQLParser.KW_ANALYZE:
                case HiveSQLParser.KW_COMMIT:
                case HiveSQLParser.KW_CREATE:
                case HiveSQLParser.KW_DELETE:
                case HiveSQLParser.KW_DESC:
                case HiveSQLParser.KW_DESCRIBE:
                case HiveSQLParser.KW_DISABLE:
                case HiveSQLParser.KW_DROP:
                case HiveSQLParser.KW_ENABLE:
                case HiveSQLParser.KW_EXECUTE:
                case HiveSQLParser.KW_EXPORT:
                case HiveSQLParser.KW_FROM:
                case HiveSQLParser.KW_GRANT:
                case HiveSQLParser.KW_IMPORT:
                case HiveSQLParser.KW_INSERT:
                case HiveSQLParser.KW_KILL:
                case HiveSQLParser.KW_LOAD:
                case HiveSQLParser.KW_LOCK:
                case HiveSQLParser.KW_MAP:
                case HiveSQLParser.KW_MERGE:
                case HiveSQLParser.KW_MSCK:
                case HiveSQLParser.KW_PREPARE:
                case HiveSQLParser.KW_REDUCE:
                case HiveSQLParser.KW_RELOAD:
                case HiveSQLParser.KW_REPL:
                case HiveSQLParser.KW_REPLACE:
                case HiveSQLParser.KW_REVOKE:
                case HiveSQLParser.KW_ROLLBACK:
                case HiveSQLParser.KW_SELECT:
                case HiveSQLParser.KW_SET:
                case HiveSQLParser.KW_SHOW:
                case HiveSQLParser.KW_START:
                case HiveSQLParser.KW_TRUNCATE:
                case HiveSQLParser.KW_UNLOCK:
                case HiveSQLParser.KW_UPDATE:
                case HiveSQLParser.KW_USE:
                case HiveSQLParser.KW_VALUES:
                case HiveSQLParser.KW_WITH:
                case HiveSQLParser.LPAREN:
                    {
                    this.state = 1006;
                    this.execStatement();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 1011;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStatement(): ExplainStatementContext {
        let localContext = new ExplainStatementContext(this.context, this.state);
        this.enterRule(localContext, 4, HiveSQLParser.RULE_explainStatement);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1012;
            this.match(HiveSQLParser.KW_EXPLAIN);
            this.state = 1022;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ALTER:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AUTHORIZATION:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_COMMIT:
            case HiveSQLParser.KW_CREATE:
            case HiveSQLParser.KW_DDL:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DELETE:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DESCRIBE:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DROP:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXTENDED:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FROM:
            case HiveSQLParser.KW_GRANT:
            case HiveSQLParser.KW_IMPORT:
            case HiveSQLParser.KW_INSERT:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_MAP:
            case HiveSQLParser.KW_MERGE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_PREPARE:
            case HiveSQLParser.KW_REDUCE:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REVOKE:
            case HiveSQLParser.KW_ROLLBACK:
            case HiveSQLParser.KW_SELECT:
            case HiveSQLParser.KW_SET:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_START:
            case HiveSQLParser.KW_TRUNCATE:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UPDATE:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_VALUES:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_WITH:
            case HiveSQLParser.LPAREN:
                {
                this.state = 1016;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 2, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1013;
                        this.explainOption();
                        }
                        }
                    }
                    this.state = 1018;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 2, this.context);
                }
                this.state = 1019;
                this.execStatement();
                }
                break;
            case HiveSQLParser.KW_REWRITE:
                {
                this.state = 1020;
                this.match(HiveSQLParser.KW_REWRITE);
                this.state = 1021;
                this.queryStatementExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1024;
            this.match(HiveSQLParser.SEMICOLON);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainOption(): ExplainOptionContext {
        let localContext = new ExplainOptionContext(this.context, this.state);
        this.enterRule(localContext, 6, HiveSQLParser.RULE_explainOption);
        let _la: number;
        try {
            this.state = 1048;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_EXTENDED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1026;
                this.match(HiveSQLParser.KW_EXTENDED);
                }
                break;
            case HiveSQLParser.KW_FORMATTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1027;
                this.match(HiveSQLParser.KW_FORMATTED);
                }
                break;
            case HiveSQLParser.KW_DEPENDENCY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1028;
                this.match(HiveSQLParser.KW_DEPENDENCY);
                }
                break;
            case HiveSQLParser.KW_CBO:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1029;
                this.match(HiveSQLParser.KW_CBO);
                this.state = 1031;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 57 || _la === 166) {
                    {
                    this.state = 1030;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 57 || _la === 166)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case HiveSQLParser.KW_LOGICAL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1033;
                this.match(HiveSQLParser.KW_LOGICAL);
                }
                break;
            case HiveSQLParser.KW_AUTHORIZATION:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1034;
                this.match(HiveSQLParser.KW_AUTHORIZATION);
                }
                break;
            case HiveSQLParser.KW_ANALYZE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1035;
                this.match(HiveSQLParser.KW_ANALYZE);
                }
                break;
            case HiveSQLParser.KW_REOPTIMIZATION:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1036;
                this.match(HiveSQLParser.KW_REOPTIMIZATION);
                }
                break;
            case HiveSQLParser.KW_LOCKS:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1037;
                this.match(HiveSQLParser.KW_LOCKS);
                }
                break;
            case HiveSQLParser.KW_AST:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1038;
                this.match(HiveSQLParser.KW_AST);
                }
                break;
            case HiveSQLParser.KW_VECTORIZATION:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1039;
                this.match(HiveSQLParser.KW_VECTORIZATION);
                this.state = 1041;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1040;
                    this.vectorizationOnly();
                    }
                }

                this.state = 1044;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 116 || _la === 217 || _la === 315) {
                    {
                    this.state = 1043;
                    this.vectorizatonDetail();
                    }
                }

                }
                break;
            case HiveSQLParser.KW_DEBUG:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1046;
                this.match(HiveSQLParser.KW_DEBUG);
                }
                break;
            case HiveSQLParser.KW_DDL:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1047;
                this.match(HiveSQLParser.KW_DDL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vectorizationOnly(): VectorizationOnlyContext {
        let localContext = new VectorizationOnlyContext(this.context, this.state);
        this.enterRule(localContext, 8, HiveSQLParser.RULE_vectorizationOnly);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1050;
            this.match(HiveSQLParser.KW_ONLY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vectorizatonDetail(): VectorizatonDetailContext {
        let localContext = new VectorizatonDetailContext(this.context, this.state);
        this.enterRule(localContext, 10, HiveSQLParser.RULE_vectorizatonDetail);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1052;
            _la = this.tokenStream.LA(1);
            if(!(_la === 88 || _la === 116 || _la === 217 || _la === 315)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public execStatement(): ExecStatementContext {
        let localContext = new ExecStatementContext(this.context, this.state);
        this.enterRule(localContext, 12, HiveSQLParser.RULE_execStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1068;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 8, this.context) ) {
            case 1:
                {
                this.state = 1054;
                this.queryStatementExpression();
                }
                break;
            case 2:
                {
                this.state = 1055;
                this.loadStatement();
                }
                break;
            case 3:
                {
                this.state = 1056;
                this.exportStatement();
                }
                break;
            case 4:
                {
                this.state = 1057;
                this.importStatement();
                }
                break;
            case 5:
                {
                this.state = 1058;
                this.replDumpStatement();
                }
                break;
            case 6:
                {
                this.state = 1059;
                this.replLoadStatement();
                }
                break;
            case 7:
                {
                this.state = 1060;
                this.replStatusStatement();
                }
                break;
            case 8:
                {
                this.state = 1061;
                this.ddlStatement();
                }
                break;
            case 9:
                {
                this.state = 1062;
                this.deleteStatement();
                }
                break;
            case 10:
                {
                this.state = 1063;
                this.updateStatement();
                }
                break;
            case 11:
                {
                this.state = 1064;
                this.sqlTransactionStatement();
                }
                break;
            case 12:
                {
                this.state = 1065;
                this.mergeStatement();
                }
                break;
            case 13:
                {
                this.state = 1066;
                this.prepareStatement();
                }
                break;
            case 14:
                {
                this.state = 1067;
                this.executeStatement();
                }
                break;
            }
            this.state = 1070;
            this.match(HiveSQLParser.SEMICOLON);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadStatement(): LoadStatementContext {
        let localContext = new LoadStatementContext(this.context, this.state);
        this.enterRule(localContext, 14, HiveSQLParser.RULE_loadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1072;
            this.match(HiveSQLParser.KW_LOAD);
            this.state = 1073;
            this.match(HiveSQLParser.KW_DATA);
            this.state = 1075;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 181) {
                {
                this.state = 1074;
                this.match(HiveSQLParser.KW_LOCAL);
                }
            }

            this.state = 1077;
            this.match(HiveSQLParser.KW_INPATH);
            this.state = 1078;
            this.match(HiveSQLParser.StringLiteral);
            this.state = 1080;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 226) {
                {
                this.state = 1079;
                this.match(HiveSQLParser.KW_OVERWRITE);
                }
            }

            this.state = 1082;
            this.match(HiveSQLParser.KW_INTO);
            this.state = 1083;
            this.match(HiveSQLParser.KW_TABLE);
            this.state = 1084;
            this.tableOrPartition();
            this.state = 1086;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 155) {
                {
                this.state = 1085;
                this.inputFileFormat();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replicationClause(): ReplicationClauseContext {
        let localContext = new ReplicationClauseContext(this.context, this.state);
        this.enterRule(localContext, 16, HiveSQLParser.RULE_replicationClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1088;
            this.match(HiveSQLParser.KW_FOR);
            this.state = 1090;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 197) {
                {
                this.state = 1089;
                this.match(HiveSQLParser.KW_METADATA);
                }
            }

            this.state = 1092;
            this.match(HiveSQLParser.KW_REPLICATION);
            this.state = 1093;
            this.match(HiveSQLParser.LPAREN);
            this.state = 1094;
            this.match(HiveSQLParser.StringLiteral);
            this.state = 1095;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exportStatement(): ExportStatementContext {
        let localContext = new ExportStatementContext(this.context, this.state);
        this.enterRule(localContext, 18, HiveSQLParser.RULE_exportStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1097;
            this.match(HiveSQLParser.KW_EXPORT);
            this.state = 1098;
            this.match(HiveSQLParser.KW_TABLE);
            this.state = 1099;
            this.tableOrPartition();
            this.state = 1100;
            this.match(HiveSQLParser.KW_TO);
            this.state = 1101;
            this.match(HiveSQLParser.StringLiteral);
            this.state = 1103;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 1102;
                this.replicationClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importStatement(): ImportStatementContext {
        let localContext = new ImportStatementContext(this.context, this.state);
        this.enterRule(localContext, 20, HiveSQLParser.RULE_importStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1105;
            this.match(HiveSQLParser.KW_IMPORT);
            this.state = 1111;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118 || _la === 319) {
                {
                this.state = 1107;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 118) {
                    {
                    this.state = 1106;
                    this.match(HiveSQLParser.KW_EXTERNAL);
                    }
                }

                this.state = 1109;
                this.match(HiveSQLParser.KW_TABLE);
                this.state = 1110;
                this.tableOrPartition();
                }
            }

            this.state = 1113;
            this.match(HiveSQLParser.KW_FROM);
            this.state = 1114;
            localContext._path = this.match(HiveSQLParser.StringLiteral);
            this.state = 1116;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 182) {
                {
                this.state = 1115;
                this.tableLocation();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replDumpStatement(): ReplDumpStatementContext {
        let localContext = new ReplDumpStatementContext(this.context, this.state);
        this.enterRule(localContext, 22, HiveSQLParser.RULE_replDumpStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1118;
            this.match(HiveSQLParser.KW_REPL);
            this.state = 1119;
            this.match(HiveSQLParser.KW_DUMP);
            this.state = 1120;
            localContext._dbPolicy = this.replDbPolicy();
            this.state = 1123;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 269) {
                {
                this.state = 1121;
                this.match(HiveSQLParser.KW_REPLACE);
                this.state = 1122;
                localContext._oldDbPolicy = this.replDbPolicy();
                }
            }

            this.state = 1127;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 1125;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 1126;
                localContext._replConf = this.replConfigs();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replDbPolicy(): ReplDbPolicyContext {
        let localContext = new ReplDbPolicyContext(this.context, this.state);
        this.enterRule(localContext, 24, HiveSQLParser.RULE_replDbPolicy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1129;
            localContext._dbName = this.id_();
            this.state = 1132;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 383) {
                {
                this.state = 1130;
                this.match(HiveSQLParser.DOT);
                this.state = 1131;
                localContext._tablePolicy = this.replTableLevelPolicy();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replLoadStatement(): ReplLoadStatementContext {
        let localContext = new ReplLoadStatementContext(this.context, this.state);
        this.enterRule(localContext, 26, HiveSQLParser.RULE_replLoadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1134;
            this.match(HiveSQLParser.KW_REPL);
            this.state = 1135;
            this.match(HiveSQLParser.KW_LOAD);
            this.state = 1136;
            localContext._sourceDbPolicy = this.replDbPolicy();
            this.state = 1139;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 160) {
                {
                this.state = 1137;
                this.match(HiveSQLParser.KW_INTO);
                this.state = 1138;
                localContext._dbName = this.id_();
                }
            }

            this.state = 1143;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 1141;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 1142;
                localContext._replConf = this.replConfigs();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replConfigs(): ReplConfigsContext {
        let localContext = new ReplConfigsContext(this.context, this.state);
        this.enterRule(localContext, 28, HiveSQLParser.RULE_replConfigs);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1145;
            this.match(HiveSQLParser.LPAREN);
            this.state = 1146;
            this.replConfigsList();
            this.state = 1147;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replConfigsList(): ReplConfigsListContext {
        let localContext = new ReplConfigsListContext(this.context, this.state);
        this.enterRule(localContext, 30, HiveSQLParser.RULE_replConfigsList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1149;
            this.keyValueProperty();
            this.state = 1154;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 1150;
                this.match(HiveSQLParser.COMMA);
                this.state = 1151;
                this.keyValueProperty();
                }
                }
                this.state = 1156;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replTableLevelPolicy(): ReplTableLevelPolicyContext {
        let localContext = new ReplTableLevelPolicyContext(this.context, this.state);
        this.enterRule(localContext, 32, HiveSQLParser.RULE_replTableLevelPolicy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1157;
            localContext._replTablesIncludeList = this.match(HiveSQLParser.StringLiteral);
            this.state = 1160;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 383) {
                {
                this.state = 1158;
                this.match(HiveSQLParser.DOT);
                this.state = 1159;
                localContext._replTablesExcludeList = this.match(HiveSQLParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replStatusStatement(): ReplStatusStatementContext {
        let localContext = new ReplStatusStatementContext(this.context, this.state);
        this.enterRule(localContext, 34, HiveSQLParser.RULE_replStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1162;
            this.match(HiveSQLParser.KW_REPL);
            this.state = 1163;
            this.match(HiveSQLParser.KW_STATUS);
            this.state = 1164;
            localContext._dbName = this.id_();
            this.state = 1167;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 1165;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 1166;
                localContext._replConf = this.replConfigs();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ddlStatement(): DdlStatementContext {
        let localContext = new DdlStatementContext(this.context, this.state);
        this.enterRule(localContext, 36, HiveSQLParser.RULE_ddlStatement);
        try {
            this.state = 1214;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1169;
                this.createDatabaseStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1170;
                this.switchDatabaseStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1171;
                this.dropDatabaseStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1172;
                this.createTableStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1173;
                this.dropTableStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1174;
                this.truncateTableStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1175;
                this.alterStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1176;
                this.descStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1177;
                this.showStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1178;
                this.metastoreCheck();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1179;
                this.createViewStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1180;
                this.createMaterializedViewStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1181;
                this.createScheduledQueryStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1182;
                this.alterScheduledQueryStatement();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1183;
                this.dropScheduledQueryStatement();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1184;
                this.dropViewStatement();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1185;
                this.dropMaterializedViewStatement();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1186;
                this.createFunctionStatement();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1187;
                this.createMacroStatement();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1188;
                this.dropFunctionStatement();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1189;
                this.reloadFunctionsStatement();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1190;
                this.dropMacroStatement();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1191;
                this.analyzeStatement();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1192;
                this.lockStatement();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1193;
                this.unlockStatement();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1194;
                this.lockDatabase();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1195;
                this.unlockDatabase();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1196;
                this.createRoleStatement();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1197;
                this.dropRoleStatement();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1198;
                this.grantPrivileges();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1199;
                this.revokePrivileges();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 1200;
                this.showGrants();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 1201;
                this.showRoleGrants();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 1202;
                this.showRolePrincipals();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 1203;
                this.showRoles();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 1204;
                this.grantRole();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 1205;
                this.revokeRole();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 1206;
                this.setRole();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 1207;
                this.showCurrentRole();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 1208;
                this.abortTransactionStatement();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 1209;
                this.abortCompactionStatement();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 1210;
                this.killQueryStatement();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 1211;
                this.resourcePlanDdlStatements();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 1212;
                this.createDataConnectorStatement();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 1213;
                this.dropDataConnectorStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 38, HiveSQLParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1216;
            this.match(HiveSQLParser.KW_IF);
            this.state = 1217;
            this.match(HiveSQLParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public restrictOrCascade(): RestrictOrCascadeContext {
        let localContext = new RestrictOrCascadeContext(this.context, this.state);
        this.enterRule(localContext, 40, HiveSQLParser.RULE_restrictOrCascade);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1219;
            _la = this.tokenStream.LA(1);
            if(!(_la === 34 || _la === 273)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 42, HiveSQLParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1221;
            this.match(HiveSQLParser.KW_IF);
            this.state = 1222;
            this.match(HiveSQLParser.KW_NOT);
            this.state = 1223;
            this.match(HiveSQLParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public force(): ForceContext {
        let localContext = new ForceContext(this.context, this.state);
        this.enterRule(localContext, 44, HiveSQLParser.RULE_force);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1225;
            this.match(HiveSQLParser.KW_FORCE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rewriteEnabled(): RewriteEnabledContext {
        let localContext = new RewriteEnabledContext(this.context, this.state);
        this.enterRule(localContext, 46, HiveSQLParser.RULE_rewriteEnabled);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1227;
            this.match(HiveSQLParser.KW_ENABLE);
            this.state = 1228;
            this.match(HiveSQLParser.KW_REWRITE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rewriteDisabled(): RewriteDisabledContext {
        let localContext = new RewriteDisabledContext(this.context, this.state);
        this.enterRule(localContext, 48, HiveSQLParser.RULE_rewriteDisabled);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1230;
            this.match(HiveSQLParser.KW_DISABLE);
            this.state = 1231;
            this.match(HiveSQLParser.KW_REWRITE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storedAsDirs(): StoredAsDirsContext {
        let localContext = new StoredAsDirsContext(this.context, this.state);
        this.enterRule(localContext, 50, HiveSQLParser.RULE_storedAsDirs);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1233;
            this.match(HiveSQLParser.KW_STORED);
            this.state = 1234;
            this.match(HiveSQLParser.KW_AS);
            this.state = 1235;
            this.match(HiveSQLParser.KW_DIRECTORIES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orReplace(): OrReplaceContext {
        let localContext = new OrReplaceContext(this.context, this.state);
        this.enterRule(localContext, 52, HiveSQLParser.RULE_orReplace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1237;
            this.match(HiveSQLParser.KW_OR);
            this.state = 1238;
            this.match(HiveSQLParser.KW_REPLACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext {
        let localContext = new CreateDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 54, HiveSQLParser.RULE_createDatabaseStatement);
        let _la: number;
        try {
            this.state = 1276;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1240;
                this.match(HiveSQLParser.KW_CREATE);
                this.state = 1241;
                this.db_schema();
                this.state = 1243;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 1242;
                    this.ifNotExists();
                    }
                }

                this.state = 1245;
                localContext._name = this.id_();
                this.state = 1247;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 1246;
                    this.databaseComment();
                    }
                }

                this.state = 1250;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 1249;
                    this.dbLocation();
                    }
                }

                this.state = 1253;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 189) {
                    {
                    this.state = 1252;
                    this.dbManagedLocation();
                    }
                }

                this.state = 1258;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 376) {
                    {
                    this.state = 1255;
                    this.match(HiveSQLParser.KW_WITH);
                    this.state = 1256;
                    this.match(HiveSQLParser.KW_DBPROPERTIES);
                    this.state = 1257;
                    localContext._dbprops = this.dbProperties();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1260;
                this.match(HiveSQLParser.KW_CREATE);
                this.state = 1261;
                this.match(HiveSQLParser.KW_REMOTE);
                this.state = 1262;
                this.db_schema();
                this.state = 1264;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 1263;
                    this.ifNotExists();
                    }
                }

                this.state = 1266;
                localContext._name = this.id_();
                this.state = 1268;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 1267;
                    this.databaseComment();
                    }
                }

                this.state = 1270;
                this.dbConnectorName();
                this.state = 1274;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 376) {
                    {
                    this.state = 1271;
                    this.match(HiveSQLParser.KW_WITH);
                    this.state = 1272;
                    this.match(HiveSQLParser.KW_DBPROPERTIES);
                    this.state = 1273;
                    localContext._dbprops = this.dbProperties();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbLocation(): DbLocationContext {
        let localContext = new DbLocationContext(this.context, this.state);
        this.enterRule(localContext, 56, HiveSQLParser.RULE_dbLocation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1278;
            this.match(HiveSQLParser.KW_LOCATION);
            this.state = 1279;
            localContext._locn = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbManagedLocation(): DbManagedLocationContext {
        let localContext = new DbManagedLocationContext(this.context, this.state);
        this.enterRule(localContext, 58, HiveSQLParser.RULE_dbManagedLocation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1281;
            this.match(HiveSQLParser.KW_MANAGEDLOCATION);
            this.state = 1282;
            localContext._locn = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbProperties(): DbPropertiesContext {
        let localContext = new DbPropertiesContext(this.context, this.state);
        this.enterRule(localContext, 60, HiveSQLParser.RULE_dbProperties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1284;
            this.match(HiveSQLParser.LPAREN);
            this.state = 1285;
            this.dbPropertiesList();
            this.state = 1286;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbPropertiesList(): DbPropertiesListContext {
        let localContext = new DbPropertiesListContext(this.context, this.state);
        this.enterRule(localContext, 62, HiveSQLParser.RULE_dbPropertiesList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1288;
            this.keyValueProperty();
            this.state = 1293;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 1289;
                this.match(HiveSQLParser.COMMA);
                this.state = 1290;
                this.keyValueProperty();
                }
                }
                this.state = 1295;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbConnectorName(): DbConnectorNameContext {
        let localContext = new DbConnectorNameContext(this.context, this.state);
        this.enterRule(localContext, 64, HiveSQLParser.RULE_dbConnectorName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1296;
            this.match(HiveSQLParser.KW_USING);
            this.state = 1297;
            localContext._dcName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public switchDatabaseStatement(): SwitchDatabaseStatementContext {
        let localContext = new SwitchDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 66, HiveSQLParser.RULE_switchDatabaseStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1299;
            this.match(HiveSQLParser.KW_USE);
            this.state = 1300;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropDatabaseStatement(): DropDatabaseStatementContext {
        let localContext = new DropDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 68, HiveSQLParser.RULE_dropDatabaseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1302;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 1303;
            this.db_schema();
            this.state = 1305;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 1304;
                this.ifExists();
                }
            }

            this.state = 1307;
            this.id_();
            this.state = 1309;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 273) {
                {
                this.state = 1308;
                this.restrictOrCascade();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseComment(): DatabaseCommentContext {
        let localContext = new DatabaseCommentContext(this.context, this.state);
        this.enterRule(localContext, 70, HiveSQLParser.RULE_databaseComment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1311;
            this.match(HiveSQLParser.KW_COMMENT);
            this.state = 1312;
            localContext._comment = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateTableStatement(): TruncateTableStatementContext {
        let localContext = new TruncateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 72, HiveSQLParser.RULE_truncateTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1314;
            this.match(HiveSQLParser.KW_TRUNCATE);
            this.state = 1316;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 319) {
                {
                this.state = 1315;
                this.match(HiveSQLParser.KW_TABLE);
                }
            }

            this.state = 1318;
            this.tablePartitionPrefix();
            this.state = 1324;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 46) {
                {
                this.state = 1319;
                this.match(HiveSQLParser.KW_COLUMNS);
                this.state = 1320;
                this.match(HiveSQLParser.LPAREN);
                this.state = 1321;
                this.columnNameList();
                this.state = 1322;
                this.match(HiveSQLParser.RPAREN);
                }
            }

            this.state = 1327;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 130) {
                {
                this.state = 1326;
                this.force();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTableStatement(): DropTableStatementContext {
        let localContext = new DropTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 74, HiveSQLParser.RULE_dropTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1329;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 1330;
            this.match(HiveSQLParser.KW_TABLE);
            this.state = 1332;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 1331;
                this.ifExists();
                }
            }

            this.state = 1334;
            this.tableName();
            this.state = 1336;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 246) {
                {
                this.state = 1335;
                this.match(HiveSQLParser.KW_PURGE);
                }
            }

            this.state = 1339;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 1338;
                this.replicationClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inputFileFormat(): InputFileFormatContext {
        let localContext = new InputFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 76, HiveSQLParser.RULE_inputFileFormat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1341;
            this.match(HiveSQLParser.KW_INPUTFORMAT);
            this.state = 1342;
            localContext._inFmt = this.match(HiveSQLParser.StringLiteral);
            this.state = 1343;
            this.match(HiveSQLParser.KW_SERDE);
            this.state = 1344;
            localContext._serdeCls = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tabTypeExpr(): TabTypeExprContext {
        let localContext = new TabTypeExprContext(this.context, this.state);
        this.enterRule(localContext, 78, HiveSQLParser.RULE_tabTypeExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1346;
            this.id_();
            this.state = 1349;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 383) {
                {
                this.state = 1347;
                this.match(HiveSQLParser.DOT);
                this.state = 1348;
                this.id_();
                }
            }

            this.state = 1364;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
            case 1:
                {
                this.state = 1351;
                this.id_();
                this.state = 1361;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 383) {
                    {
                    {
                    this.state = 1352;
                    this.match(HiveSQLParser.DOT);
                    this.state = 1357;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 45, this.context) ) {
                    case 1:
                        {
                        this.state = 1353;
                        this.match(HiveSQLParser.KW_ELEM_TYPE);
                        }
                        break;
                    case 2:
                        {
                        this.state = 1354;
                        this.match(HiveSQLParser.KW_KEY_TYPE);
                        }
                        break;
                    case 3:
                        {
                        this.state = 1355;
                        this.match(HiveSQLParser.KW_VALUE_TYPE);
                        }
                        break;
                    case 4:
                        {
                        this.state = 1356;
                        this.id_();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 1363;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partTypeExpr(): PartTypeExprContext {
        let localContext = new PartTypeExprContext(this.context, this.state);
        this.enterRule(localContext, 80, HiveSQLParser.RULE_partTypeExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1366;
            this.tabTypeExpr();
            this.state = 1368;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 228) {
                {
                this.state = 1367;
                this.partitionSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tabPartColTypeExpr(): TabPartColTypeExprContext {
        let localContext = new TabPartColTypeExprContext(this.context, this.state);
        this.enterRule(localContext, 82, HiveSQLParser.RULE_tabPartColTypeExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1370;
            this.tableName();
            this.state = 1372;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 228) {
                {
                this.state = 1371;
                this.partitionSpec();
                }
            }

            this.state = 1375;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3236739107) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4152217853) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815305069) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 968573415) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750079) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 1004889323) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4138967) !== 0) || _la === 420) {
                {
                this.state = 1374;
                this.extColumnName();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descStatement(): DescStatementContext {
        let localContext = new DescStatementContext(this.context, this.state);
        this.enterRule(localContext, 84, HiveSQLParser.RULE_descStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1377;
            _la = this.tokenStream.LA(1);
            if(!(_la === 86 || _la === 87)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1400;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
            case 1:
                {
                this.state = 1378;
                this.db_schema();
                this.state = 1380;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 117) {
                    {
                    this.state = 1379;
                    this.match(HiveSQLParser.KW_EXTENDED);
                    }
                }

                this.state = 1382;
                localContext._dbName = this.id_();
                }
                break;
            case 2:
                {
                this.state = 1384;
                this.match(HiveSQLParser.KW_DATACONNECTOR);
                this.state = 1386;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 117) {
                    {
                    this.state = 1385;
                    this.match(HiveSQLParser.KW_EXTENDED);
                    }
                }

                this.state = 1388;
                localContext._dcName = this.id_();
                }
                break;
            case 3:
                {
                this.state = 1389;
                this.match(HiveSQLParser.KW_FUNCTION);
                this.state = 1391;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 117) {
                    {
                    this.state = 1390;
                    this.match(HiveSQLParser.KW_EXTENDED);
                    }
                }

                this.state = 1393;
                localContext._name = this.descFuncNames();
                }
                break;
            case 4:
                {
                this.state = 1396;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_FORMATTED:
                    {
                    this.state = 1394;
                    localContext._descOptions = this.match(HiveSQLParser.KW_FORMATTED);
                    }
                    break;
                case HiveSQLParser.KW_EXTENDED:
                    {
                    this.state = 1395;
                    localContext._descOptions = this.match(HiveSQLParser.KW_EXTENDED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1398;
                localContext._parttype = this.tabPartColTypeExpr();
                }
                break;
            case 5:
                {
                this.state = 1399;
                localContext._parttype = this.tabPartColTypeExpr();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzeStatement(): AnalyzeStatementContext {
        let localContext = new AnalyzeStatementContext(this.context, this.state);
        this.enterRule(localContext, 86, HiveSQLParser.RULE_analyzeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1402;
            this.match(HiveSQLParser.KW_ANALYZE);
            this.state = 1403;
            this.match(HiveSQLParser.KW_TABLE);
            this.state = 1404;
            localContext._parttype = this.tableOrPartition();
            this.state = 1417;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_COMPUTE:
                {
                this.state = 1405;
                this.match(HiveSQLParser.KW_COMPUTE);
                this.state = 1406;
                this.match(HiveSQLParser.KW_STATISTICS);
                this.state = 1413;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_NOSCAN:
                    {
                    this.state = 1407;
                    localContext._noscan = this.match(HiveSQLParser.KW_NOSCAN);
                    }
                    break;
                case HiveSQLParser.KW_FOR:
                    {
                    this.state = 1408;
                    this.match(HiveSQLParser.KW_FOR);
                    this.state = 1409;
                    this.match(HiveSQLParser.KW_COLUMNS);
                    this.state = 1411;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3236739107) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4152217853) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815305069) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 968573415) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750079) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 1004889323) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4138967) !== 0) || _la === 420) {
                        {
                        this.state = 1410;
                        localContext._statsColumnName = this.columnNameList();
                        }
                    }

                    }
                    break;
                case HiveSQLParser.SEMICOLON:
                    break;
                default:
                    break;
                }
                }
                break;
            case HiveSQLParser.KW_CACHE:
                {
                this.state = 1415;
                this.match(HiveSQLParser.KW_CACHE);
                this.state = 1416;
                this.match(HiveSQLParser.KW_METADATA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_in(): From_inContext {
        let localContext = new From_inContext(this.context, this.state);
        this.enterRule(localContext, 88, HiveSQLParser.RULE_from_in);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1419;
            _la = this.tokenStream.LA(1);
            if(!(_la === 134 || _la === 149)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public db_schema(): Db_schemaContext {
        let localContext = new Db_schemaContext(this.context, this.state);
        this.enterRule(localContext, 90, HiveSQLParser.RULE_db_schema);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1421;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 286)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatement(): ShowStatementContext {
        let localContext = new ShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 92, HiveSQLParser.RULE_showStatement);
        let _la: number;
        try {
            this.state = 1604;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 96, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1423;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1424;
                _la = this.tokenStream.LA(1);
                if(!(_la === 68 || _la === 287)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1427;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 1425;
                    this.match(HiveSQLParser.KW_LIKE);
                    this.state = 1426;
                    this.showStmtIdentifier();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1429;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1431;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 117) {
                    {
                    this.state = 1430;
                    localContext._isExtended = this.match(HiveSQLParser.KW_EXTENDED);
                    }
                }

                this.state = 1433;
                this.match(HiveSQLParser.KW_TABLES);
                this.state = 1437;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 134 || _la === 149) {
                    {
                    this.state = 1434;
                    this.from_in();
                    this.state = 1435;
                    localContext._db_name = this.id_();
                    }
                }

                this.state = 1440;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3236739107) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4152226045) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815305069) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 968573415) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750079) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 1004889323) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4143063) !== 0) || _la === 414 || _la === 420) {
                    {
                    this.state = 1439;
                    localContext._filter = this.showTablesFilterExpr();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1442;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1443;
                this.match(HiveSQLParser.KW_VIEWS);
                this.state = 1447;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 134 || _la === 149) {
                    {
                    this.state = 1444;
                    this.from_in();
                    this.state = 1445;
                    localContext._db_name = this.id_();
                    }
                }

                this.state = 1452;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_LIKE:
                    {
                    this.state = 1449;
                    this.match(HiveSQLParser.KW_LIKE);
                    this.state = 1450;
                    this.showStmtIdentifier();
                    }
                    break;
                case HiveSQLParser.KW_ABORT:
                case HiveSQLParser.KW_ACTIVATE:
                case HiveSQLParser.KW_ACTIVE:
                case HiveSQLParser.KW_ADD:
                case HiveSQLParser.KW_ADMIN:
                case HiveSQLParser.KW_AFTER:
                case HiveSQLParser.KW_ALLOC_FRACTION:
                case HiveSQLParser.KW_ANALYZE:
                case HiveSQLParser.KW_ARCHIVE:
                case HiveSQLParser.KW_ASC:
                case HiveSQLParser.KW_AST:
                case HiveSQLParser.KW_AT:
                case HiveSQLParser.KW_AUTOCOMMIT:
                case HiveSQLParser.KW_BATCH:
                case HiveSQLParser.KW_BEFORE:
                case HiveSQLParser.KW_BUCKET:
                case HiveSQLParser.KW_BUCKETS:
                case HiveSQLParser.KW_CACHE:
                case HiveSQLParser.KW_CASCADE:
                case HiveSQLParser.KW_CBO:
                case HiveSQLParser.KW_CHANGE:
                case HiveSQLParser.KW_CHECK:
                case HiveSQLParser.KW_CLUSTER:
                case HiveSQLParser.KW_CLUSTERED:
                case HiveSQLParser.KW_CLUSTERSTATUS:
                case HiveSQLParser.KW_COLLECTION:
                case HiveSQLParser.KW_COLUMNS:
                case HiveSQLParser.KW_COMMENT:
                case HiveSQLParser.KW_COMPACT:
                case HiveSQLParser.KW_COMPACTIONS:
                case HiveSQLParser.KW_COMPUTE:
                case HiveSQLParser.KW_CONCATENATE:
                case HiveSQLParser.KW_CONTINUE:
                case HiveSQLParser.KW_COST:
                case HiveSQLParser.KW_CRON:
                case HiveSQLParser.KW_DATA:
                case HiveSQLParser.KW_DATABASES:
                case HiveSQLParser.KW_DATETIME:
                case HiveSQLParser.KW_DAY:
                case HiveSQLParser.KW_DAYOFWEEK:
                case HiveSQLParser.KW_DBPROPERTIES:
                case HiveSQLParser.KW_DCPROPERTIES:
                case HiveSQLParser.KW_DEBUG:
                case HiveSQLParser.KW_DEFAULT:
                case HiveSQLParser.KW_DEFERRED:
                case HiveSQLParser.KW_DEFINED:
                case HiveSQLParser.KW_DELIMITED:
                case HiveSQLParser.KW_DEPENDENCY:
                case HiveSQLParser.KW_DESC:
                case HiveSQLParser.KW_DETAIL:
                case HiveSQLParser.KW_DIRECTORIES:
                case HiveSQLParser.KW_DIRECTORY:
                case HiveSQLParser.KW_DISABLE:
                case HiveSQLParser.KW_DISTRIBUTE:
                case HiveSQLParser.KW_DISTRIBUTED:
                case HiveSQLParser.KW_DO:
                case HiveSQLParser.KW_DOW:
                case HiveSQLParser.KW_DUMP:
                case HiveSQLParser.KW_ELEM_TYPE:
                case HiveSQLParser.KW_ENABLE:
                case HiveSQLParser.KW_ENFORCED:
                case HiveSQLParser.KW_ESCAPED:
                case HiveSQLParser.KW_EVERY:
                case HiveSQLParser.KW_EXCLUSIVE:
                case HiveSQLParser.KW_EXECUTE:
                case HiveSQLParser.KW_EXECUTED:
                case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
                case HiveSQLParser.KW_EXPLAIN:
                case HiveSQLParser.KW_EXPORT:
                case HiveSQLParser.KW_EXPRESSION:
                case HiveSQLParser.KW_FIELDS:
                case HiveSQLParser.KW_FILE:
                case HiveSQLParser.KW_FILEFORMAT:
                case HiveSQLParser.KW_FIRST:
                case HiveSQLParser.KW_FORMAT:
                case HiveSQLParser.KW_FORMATTED:
                case HiveSQLParser.KW_FUNCTIONS:
                case HiveSQLParser.KW_HOLD_DDLTIME:
                case HiveSQLParser.KW_HOUR:
                case HiveSQLParser.KW_IDXPROPERTIES:
                case HiveSQLParser.KW_IGNORE:
                case HiveSQLParser.KW_INDEX:
                case HiveSQLParser.KW_INDEXES:
                case HiveSQLParser.KW_INPATH:
                case HiveSQLParser.KW_INPUTDRIVER:
                case HiveSQLParser.KW_INPUTFORMAT:
                case HiveSQLParser.KW_ISOLATION:
                case HiveSQLParser.KW_ITEMS:
                case HiveSQLParser.KW_JAR:
                case HiveSQLParser.KW_JOINCOST:
                case HiveSQLParser.KW_KEY:
                case HiveSQLParser.KW_KEYS:
                case HiveSQLParser.KW_KEY_TYPE:
                case HiveSQLParser.KW_KILL:
                case HiveSQLParser.KW_LAST:
                case HiveSQLParser.KW_LEVEL:
                case HiveSQLParser.KW_LIMIT:
                case HiveSQLParser.KW_LINES:
                case HiveSQLParser.KW_LOAD:
                case HiveSQLParser.KW_LOCATION:
                case HiveSQLParser.KW_LOCK:
                case HiveSQLParser.KW_LOCKS:
                case HiveSQLParser.KW_LOGICAL:
                case HiveSQLParser.KW_LONG:
                case HiveSQLParser.KW_MANAGED:
                case HiveSQLParser.KW_MANAGEDLOCATION:
                case HiveSQLParser.KW_MANAGEMENT:
                case HiveSQLParser.KW_MAPJOIN:
                case HiveSQLParser.KW_MAPPING:
                case HiveSQLParser.KW_MATCHED:
                case HiveSQLParser.KW_MATERIALIZED:
                case HiveSQLParser.KW_METADATA:
                case HiveSQLParser.KW_MINUTE:
                case HiveSQLParser.KW_MONTH:
                case HiveSQLParser.KW_MOVE:
                case HiveSQLParser.KW_MSCK:
                case HiveSQLParser.KW_NORELY:
                case HiveSQLParser.KW_NOSCAN:
                case HiveSQLParser.KW_NOVALIDATE:
                case HiveSQLParser.KW_NO_DROP:
                case HiveSQLParser.KW_NULLS:
                case HiveSQLParser.KW_OFFLINE:
                case HiveSQLParser.KW_OFFSET:
                case HiveSQLParser.KW_OPERATOR:
                case HiveSQLParser.KW_OPTION:
                case HiveSQLParser.KW_OUTPUTDRIVER:
                case HiveSQLParser.KW_OUTPUTFORMAT:
                case HiveSQLParser.KW_OVERWRITE:
                case HiveSQLParser.KW_OWNER:
                case HiveSQLParser.KW_PARTITIONED:
                case HiveSQLParser.KW_PARTITIONS:
                case HiveSQLParser.KW_PATH:
                case HiveSQLParser.KW_PLAN:
                case HiveSQLParser.KW_PLANS:
                case HiveSQLParser.KW_PLUS:
                case HiveSQLParser.KW_POOL:
                case HiveSQLParser.KW_PRINCIPALS:
                case HiveSQLParser.KW_PROTECTION:
                case HiveSQLParser.KW_PURGE:
                case HiveSQLParser.KW_QUARTER:
                case HiveSQLParser.KW_QUERY:
                case HiveSQLParser.KW_QUERY_PARALLELISM:
                case HiveSQLParser.KW_READ:
                case HiveSQLParser.KW_READONLY:
                case HiveSQLParser.KW_REBUILD:
                case HiveSQLParser.KW_RECORDREADER:
                case HiveSQLParser.KW_RECORDWRITER:
                case HiveSQLParser.KW_RELOAD:
                case HiveSQLParser.KW_RELY:
                case HiveSQLParser.KW_REMOTE:
                case HiveSQLParser.KW_RENAME:
                case HiveSQLParser.KW_REOPTIMIZATION:
                case HiveSQLParser.KW_REPAIR:
                case HiveSQLParser.KW_REPL:
                case HiveSQLParser.KW_REPLACE:
                case HiveSQLParser.KW_REPLICATION:
                case HiveSQLParser.KW_RESOURCE:
                case HiveSQLParser.KW_RESPECT:
                case HiveSQLParser.KW_RESTRICT:
                case HiveSQLParser.KW_REWRITE:
                case HiveSQLParser.KW_ROLE:
                case HiveSQLParser.KW_ROLES:
                case HiveSQLParser.KW_SCHEDULED:
                case HiveSQLParser.KW_SCHEDULING_POLICY:
                case HiveSQLParser.KW_SCHEMA:
                case HiveSQLParser.KW_SCHEMAS:
                case HiveSQLParser.KW_SECOND:
                case HiveSQLParser.KW_SEMI:
                case HiveSQLParser.KW_SERDE:
                case HiveSQLParser.KW_SERDEPROPERTIES:
                case HiveSQLParser.KW_SERVER:
                case HiveSQLParser.KW_SETS:
                case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
                case HiveSQLParser.KW_SHARED:
                case HiveSQLParser.KW_SHOW:
                case HiveSQLParser.KW_SHOW_DATABASE:
                case HiveSQLParser.KW_SKEWED:
                case HiveSQLParser.KW_SNAPSHOT:
                case HiveSQLParser.KW_SORT:
                case HiveSQLParser.KW_SORTED:
                case HiveSQLParser.KW_SPEC:
                case HiveSQLParser.KW_SSL:
                case HiveSQLParser.KW_STATISTICS:
                case HiveSQLParser.KW_STATUS:
                case HiveSQLParser.KW_STORED:
                case HiveSQLParser.KW_STREAMTABLE:
                case HiveSQLParser.KW_STRING:
                case HiveSQLParser.KW_STRUCT:
                case HiveSQLParser.KW_SUMMARY:
                case HiveSQLParser.KW_SYSTEM_TIME:
                case HiveSQLParser.KW_SYSTEM_VERSION:
                case HiveSQLParser.KW_TABLES:
                case HiveSQLParser.KW_TBLPROPERTIES:
                case HiveSQLParser.KW_TEMPORARY:
                case HiveSQLParser.KW_TERMINATED:
                case HiveSQLParser.KW_TIMESTAMPTZ:
                case HiveSQLParser.KW_TINYINT:
                case HiveSQLParser.KW_TOUCH:
                case HiveSQLParser.KW_TRANSACTION:
                case HiveSQLParser.KW_TRANSACTIONAL:
                case HiveSQLParser.KW_TRANSACTIONS:
                case HiveSQLParser.KW_TRIM:
                case HiveSQLParser.KW_TYPE:
                case HiveSQLParser.KW_UNARCHIVE:
                case HiveSQLParser.KW_UNDO:
                case HiveSQLParser.KW_UNIONTYPE:
                case HiveSQLParser.KW_UNKNOWN:
                case HiveSQLParser.KW_UNLOCK:
                case HiveSQLParser.KW_UNMANAGED:
                case HiveSQLParser.KW_UNSET:
                case HiveSQLParser.KW_UNSIGNED:
                case HiveSQLParser.KW_URI:
                case HiveSQLParser.KW_URL:
                case HiveSQLParser.KW_USE:
                case HiveSQLParser.KW_UTC:
                case HiveSQLParser.KW_UTCTIMESTAMP:
                case HiveSQLParser.KW_VALIDATE:
                case HiveSQLParser.KW_VALUE_TYPE:
                case HiveSQLParser.KW_VECTORIZATION:
                case HiveSQLParser.KW_VIEW:
                case HiveSQLParser.KW_VIEWS:
                case HiveSQLParser.KW_WAIT:
                case HiveSQLParser.KW_WEEK:
                case HiveSQLParser.KW_WHILE:
                case HiveSQLParser.KW_WITHIN:
                case HiveSQLParser.KW_WORK:
                case HiveSQLParser.KW_WORKLOAD:
                case HiveSQLParser.KW_WRITE:
                case HiveSQLParser.KW_YEAR:
                case HiveSQLParser.KW_ZONE:
                case HiveSQLParser.StringLiteral:
                case HiveSQLParser.Identifier:
                    {
                    this.state = 1451;
                    this.showStmtIdentifier();
                    }
                    break;
                case HiveSQLParser.SEMICOLON:
                    break;
                default:
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1454;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1455;
                this.match(HiveSQLParser.KW_MATERIALIZED);
                this.state = 1456;
                this.match(HiveSQLParser.KW_VIEWS);
                this.state = 1460;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 134 || _la === 149) {
                    {
                    this.state = 1457;
                    this.from_in();
                    this.state = 1458;
                    localContext._db_name = this.id_();
                    }
                }

                this.state = 1465;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_LIKE:
                    {
                    this.state = 1462;
                    this.match(HiveSQLParser.KW_LIKE);
                    this.state = 1463;
                    this.showStmtIdentifier();
                    }
                    break;
                case HiveSQLParser.KW_ABORT:
                case HiveSQLParser.KW_ACTIVATE:
                case HiveSQLParser.KW_ACTIVE:
                case HiveSQLParser.KW_ADD:
                case HiveSQLParser.KW_ADMIN:
                case HiveSQLParser.KW_AFTER:
                case HiveSQLParser.KW_ALLOC_FRACTION:
                case HiveSQLParser.KW_ANALYZE:
                case HiveSQLParser.KW_ARCHIVE:
                case HiveSQLParser.KW_ASC:
                case HiveSQLParser.KW_AST:
                case HiveSQLParser.KW_AT:
                case HiveSQLParser.KW_AUTOCOMMIT:
                case HiveSQLParser.KW_BATCH:
                case HiveSQLParser.KW_BEFORE:
                case HiveSQLParser.KW_BUCKET:
                case HiveSQLParser.KW_BUCKETS:
                case HiveSQLParser.KW_CACHE:
                case HiveSQLParser.KW_CASCADE:
                case HiveSQLParser.KW_CBO:
                case HiveSQLParser.KW_CHANGE:
                case HiveSQLParser.KW_CHECK:
                case HiveSQLParser.KW_CLUSTER:
                case HiveSQLParser.KW_CLUSTERED:
                case HiveSQLParser.KW_CLUSTERSTATUS:
                case HiveSQLParser.KW_COLLECTION:
                case HiveSQLParser.KW_COLUMNS:
                case HiveSQLParser.KW_COMMENT:
                case HiveSQLParser.KW_COMPACT:
                case HiveSQLParser.KW_COMPACTIONS:
                case HiveSQLParser.KW_COMPUTE:
                case HiveSQLParser.KW_CONCATENATE:
                case HiveSQLParser.KW_CONTINUE:
                case HiveSQLParser.KW_COST:
                case HiveSQLParser.KW_CRON:
                case HiveSQLParser.KW_DATA:
                case HiveSQLParser.KW_DATABASES:
                case HiveSQLParser.KW_DATETIME:
                case HiveSQLParser.KW_DAY:
                case HiveSQLParser.KW_DAYOFWEEK:
                case HiveSQLParser.KW_DBPROPERTIES:
                case HiveSQLParser.KW_DCPROPERTIES:
                case HiveSQLParser.KW_DEBUG:
                case HiveSQLParser.KW_DEFAULT:
                case HiveSQLParser.KW_DEFERRED:
                case HiveSQLParser.KW_DEFINED:
                case HiveSQLParser.KW_DELIMITED:
                case HiveSQLParser.KW_DEPENDENCY:
                case HiveSQLParser.KW_DESC:
                case HiveSQLParser.KW_DETAIL:
                case HiveSQLParser.KW_DIRECTORIES:
                case HiveSQLParser.KW_DIRECTORY:
                case HiveSQLParser.KW_DISABLE:
                case HiveSQLParser.KW_DISTRIBUTE:
                case HiveSQLParser.KW_DISTRIBUTED:
                case HiveSQLParser.KW_DO:
                case HiveSQLParser.KW_DOW:
                case HiveSQLParser.KW_DUMP:
                case HiveSQLParser.KW_ELEM_TYPE:
                case HiveSQLParser.KW_ENABLE:
                case HiveSQLParser.KW_ENFORCED:
                case HiveSQLParser.KW_ESCAPED:
                case HiveSQLParser.KW_EVERY:
                case HiveSQLParser.KW_EXCLUSIVE:
                case HiveSQLParser.KW_EXECUTE:
                case HiveSQLParser.KW_EXECUTED:
                case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
                case HiveSQLParser.KW_EXPLAIN:
                case HiveSQLParser.KW_EXPORT:
                case HiveSQLParser.KW_EXPRESSION:
                case HiveSQLParser.KW_FIELDS:
                case HiveSQLParser.KW_FILE:
                case HiveSQLParser.KW_FILEFORMAT:
                case HiveSQLParser.KW_FIRST:
                case HiveSQLParser.KW_FORMAT:
                case HiveSQLParser.KW_FORMATTED:
                case HiveSQLParser.KW_FUNCTIONS:
                case HiveSQLParser.KW_HOLD_DDLTIME:
                case HiveSQLParser.KW_HOUR:
                case HiveSQLParser.KW_IDXPROPERTIES:
                case HiveSQLParser.KW_IGNORE:
                case HiveSQLParser.KW_INDEX:
                case HiveSQLParser.KW_INDEXES:
                case HiveSQLParser.KW_INPATH:
                case HiveSQLParser.KW_INPUTDRIVER:
                case HiveSQLParser.KW_INPUTFORMAT:
                case HiveSQLParser.KW_ISOLATION:
                case HiveSQLParser.KW_ITEMS:
                case HiveSQLParser.KW_JAR:
                case HiveSQLParser.KW_JOINCOST:
                case HiveSQLParser.KW_KEY:
                case HiveSQLParser.KW_KEYS:
                case HiveSQLParser.KW_KEY_TYPE:
                case HiveSQLParser.KW_KILL:
                case HiveSQLParser.KW_LAST:
                case HiveSQLParser.KW_LEVEL:
                case HiveSQLParser.KW_LIMIT:
                case HiveSQLParser.KW_LINES:
                case HiveSQLParser.KW_LOAD:
                case HiveSQLParser.KW_LOCATION:
                case HiveSQLParser.KW_LOCK:
                case HiveSQLParser.KW_LOCKS:
                case HiveSQLParser.KW_LOGICAL:
                case HiveSQLParser.KW_LONG:
                case HiveSQLParser.KW_MANAGED:
                case HiveSQLParser.KW_MANAGEDLOCATION:
                case HiveSQLParser.KW_MANAGEMENT:
                case HiveSQLParser.KW_MAPJOIN:
                case HiveSQLParser.KW_MAPPING:
                case HiveSQLParser.KW_MATCHED:
                case HiveSQLParser.KW_MATERIALIZED:
                case HiveSQLParser.KW_METADATA:
                case HiveSQLParser.KW_MINUTE:
                case HiveSQLParser.KW_MONTH:
                case HiveSQLParser.KW_MOVE:
                case HiveSQLParser.KW_MSCK:
                case HiveSQLParser.KW_NORELY:
                case HiveSQLParser.KW_NOSCAN:
                case HiveSQLParser.KW_NOVALIDATE:
                case HiveSQLParser.KW_NO_DROP:
                case HiveSQLParser.KW_NULLS:
                case HiveSQLParser.KW_OFFLINE:
                case HiveSQLParser.KW_OFFSET:
                case HiveSQLParser.KW_OPERATOR:
                case HiveSQLParser.KW_OPTION:
                case HiveSQLParser.KW_OUTPUTDRIVER:
                case HiveSQLParser.KW_OUTPUTFORMAT:
                case HiveSQLParser.KW_OVERWRITE:
                case HiveSQLParser.KW_OWNER:
                case HiveSQLParser.KW_PARTITIONED:
                case HiveSQLParser.KW_PARTITIONS:
                case HiveSQLParser.KW_PATH:
                case HiveSQLParser.KW_PLAN:
                case HiveSQLParser.KW_PLANS:
                case HiveSQLParser.KW_PLUS:
                case HiveSQLParser.KW_POOL:
                case HiveSQLParser.KW_PRINCIPALS:
                case HiveSQLParser.KW_PROTECTION:
                case HiveSQLParser.KW_PURGE:
                case HiveSQLParser.KW_QUARTER:
                case HiveSQLParser.KW_QUERY:
                case HiveSQLParser.KW_QUERY_PARALLELISM:
                case HiveSQLParser.KW_READ:
                case HiveSQLParser.KW_READONLY:
                case HiveSQLParser.KW_REBUILD:
                case HiveSQLParser.KW_RECORDREADER:
                case HiveSQLParser.KW_RECORDWRITER:
                case HiveSQLParser.KW_RELOAD:
                case HiveSQLParser.KW_RELY:
                case HiveSQLParser.KW_REMOTE:
                case HiveSQLParser.KW_RENAME:
                case HiveSQLParser.KW_REOPTIMIZATION:
                case HiveSQLParser.KW_REPAIR:
                case HiveSQLParser.KW_REPL:
                case HiveSQLParser.KW_REPLACE:
                case HiveSQLParser.KW_REPLICATION:
                case HiveSQLParser.KW_RESOURCE:
                case HiveSQLParser.KW_RESPECT:
                case HiveSQLParser.KW_RESTRICT:
                case HiveSQLParser.KW_REWRITE:
                case HiveSQLParser.KW_ROLE:
                case HiveSQLParser.KW_ROLES:
                case HiveSQLParser.KW_SCHEDULED:
                case HiveSQLParser.KW_SCHEDULING_POLICY:
                case HiveSQLParser.KW_SCHEMA:
                case HiveSQLParser.KW_SCHEMAS:
                case HiveSQLParser.KW_SECOND:
                case HiveSQLParser.KW_SEMI:
                case HiveSQLParser.KW_SERDE:
                case HiveSQLParser.KW_SERDEPROPERTIES:
                case HiveSQLParser.KW_SERVER:
                case HiveSQLParser.KW_SETS:
                case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
                case HiveSQLParser.KW_SHARED:
                case HiveSQLParser.KW_SHOW:
                case HiveSQLParser.KW_SHOW_DATABASE:
                case HiveSQLParser.KW_SKEWED:
                case HiveSQLParser.KW_SNAPSHOT:
                case HiveSQLParser.KW_SORT:
                case HiveSQLParser.KW_SORTED:
                case HiveSQLParser.KW_SPEC:
                case HiveSQLParser.KW_SSL:
                case HiveSQLParser.KW_STATISTICS:
                case HiveSQLParser.KW_STATUS:
                case HiveSQLParser.KW_STORED:
                case HiveSQLParser.KW_STREAMTABLE:
                case HiveSQLParser.KW_STRING:
                case HiveSQLParser.KW_STRUCT:
                case HiveSQLParser.KW_SUMMARY:
                case HiveSQLParser.KW_SYSTEM_TIME:
                case HiveSQLParser.KW_SYSTEM_VERSION:
                case HiveSQLParser.KW_TABLES:
                case HiveSQLParser.KW_TBLPROPERTIES:
                case HiveSQLParser.KW_TEMPORARY:
                case HiveSQLParser.KW_TERMINATED:
                case HiveSQLParser.KW_TIMESTAMPTZ:
                case HiveSQLParser.KW_TINYINT:
                case HiveSQLParser.KW_TOUCH:
                case HiveSQLParser.KW_TRANSACTION:
                case HiveSQLParser.KW_TRANSACTIONAL:
                case HiveSQLParser.KW_TRANSACTIONS:
                case HiveSQLParser.KW_TRIM:
                case HiveSQLParser.KW_TYPE:
                case HiveSQLParser.KW_UNARCHIVE:
                case HiveSQLParser.KW_UNDO:
                case HiveSQLParser.KW_UNIONTYPE:
                case HiveSQLParser.KW_UNKNOWN:
                case HiveSQLParser.KW_UNLOCK:
                case HiveSQLParser.KW_UNMANAGED:
                case HiveSQLParser.KW_UNSET:
                case HiveSQLParser.KW_UNSIGNED:
                case HiveSQLParser.KW_URI:
                case HiveSQLParser.KW_URL:
                case HiveSQLParser.KW_USE:
                case HiveSQLParser.KW_UTC:
                case HiveSQLParser.KW_UTCTIMESTAMP:
                case HiveSQLParser.KW_VALIDATE:
                case HiveSQLParser.KW_VALUE_TYPE:
                case HiveSQLParser.KW_VECTORIZATION:
                case HiveSQLParser.KW_VIEW:
                case HiveSQLParser.KW_VIEWS:
                case HiveSQLParser.KW_WAIT:
                case HiveSQLParser.KW_WEEK:
                case HiveSQLParser.KW_WHILE:
                case HiveSQLParser.KW_WITHIN:
                case HiveSQLParser.KW_WORK:
                case HiveSQLParser.KW_WORKLOAD:
                case HiveSQLParser.KW_WRITE:
                case HiveSQLParser.KW_YEAR:
                case HiveSQLParser.KW_ZONE:
                case HiveSQLParser.StringLiteral:
                case HiveSQLParser.Identifier:
                    {
                    this.state = 1464;
                    this.showStmtIdentifier();
                    }
                    break;
                case HiveSQLParser.SEMICOLON:
                    break;
                default:
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1467;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1469;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 305) {
                    {
                    this.state = 1468;
                    this.match(HiveSQLParser.KW_SORTED);
                    }
                }

                this.state = 1471;
                this.match(HiveSQLParser.KW_COLUMNS);
                this.state = 1472;
                this.from_in();
                this.state = 1473;
                this.tableName();
                this.state = 1477;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 134 || _la === 149) {
                    {
                    this.state = 1474;
                    this.from_in();
                    this.state = 1475;
                    localContext._db_name = this.id_();
                    }
                }

                this.state = 1482;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_LIKE:
                    {
                    this.state = 1479;
                    this.match(HiveSQLParser.KW_LIKE);
                    this.state = 1480;
                    this.showStmtIdentifier();
                    }
                    break;
                case HiveSQLParser.KW_ABORT:
                case HiveSQLParser.KW_ACTIVATE:
                case HiveSQLParser.KW_ACTIVE:
                case HiveSQLParser.KW_ADD:
                case HiveSQLParser.KW_ADMIN:
                case HiveSQLParser.KW_AFTER:
                case HiveSQLParser.KW_ALLOC_FRACTION:
                case HiveSQLParser.KW_ANALYZE:
                case HiveSQLParser.KW_ARCHIVE:
                case HiveSQLParser.KW_ASC:
                case HiveSQLParser.KW_AST:
                case HiveSQLParser.KW_AT:
                case HiveSQLParser.KW_AUTOCOMMIT:
                case HiveSQLParser.KW_BATCH:
                case HiveSQLParser.KW_BEFORE:
                case HiveSQLParser.KW_BUCKET:
                case HiveSQLParser.KW_BUCKETS:
                case HiveSQLParser.KW_CACHE:
                case HiveSQLParser.KW_CASCADE:
                case HiveSQLParser.KW_CBO:
                case HiveSQLParser.KW_CHANGE:
                case HiveSQLParser.KW_CHECK:
                case HiveSQLParser.KW_CLUSTER:
                case HiveSQLParser.KW_CLUSTERED:
                case HiveSQLParser.KW_CLUSTERSTATUS:
                case HiveSQLParser.KW_COLLECTION:
                case HiveSQLParser.KW_COLUMNS:
                case HiveSQLParser.KW_COMMENT:
                case HiveSQLParser.KW_COMPACT:
                case HiveSQLParser.KW_COMPACTIONS:
                case HiveSQLParser.KW_COMPUTE:
                case HiveSQLParser.KW_CONCATENATE:
                case HiveSQLParser.KW_CONTINUE:
                case HiveSQLParser.KW_COST:
                case HiveSQLParser.KW_CRON:
                case HiveSQLParser.KW_DATA:
                case HiveSQLParser.KW_DATABASES:
                case HiveSQLParser.KW_DATETIME:
                case HiveSQLParser.KW_DAY:
                case HiveSQLParser.KW_DAYOFWEEK:
                case HiveSQLParser.KW_DBPROPERTIES:
                case HiveSQLParser.KW_DCPROPERTIES:
                case HiveSQLParser.KW_DEBUG:
                case HiveSQLParser.KW_DEFAULT:
                case HiveSQLParser.KW_DEFERRED:
                case HiveSQLParser.KW_DEFINED:
                case HiveSQLParser.KW_DELIMITED:
                case HiveSQLParser.KW_DEPENDENCY:
                case HiveSQLParser.KW_DESC:
                case HiveSQLParser.KW_DETAIL:
                case HiveSQLParser.KW_DIRECTORIES:
                case HiveSQLParser.KW_DIRECTORY:
                case HiveSQLParser.KW_DISABLE:
                case HiveSQLParser.KW_DISTRIBUTE:
                case HiveSQLParser.KW_DISTRIBUTED:
                case HiveSQLParser.KW_DO:
                case HiveSQLParser.KW_DOW:
                case HiveSQLParser.KW_DUMP:
                case HiveSQLParser.KW_ELEM_TYPE:
                case HiveSQLParser.KW_ENABLE:
                case HiveSQLParser.KW_ENFORCED:
                case HiveSQLParser.KW_ESCAPED:
                case HiveSQLParser.KW_EVERY:
                case HiveSQLParser.KW_EXCLUSIVE:
                case HiveSQLParser.KW_EXECUTE:
                case HiveSQLParser.KW_EXECUTED:
                case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
                case HiveSQLParser.KW_EXPLAIN:
                case HiveSQLParser.KW_EXPORT:
                case HiveSQLParser.KW_EXPRESSION:
                case HiveSQLParser.KW_FIELDS:
                case HiveSQLParser.KW_FILE:
                case HiveSQLParser.KW_FILEFORMAT:
                case HiveSQLParser.KW_FIRST:
                case HiveSQLParser.KW_FORMAT:
                case HiveSQLParser.KW_FORMATTED:
                case HiveSQLParser.KW_FUNCTIONS:
                case HiveSQLParser.KW_HOLD_DDLTIME:
                case HiveSQLParser.KW_HOUR:
                case HiveSQLParser.KW_IDXPROPERTIES:
                case HiveSQLParser.KW_IGNORE:
                case HiveSQLParser.KW_INDEX:
                case HiveSQLParser.KW_INDEXES:
                case HiveSQLParser.KW_INPATH:
                case HiveSQLParser.KW_INPUTDRIVER:
                case HiveSQLParser.KW_INPUTFORMAT:
                case HiveSQLParser.KW_ISOLATION:
                case HiveSQLParser.KW_ITEMS:
                case HiveSQLParser.KW_JAR:
                case HiveSQLParser.KW_JOINCOST:
                case HiveSQLParser.KW_KEY:
                case HiveSQLParser.KW_KEYS:
                case HiveSQLParser.KW_KEY_TYPE:
                case HiveSQLParser.KW_KILL:
                case HiveSQLParser.KW_LAST:
                case HiveSQLParser.KW_LEVEL:
                case HiveSQLParser.KW_LIMIT:
                case HiveSQLParser.KW_LINES:
                case HiveSQLParser.KW_LOAD:
                case HiveSQLParser.KW_LOCATION:
                case HiveSQLParser.KW_LOCK:
                case HiveSQLParser.KW_LOCKS:
                case HiveSQLParser.KW_LOGICAL:
                case HiveSQLParser.KW_LONG:
                case HiveSQLParser.KW_MANAGED:
                case HiveSQLParser.KW_MANAGEDLOCATION:
                case HiveSQLParser.KW_MANAGEMENT:
                case HiveSQLParser.KW_MAPJOIN:
                case HiveSQLParser.KW_MAPPING:
                case HiveSQLParser.KW_MATCHED:
                case HiveSQLParser.KW_MATERIALIZED:
                case HiveSQLParser.KW_METADATA:
                case HiveSQLParser.KW_MINUTE:
                case HiveSQLParser.KW_MONTH:
                case HiveSQLParser.KW_MOVE:
                case HiveSQLParser.KW_MSCK:
                case HiveSQLParser.KW_NORELY:
                case HiveSQLParser.KW_NOSCAN:
                case HiveSQLParser.KW_NOVALIDATE:
                case HiveSQLParser.KW_NO_DROP:
                case HiveSQLParser.KW_NULLS:
                case HiveSQLParser.KW_OFFLINE:
                case HiveSQLParser.KW_OFFSET:
                case HiveSQLParser.KW_OPERATOR:
                case HiveSQLParser.KW_OPTION:
                case HiveSQLParser.KW_OUTPUTDRIVER:
                case HiveSQLParser.KW_OUTPUTFORMAT:
                case HiveSQLParser.KW_OVERWRITE:
                case HiveSQLParser.KW_OWNER:
                case HiveSQLParser.KW_PARTITIONED:
                case HiveSQLParser.KW_PARTITIONS:
                case HiveSQLParser.KW_PATH:
                case HiveSQLParser.KW_PLAN:
                case HiveSQLParser.KW_PLANS:
                case HiveSQLParser.KW_PLUS:
                case HiveSQLParser.KW_POOL:
                case HiveSQLParser.KW_PRINCIPALS:
                case HiveSQLParser.KW_PROTECTION:
                case HiveSQLParser.KW_PURGE:
                case HiveSQLParser.KW_QUARTER:
                case HiveSQLParser.KW_QUERY:
                case HiveSQLParser.KW_QUERY_PARALLELISM:
                case HiveSQLParser.KW_READ:
                case HiveSQLParser.KW_READONLY:
                case HiveSQLParser.KW_REBUILD:
                case HiveSQLParser.KW_RECORDREADER:
                case HiveSQLParser.KW_RECORDWRITER:
                case HiveSQLParser.KW_RELOAD:
                case HiveSQLParser.KW_RELY:
                case HiveSQLParser.KW_REMOTE:
                case HiveSQLParser.KW_RENAME:
                case HiveSQLParser.KW_REOPTIMIZATION:
                case HiveSQLParser.KW_REPAIR:
                case HiveSQLParser.KW_REPL:
                case HiveSQLParser.KW_REPLACE:
                case HiveSQLParser.KW_REPLICATION:
                case HiveSQLParser.KW_RESOURCE:
                case HiveSQLParser.KW_RESPECT:
                case HiveSQLParser.KW_RESTRICT:
                case HiveSQLParser.KW_REWRITE:
                case HiveSQLParser.KW_ROLE:
                case HiveSQLParser.KW_ROLES:
                case HiveSQLParser.KW_SCHEDULED:
                case HiveSQLParser.KW_SCHEDULING_POLICY:
                case HiveSQLParser.KW_SCHEMA:
                case HiveSQLParser.KW_SCHEMAS:
                case HiveSQLParser.KW_SECOND:
                case HiveSQLParser.KW_SEMI:
                case HiveSQLParser.KW_SERDE:
                case HiveSQLParser.KW_SERDEPROPERTIES:
                case HiveSQLParser.KW_SERVER:
                case HiveSQLParser.KW_SETS:
                case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
                case HiveSQLParser.KW_SHARED:
                case HiveSQLParser.KW_SHOW:
                case HiveSQLParser.KW_SHOW_DATABASE:
                case HiveSQLParser.KW_SKEWED:
                case HiveSQLParser.KW_SNAPSHOT:
                case HiveSQLParser.KW_SORT:
                case HiveSQLParser.KW_SORTED:
                case HiveSQLParser.KW_SPEC:
                case HiveSQLParser.KW_SSL:
                case HiveSQLParser.KW_STATISTICS:
                case HiveSQLParser.KW_STATUS:
                case HiveSQLParser.KW_STORED:
                case HiveSQLParser.KW_STREAMTABLE:
                case HiveSQLParser.KW_STRING:
                case HiveSQLParser.KW_STRUCT:
                case HiveSQLParser.KW_SUMMARY:
                case HiveSQLParser.KW_SYSTEM_TIME:
                case HiveSQLParser.KW_SYSTEM_VERSION:
                case HiveSQLParser.KW_TABLES:
                case HiveSQLParser.KW_TBLPROPERTIES:
                case HiveSQLParser.KW_TEMPORARY:
                case HiveSQLParser.KW_TERMINATED:
                case HiveSQLParser.KW_TIMESTAMPTZ:
                case HiveSQLParser.KW_TINYINT:
                case HiveSQLParser.KW_TOUCH:
                case HiveSQLParser.KW_TRANSACTION:
                case HiveSQLParser.KW_TRANSACTIONAL:
                case HiveSQLParser.KW_TRANSACTIONS:
                case HiveSQLParser.KW_TRIM:
                case HiveSQLParser.KW_TYPE:
                case HiveSQLParser.KW_UNARCHIVE:
                case HiveSQLParser.KW_UNDO:
                case HiveSQLParser.KW_UNIONTYPE:
                case HiveSQLParser.KW_UNKNOWN:
                case HiveSQLParser.KW_UNLOCK:
                case HiveSQLParser.KW_UNMANAGED:
                case HiveSQLParser.KW_UNSET:
                case HiveSQLParser.KW_UNSIGNED:
                case HiveSQLParser.KW_URI:
                case HiveSQLParser.KW_URL:
                case HiveSQLParser.KW_USE:
                case HiveSQLParser.KW_UTC:
                case HiveSQLParser.KW_UTCTIMESTAMP:
                case HiveSQLParser.KW_VALIDATE:
                case HiveSQLParser.KW_VALUE_TYPE:
                case HiveSQLParser.KW_VECTORIZATION:
                case HiveSQLParser.KW_VIEW:
                case HiveSQLParser.KW_VIEWS:
                case HiveSQLParser.KW_WAIT:
                case HiveSQLParser.KW_WEEK:
                case HiveSQLParser.KW_WHILE:
                case HiveSQLParser.KW_WITHIN:
                case HiveSQLParser.KW_WORK:
                case HiveSQLParser.KW_WORKLOAD:
                case HiveSQLParser.KW_WRITE:
                case HiveSQLParser.KW_YEAR:
                case HiveSQLParser.KW_ZONE:
                case HiveSQLParser.StringLiteral:
                case HiveSQLParser.Identifier:
                    {
                    this.state = 1481;
                    this.showStmtIdentifier();
                    }
                    break;
                case HiveSQLParser.SEMICOLON:
                    break;
                default:
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1484;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1485;
                this.match(HiveSQLParser.KW_FUNCTIONS);
                this.state = 1488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 1486;
                    this.match(HiveSQLParser.KW_LIKE);
                    this.state = 1487;
                    this.showFunctionIdentifier();
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1490;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1491;
                this.match(HiveSQLParser.KW_PARTITIONS);
                this.state = 1492;
                localContext._tabName = this.tableName();
                this.state = 1494;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 228) {
                    {
                    this.state = 1493;
                    this.partitionSpec();
                    }
                }

                this.state = 1497;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 373) {
                    {
                    this.state = 1496;
                    this.whereClause();
                    }
                }

                this.state = 1500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 1499;
                    this.orderByClause();
                    }
                }

                this.state = 1503;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 1502;
                    this.limitClause();
                    }
                }

                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1505;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1506;
                this.match(HiveSQLParser.KW_CREATE);
                this.state = 1512;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_DATABASE:
                case HiveSQLParser.KW_SCHEMA:
                    {
                    this.state = 1507;
                    this.db_schema();
                    this.state = 1508;
                    localContext._db_name = this.id_();
                    }
                    break;
                case HiveSQLParser.KW_TABLE:
                    {
                    this.state = 1510;
                    this.match(HiveSQLParser.KW_TABLE);
                    this.state = 1511;
                    localContext._tabName = this.tableName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1514;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1515;
                this.match(HiveSQLParser.KW_TABLE);
                this.state = 1516;
                this.match(HiveSQLParser.KW_EXTENDED);
                this.state = 1520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 134 || _la === 149) {
                    {
                    this.state = 1517;
                    this.from_in();
                    this.state = 1518;
                    localContext._db_name = this.id_();
                    }
                }

                this.state = 1522;
                this.match(HiveSQLParser.KW_LIKE);
                this.state = 1523;
                this.showStmtIdentifier();
                this.state = 1525;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 228) {
                    {
                    this.state = 1524;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1527;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1528;
                this.match(HiveSQLParser.KW_TBLPROPERTIES);
                this.state = 1529;
                this.tableName();
                this.state = 1533;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387) {
                    {
                    this.state = 1530;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 1531;
                    localContext._prptyName = this.match(HiveSQLParser.StringLiteral);
                    this.state = 1532;
                    this.match(HiveSQLParser.RPAREN);
                    }
                }

                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1535;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1536;
                this.match(HiveSQLParser.KW_LOCKS);
                this.state = 1548;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
                case 1:
                    {
                    this.state = 1537;
                    this.db_schema();
                    this.state = 1538;
                    localContext._dbName = this.id_();
                    this.state = 1540;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 117) {
                        {
                        this.state = 1539;
                        localContext._isExtended = this.match(HiveSQLParser.KW_EXTENDED);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 1543;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3236739107) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4152217853) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815305069) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 968573415) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750079) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 1004889323) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4138967) !== 0) || _la === 420) {
                        {
                        this.state = 1542;
                        localContext._parttype = this.partTypeExpr();
                        }
                    }

                    this.state = 1546;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 117) {
                        {
                        this.state = 1545;
                        localContext._isExtended = this.match(HiveSQLParser.KW_EXTENDED);
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1550;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1551;
                this.match(HiveSQLParser.KW_COMPACTIONS);
                this.state = 1588;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 94, this.context) ) {
                case 1:
                    {
                    this.state = 1552;
                    this.compactionId();
                    }
                    break;
                case 2:
                    {
                    this.state = 1553;
                    this.db_schema();
                    this.state = 1554;
                    localContext._dbName = this.id_();
                    this.state = 1556;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 237) {
                        {
                        this.state = 1555;
                        this.compactionPool();
                        }
                    }

                    this.state = 1559;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 342) {
                        {
                        this.state = 1558;
                        this.compactionType();
                        }
                    }

                    this.state = 1562;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 310) {
                        {
                        this.state = 1561;
                        this.compactionStatus();
                        }
                    }

                    this.state = 1565;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 220) {
                        {
                        this.state = 1564;
                        this.orderByClause();
                        }
                    }

                    this.state = 1568;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 178) {
                        {
                        this.state = 1567;
                        this.limitClause();
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.state = 1571;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
                    case 1:
                        {
                        this.state = 1570;
                        localContext._parttype = this.partTypeExpr();
                        }
                        break;
                    }
                    this.state = 1574;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 237) {
                        {
                        this.state = 1573;
                        this.compactionPool();
                        }
                    }

                    this.state = 1577;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 342) {
                        {
                        this.state = 1576;
                        this.compactionType();
                        }
                    }

                    this.state = 1580;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 310) {
                        {
                        this.state = 1579;
                        this.compactionStatus();
                        }
                    }

                    this.state = 1583;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 220) {
                        {
                        this.state = 1582;
                        this.orderByClause();
                        }
                    }

                    this.state = 1586;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 178) {
                        {
                        this.state = 1585;
                        this.limitClause();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1590;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1591;
                this.match(HiveSQLParser.KW_TRANSACTIONS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1592;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1593;
                this.match(HiveSQLParser.KW_CONF);
                this.state = 1594;
                this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1595;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1596;
                this.match(HiveSQLParser.KW_RESOURCE);
                this.state = 1600;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_PLAN:
                    {
                    this.state = 1597;
                    this.match(HiveSQLParser.KW_PLAN);
                    this.state = 1598;
                    localContext._rp_name = this.id_();
                    }
                    break;
                case HiveSQLParser.KW_PLANS:
                    {
                    this.state = 1599;
                    this.match(HiveSQLParser.KW_PLANS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1602;
                this.match(HiveSQLParser.KW_SHOW);
                this.state = 1603;
                this.match(HiveSQLParser.KW_DATACONNECTORS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showTablesFilterExpr(): ShowTablesFilterExprContext {
        let localContext = new ShowTablesFilterExprContext(this.context, this.state);
        this.enterRule(localContext, 94, HiveSQLParser.RULE_showTablesFilterExpr);
        try {
            this.state = 1614;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_WHERE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1606;
                this.match(HiveSQLParser.KW_WHERE);
                this.state = 1607;
                this.id_();
                this.state = 1608;
                this.match(HiveSQLParser.EQUAL);
                this.state = 1609;
                this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case HiveSQLParser.KW_LIKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1611;
                this.match(HiveSQLParser.KW_LIKE);
                this.state = 1612;
                this.showStmtIdentifier();
                }
                break;
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.StringLiteral:
            case HiveSQLParser.Identifier:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1613;
                this.showStmtIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockStatement(): LockStatementContext {
        let localContext = new LockStatementContext(this.context, this.state);
        this.enterRule(localContext, 96, HiveSQLParser.RULE_lockStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1616;
            this.match(HiveSQLParser.KW_LOCK);
            this.state = 1617;
            this.match(HiveSQLParser.KW_TABLE);
            this.state = 1618;
            this.tableName();
            this.state = 1620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 228) {
                {
                this.state = 1619;
                this.partitionSpec();
                }
            }

            this.state = 1622;
            this.lockMode();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockDatabase(): LockDatabaseContext {
        let localContext = new LockDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 98, HiveSQLParser.RULE_lockDatabase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1624;
            this.match(HiveSQLParser.KW_LOCK);
            this.state = 1625;
            this.db_schema();
            this.state = 1626;
            localContext._dbName = this.id_();
            this.state = 1627;
            this.lockMode();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockMode(): LockModeContext {
        let localContext = new LockModeContext(this.context, this.state);
        this.enterRule(localContext, 100, HiveSQLParser.RULE_lockMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1629;
            _la = this.tokenStream.LA(1);
            if(!(_la === 109 || _la === 297)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlockStatement(): UnlockStatementContext {
        let localContext = new UnlockStatementContext(this.context, this.state);
        this.enterRule(localContext, 102, HiveSQLParser.RULE_unlockStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1631;
            this.match(HiveSQLParser.KW_UNLOCK);
            this.state = 1632;
            this.match(HiveSQLParser.KW_TABLE);
            this.state = 1633;
            this.tableName();
            this.state = 1635;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 228) {
                {
                this.state = 1634;
                this.partitionSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlockDatabase(): UnlockDatabaseContext {
        let localContext = new UnlockDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 104, HiveSQLParser.RULE_unlockDatabase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1637;
            this.match(HiveSQLParser.KW_UNLOCK);
            this.state = 1638;
            this.db_schema();
            this.state = 1639;
            localContext._dbName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRoleStatement(): CreateRoleStatementContext {
        let localContext = new CreateRoleStatementContext(this.context, this.state);
        this.enterRule(localContext, 106, HiveSQLParser.RULE_createRoleStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1641;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 1642;
            this.match(HiveSQLParser.KW_ROLE);
            this.state = 1643;
            localContext._roleName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropRoleStatement(): DropRoleStatementContext {
        let localContext = new DropRoleStatementContext(this.context, this.state);
        this.enterRule(localContext, 108, HiveSQLParser.RULE_dropRoleStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1645;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 1646;
            this.match(HiveSQLParser.KW_ROLE);
            this.state = 1647;
            localContext._roleName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantPrivileges(): GrantPrivilegesContext {
        let localContext = new GrantPrivilegesContext(this.context, this.state);
        this.enterRule(localContext, 110, HiveSQLParser.RULE_grantPrivileges);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1649;
            this.match(HiveSQLParser.KW_GRANT);
            this.state = 1650;
            localContext._privList = this.privilegeList();
            this.state = 1652;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215) {
                {
                this.state = 1651;
                this.privilegeObject();
                }
            }

            this.state = 1654;
            this.match(HiveSQLParser.KW_TO);
            this.state = 1655;
            this.principalSpecification();
            this.state = 1657;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 1656;
                this.withGrantOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokePrivileges(): RevokePrivilegesContext {
        let localContext = new RevokePrivilegesContext(this.context, this.state);
        this.enterRule(localContext, 112, HiveSQLParser.RULE_revokePrivileges);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1659;
            this.match(HiveSQLParser.KW_REVOKE);
            this.state = 1661;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 138) {
                {
                this.state = 1660;
                this.grantOptionFor();
                }
            }

            this.state = 1663;
            this.privilegeList();
            this.state = 1665;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215) {
                {
                this.state = 1664;
                this.privilegeObject();
                }
            }

            this.state = 1667;
            this.match(HiveSQLParser.KW_FROM);
            this.state = 1668;
            this.principalSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantRole(): GrantRoleContext {
        let localContext = new GrantRoleContext(this.context, this.state);
        this.enterRule(localContext, 114, HiveSQLParser.RULE_grantRole);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1670;
            this.match(HiveSQLParser.KW_GRANT);
            this.state = 1672;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 104, this.context) ) {
            case 1:
                {
                this.state = 1671;
                this.match(HiveSQLParser.KW_ROLE);
                }
                break;
            }
            this.state = 1674;
            this.id_();
            this.state = 1679;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 1675;
                this.match(HiveSQLParser.COMMA);
                this.state = 1676;
                this.id_();
                }
                }
                this.state = 1681;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1682;
            this.match(HiveSQLParser.KW_TO);
            this.state = 1683;
            this.principalSpecification();
            this.state = 1685;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 1684;
                this.withAdminOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeRole(): RevokeRoleContext {
        let localContext = new RevokeRoleContext(this.context, this.state);
        this.enterRule(localContext, 116, HiveSQLParser.RULE_revokeRole);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1687;
            this.match(HiveSQLParser.KW_REVOKE);
            this.state = 1689;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 107, this.context) ) {
            case 1:
                {
                this.state = 1688;
                this.adminOptionFor();
                }
                break;
            }
            this.state = 1692;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 108, this.context) ) {
            case 1:
                {
                this.state = 1691;
                this.match(HiveSQLParser.KW_ROLE);
                }
                break;
            }
            this.state = 1694;
            this.id_();
            this.state = 1699;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 1695;
                this.match(HiveSQLParser.COMMA);
                this.state = 1696;
                this.id_();
                }
                }
                this.state = 1701;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1702;
            this.match(HiveSQLParser.KW_FROM);
            this.state = 1703;
            this.principalSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRoleGrants(): ShowRoleGrantsContext {
        let localContext = new ShowRoleGrantsContext(this.context, this.state);
        this.enterRule(localContext, 118, HiveSQLParser.RULE_showRoleGrants);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1705;
            this.match(HiveSQLParser.KW_SHOW);
            this.state = 1706;
            this.match(HiveSQLParser.KW_ROLE);
            this.state = 1707;
            this.match(HiveSQLParser.KW_GRANT);
            this.state = 1708;
            this.principalName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRoles(): ShowRolesContext {
        let localContext = new ShowRolesContext(this.context, this.state);
        this.enterRule(localContext, 120, HiveSQLParser.RULE_showRoles);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1710;
            this.match(HiveSQLParser.KW_SHOW);
            this.state = 1711;
            this.match(HiveSQLParser.KW_ROLES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCurrentRole(): ShowCurrentRoleContext {
        let localContext = new ShowCurrentRoleContext(this.context, this.state);
        this.enterRule(localContext, 122, HiveSQLParser.RULE_showCurrentRole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1713;
            this.match(HiveSQLParser.KW_SHOW);
            this.state = 1714;
            this.match(HiveSQLParser.KW_CURRENT);
            this.state = 1715;
            this.match(HiveSQLParser.KW_ROLES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setRole(): SetRoleContext {
        let localContext = new SetRoleContext(this.context, this.state);
        this.enterRule(localContext, 124, HiveSQLParser.RULE_setRole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1717;
            this.match(HiveSQLParser.KW_SET);
            this.state = 1718;
            this.match(HiveSQLParser.KW_ROLE);
            this.state = 1722;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ALL:
                {
                this.state = 1719;
                localContext._all = this.match(HiveSQLParser.KW_ALL);
                }
                break;
            case HiveSQLParser.KW_NONE:
                {
                this.state = 1720;
                localContext._none = this.match(HiveSQLParser.KW_NONE);
                }
                break;
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.Identifier:
                {
                this.state = 1721;
                this.id_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showGrants(): ShowGrantsContext {
        let localContext = new ShowGrantsContext(this.context, this.state);
        this.enterRule(localContext, 126, HiveSQLParser.RULE_showGrants);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1724;
            this.match(HiveSQLParser.KW_SHOW);
            this.state = 1725;
            this.match(HiveSQLParser.KW_GRANT);
            this.state = 1727;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 139 || _la === 278 || _la === 359) {
                {
                this.state = 1726;
                this.principalName();
                }
            }

            this.state = 1731;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215) {
                {
                this.state = 1729;
                this.match(HiveSQLParser.KW_ON);
                this.state = 1730;
                this.privilegeIncludeColObject();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRolePrincipals(): ShowRolePrincipalsContext {
        let localContext = new ShowRolePrincipalsContext(this.context, this.state);
        this.enterRule(localContext, 128, HiveSQLParser.RULE_showRolePrincipals);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1733;
            this.match(HiveSQLParser.KW_SHOW);
            this.state = 1734;
            this.match(HiveSQLParser.KW_PRINCIPALS);
            this.state = 1735;
            localContext._roleName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeIncludeColObject(): PrivilegeIncludeColObjectContext {
        let localContext = new PrivilegeIncludeColObjectContext(this.context, this.state);
        this.enterRule(localContext, 130, HiveSQLParser.RULE_privilegeIncludeColObject);
        try {
            this.state = 1739;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1737;
                this.match(HiveSQLParser.KW_ALL);
                }
                break;
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASE:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLE:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.Identifier:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1738;
                this.privObjectCols();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeObject(): PrivilegeObjectContext {
        let localContext = new PrivilegeObjectContext(this.context, this.state);
        this.enterRule(localContext, 132, HiveSQLParser.RULE_privilegeObject);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1741;
            this.match(HiveSQLParser.KW_ON);
            this.state = 1742;
            this.privObject();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privObject(): PrivObjectContext {
        let localContext = new PrivObjectContext(this.context, this.state);
        this.enterRule(localContext, 134, HiveSQLParser.RULE_privObject);
        let _la: number;
        try {
            this.state = 1758;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 116, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1744;
                this.db_schema();
                this.state = 1745;
                this.id_();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1748;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319) {
                    {
                    this.state = 1747;
                    this.match(HiveSQLParser.KW_TABLE);
                    }
                }

                this.state = 1750;
                this.tableName();
                this.state = 1752;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 228) {
                    {
                    this.state = 1751;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1754;
                this.match(HiveSQLParser.KW_URI);
                this.state = 1755;
                localContext._path = this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1756;
                this.match(HiveSQLParser.KW_SERVER);
                this.state = 1757;
                this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privObjectCols(): PrivObjectColsContext {
        let localContext = new PrivObjectColsContext(this.context, this.state);
        this.enterRule(localContext, 136, HiveSQLParser.RULE_privObjectCols);
        let _la: number;
        try {
            this.state = 1780;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1760;
                this.db_schema();
                this.state = 1761;
                this.id_();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1764;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319) {
                    {
                    this.state = 1763;
                    this.match(HiveSQLParser.KW_TABLE);
                    }
                }

                this.state = 1766;
                this.tableName();
                this.state = 1771;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387) {
                    {
                    this.state = 1767;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 1768;
                    localContext._cols = this.columnNameList();
                    this.state = 1769;
                    this.match(HiveSQLParser.RPAREN);
                    }
                }

                this.state = 1774;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 228) {
                    {
                    this.state = 1773;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1776;
                this.match(HiveSQLParser.KW_URI);
                this.state = 1777;
                localContext._path = this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1778;
                this.match(HiveSQLParser.KW_SERVER);
                this.state = 1779;
                this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeList(): PrivilegeListContext {
        let localContext = new PrivilegeListContext(this.context, this.state);
        this.enterRule(localContext, 138, HiveSQLParser.RULE_privilegeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1782;
            this.privlegeDef();
            this.state = 1787;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 1783;
                this.match(HiveSQLParser.COMMA);
                this.state = 1784;
                this.privlegeDef();
                }
                }
                this.state = 1789;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privlegeDef(): PrivlegeDefContext {
        let localContext = new PrivlegeDefContext(this.context, this.state);
        this.enterRule(localContext, 140, HiveSQLParser.RULE_privlegeDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1790;
            this.privilegeType();
            this.state = 1795;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 1791;
                this.match(HiveSQLParser.LPAREN);
                this.state = 1792;
                localContext._cols = this.columnNameList();
                this.state = 1793;
                this.match(HiveSQLParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeType(): PrivilegeTypeContext {
        let localContext = new PrivilegeTypeContext(this.context, this.state);
        this.enterRule(localContext, 142, HiveSQLParser.RULE_privilegeType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1797;
            _la = this.tokenStream.LA(1);
            if(!(_la === 7 || _la === 9 || _la === 58 || _la === 83 || _la === 98 || _la === 156 || _la === 183 || _la === 289 || _la === 299 || _la === 355)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        let localContext = new PrincipalSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 144, HiveSQLParser.RULE_principalSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1799;
            this.principalName();
            this.state = 1804;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 1800;
                this.match(HiveSQLParser.COMMA);
                this.state = 1801;
                this.principalName();
                }
                }
                this.state = 1806;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalName(): PrincipalNameContext {
        let localContext = new PrincipalNameContext(this.context, this.state);
        this.enterRule(localContext, 146, HiveSQLParser.RULE_principalName);
        try {
            this.state = 1813;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_USER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1807;
                this.match(HiveSQLParser.KW_USER);
                this.state = 1808;
                this.principalIdentifier();
                }
                break;
            case HiveSQLParser.KW_GROUP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1809;
                this.match(HiveSQLParser.KW_GROUP);
                this.state = 1810;
                this.principalIdentifier();
                }
                break;
            case HiveSQLParser.KW_ROLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1811;
                this.match(HiveSQLParser.KW_ROLE);
                this.state = 1812;
                this.id_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withGrantOption(): WithGrantOptionContext {
        let localContext = new WithGrantOptionContext(this.context, this.state);
        this.enterRule(localContext, 148, HiveSQLParser.RULE_withGrantOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1815;
            this.match(HiveSQLParser.KW_WITH);
            this.state = 1816;
            this.match(HiveSQLParser.KW_GRANT);
            this.state = 1817;
            this.match(HiveSQLParser.KW_OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantOptionFor(): GrantOptionForContext {
        let localContext = new GrantOptionForContext(this.context, this.state);
        this.enterRule(localContext, 150, HiveSQLParser.RULE_grantOptionFor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1819;
            this.match(HiveSQLParser.KW_GRANT);
            this.state = 1820;
            this.match(HiveSQLParser.KW_OPTION);
            this.state = 1821;
            this.match(HiveSQLParser.KW_FOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public adminOptionFor(): AdminOptionForContext {
        let localContext = new AdminOptionForContext(this.context, this.state);
        this.enterRule(localContext, 152, HiveSQLParser.RULE_adminOptionFor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1823;
            this.match(HiveSQLParser.KW_ADMIN);
            this.state = 1824;
            this.match(HiveSQLParser.KW_OPTION);
            this.state = 1825;
            this.match(HiveSQLParser.KW_FOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withAdminOption(): WithAdminOptionContext {
        let localContext = new WithAdminOptionContext(this.context, this.state);
        this.enterRule(localContext, 154, HiveSQLParser.RULE_withAdminOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1827;
            this.match(HiveSQLParser.KW_WITH);
            this.state = 1828;
            this.match(HiveSQLParser.KW_ADMIN);
            this.state = 1829;
            this.match(HiveSQLParser.KW_OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public metastoreCheck(): MetastoreCheckContext {
        let localContext = new MetastoreCheckContext(this.context, this.state);
        this.enterRule(localContext, 156, HiveSQLParser.RULE_metastoreCheck);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1831;
            this.match(HiveSQLParser.KW_MSCK);
            this.state = 1833;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 267) {
                {
                this.state = 1832;
                localContext._repair = this.match(HiveSQLParser.KW_REPAIR);
                }
            }

            {
            this.state = 1835;
            this.match(HiveSQLParser.KW_TABLE);
            this.state = 1836;
            this.tableName();
            this.state = 1842;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 4 || _la === 98 || _la === 316) {
                {
                this.state = 1837;
                localContext._opt = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 4 || _la === 98 || _la === 316)) {
                    localContext._opt = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1838;
                localContext._parts = this.match(HiveSQLParser.KW_PARTITIONS);
                this.state = 1840;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387) {
                    {
                    this.state = 1839;
                    this.partitionSelectorSpec();
                    }
                }

                }
            }

            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceList(): ResourceListContext {
        let localContext = new ResourceListContext(this.context, this.state);
        this.enterRule(localContext, 158, HiveSQLParser.RULE_resourceList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1844;
            this.resource();
            this.state = 1849;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 1845;
                this.match(HiveSQLParser.COMMA);
                this.state = 1846;
                this.resource();
                }
                }
                this.state = 1851;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resource(): ResourceContext {
        let localContext = new ResourceContext(this.context, this.state);
        this.enterRule(localContext, 160, HiveSQLParser.RULE_resource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1852;
            localContext._resType = this.resourceType();
            this.state = 1853;
            localContext._resPath = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceType(): ResourceTypeContext {
        let localContext = new ResourceTypeContext(this.context, this.state);
        this.enterRule(localContext, 162, HiveSQLParser.RULE_resourceType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1855;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 123 || _la === 164)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFunctionStatement(): CreateFunctionStatementContext {
        let localContext = new CreateFunctionStatementContext(this.context, this.state);
        this.enterRule(localContext, 164, HiveSQLParser.RULE_createFunctionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1857;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 1859;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 323) {
                {
                this.state = 1858;
                localContext._temp = this.match(HiveSQLParser.KW_TEMPORARY);
                }
            }

            this.state = 1861;
            this.match(HiveSQLParser.KW_FUNCTION);
            this.state = 1862;
            this.functionIdentifier();
            this.state = 1863;
            this.match(HiveSQLParser.KW_AS);
            this.state = 1864;
            this.match(HiveSQLParser.StringLiteral);
            this.state = 1867;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 360) {
                {
                this.state = 1865;
                this.match(HiveSQLParser.KW_USING);
                this.state = 1866;
                localContext._rList = this.resourceList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropFunctionStatement(): DropFunctionStatementContext {
        let localContext = new DropFunctionStatementContext(this.context, this.state);
        this.enterRule(localContext, 166, HiveSQLParser.RULE_dropFunctionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1869;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 1871;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 323) {
                {
                this.state = 1870;
                localContext._temp = this.match(HiveSQLParser.KW_TEMPORARY);
                }
            }

            this.state = 1873;
            this.match(HiveSQLParser.KW_FUNCTION);
            this.state = 1875;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 1874;
                this.ifExists();
                }
            }

            this.state = 1877;
            this.functionIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloadFunctionsStatement(): ReloadFunctionsStatementContext {
        let localContext = new ReloadFunctionsStatementContext(this.context, this.state);
        this.enterRule(localContext, 168, HiveSQLParser.RULE_reloadFunctionsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1879;
            this.match(HiveSQLParser.KW_RELOAD);
            this.state = 1880;
            _la = this.tokenStream.LA(1);
            if(!(_la === 136 || _la === 137)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMacroStatement(): CreateMacroStatementContext {
        let localContext = new CreateMacroStatementContext(this.context, this.state);
        this.enterRule(localContext, 170, HiveSQLParser.RULE_createMacroStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1882;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 1883;
            this.match(HiveSQLParser.KW_TEMPORARY);
            this.state = 1884;
            this.match(HiveSQLParser.KW_MACRO);
            this.state = 1885;
            this.match(HiveSQLParser.Identifier);
            this.state = 1886;
            this.match(HiveSQLParser.LPAREN);
            this.state = 1888;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3236739107) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4152217853) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815305069) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 968573415) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750079) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 1004889323) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4138967) !== 0) || _la === 420) {
                {
                this.state = 1887;
                this.columnNameTypeList();
                }
            }

            this.state = 1890;
            this.match(HiveSQLParser.RPAREN);
            this.state = 1891;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropMacroStatement(): DropMacroStatementContext {
        let localContext = new DropMacroStatementContext(this.context, this.state);
        this.enterRule(localContext, 172, HiveSQLParser.RULE_dropMacroStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1893;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 1894;
            this.match(HiveSQLParser.KW_TEMPORARY);
            this.state = 1895;
            this.match(HiveSQLParser.KW_MACRO);
            this.state = 1897;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 1896;
                this.ifExists();
                }
            }

            this.state = 1899;
            this.match(HiveSQLParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createViewStatement(): CreateViewStatementContext {
        let localContext = new CreateViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 174, HiveSQLParser.RULE_createViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1901;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 1903;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 219) {
                {
                this.state = 1902;
                this.orReplace();
                }
            }

            this.state = 1905;
            this.match(HiveSQLParser.KW_VIEW);
            this.state = 1907;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 1906;
                this.ifNotExists();
                }
            }

            this.state = 1909;
            localContext._name = this.tableName();
            this.state = 1914;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 1910;
                this.match(HiveSQLParser.LPAREN);
                this.state = 1911;
                this.columnNameCommentList();
                this.state = 1912;
                this.match(HiveSQLParser.RPAREN);
                }
            }

            this.state = 1917;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 1916;
                this.tableComment();
                }
            }

            this.state = 1920;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 229) {
                {
                this.state = 1919;
                this.viewPartition();
                }
            }

            this.state = 1923;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 322) {
                {
                this.state = 1922;
                this.tablePropertiesPrefixed();
                }
            }

            this.state = 1925;
            this.match(HiveSQLParser.KW_AS);
            this.state = 1926;
            this.selectStatementWithCTE();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewPartition(): ViewPartitionContext {
        let localContext = new ViewPartitionContext(this.context, this.state);
        this.enterRule(localContext, 176, HiveSQLParser.RULE_viewPartition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1928;
            this.match(HiveSQLParser.KW_PARTITIONED);
            this.state = 1929;
            this.match(HiveSQLParser.KW_ON);
            this.state = 1935;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.LPAREN:
                {
                this.state = 1930;
                this.match(HiveSQLParser.LPAREN);
                this.state = 1931;
                this.columnNameList();
                }
                break;
            case HiveSQLParser.KW_SPEC:
                {
                this.state = 1932;
                this.match(HiveSQLParser.KW_SPEC);
                this.state = 1933;
                this.match(HiveSQLParser.LPAREN);
                this.state = 1934;
                localContext._spec = this.partitionTransformSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1937;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewOrganization(): ViewOrganizationContext {
        let localContext = new ViewOrganizationContext(this.context, this.state);
        this.enterRule(localContext, 178, HiveSQLParser.RULE_viewOrganization);
        try {
            this.state = 1941;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_CLUSTERED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1939;
                this.viewClusterSpec();
                }
                break;
            case HiveSQLParser.KW_DISTRIBUTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1940;
                this.viewComplexSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewClusterSpec(): ViewClusterSpecContext {
        let localContext = new ViewClusterSpecContext(this.context, this.state);
        this.enterRule(localContext, 180, HiveSQLParser.RULE_viewClusterSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1943;
            this.match(HiveSQLParser.KW_CLUSTERED);
            this.state = 1944;
            this.match(HiveSQLParser.KW_ON);
            this.state = 1945;
            this.match(HiveSQLParser.LPAREN);
            this.state = 1946;
            this.columnNameList();
            this.state = 1947;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewComplexSpec(): ViewComplexSpecContext {
        let localContext = new ViewComplexSpecContext(this.context, this.state);
        this.enterRule(localContext, 182, HiveSQLParser.RULE_viewComplexSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1949;
            this.viewDistSpec();
            this.state = 1950;
            this.viewSortSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewDistSpec(): ViewDistSpecContext {
        let localContext = new ViewDistSpecContext(this.context, this.state);
        this.enterRule(localContext, 184, HiveSQLParser.RULE_viewDistSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1952;
            this.match(HiveSQLParser.KW_DISTRIBUTED);
            this.state = 1953;
            this.match(HiveSQLParser.KW_ON);
            this.state = 1954;
            this.match(HiveSQLParser.LPAREN);
            this.state = 1955;
            localContext._colList = this.columnNameList();
            this.state = 1956;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewSortSpec(): ViewSortSpecContext {
        let localContext = new ViewSortSpecContext(this.context, this.state);
        this.enterRule(localContext, 186, HiveSQLParser.RULE_viewSortSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1958;
            this.match(HiveSQLParser.KW_SORTED);
            this.state = 1959;
            this.match(HiveSQLParser.KW_ON);
            this.state = 1960;
            this.match(HiveSQLParser.LPAREN);
            this.state = 1961;
            localContext._colList = this.columnNameList();
            this.state = 1962;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropViewStatement(): DropViewStatementContext {
        let localContext = new DropViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 188, HiveSQLParser.RULE_dropViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1964;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 1965;
            this.match(HiveSQLParser.KW_VIEW);
            this.state = 1967;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 1966;
                this.ifExists();
                }
            }

            this.state = 1969;
            this.viewName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
        let localContext = new CreateMaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 190, HiveSQLParser.RULE_createMaterializedViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1971;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 1972;
            this.match(HiveSQLParser.KW_MATERIALIZED);
            this.state = 1973;
            this.match(HiveSQLParser.KW_VIEW);
            this.state = 1975;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 1974;
                this.ifNotExists();
                }
            }

            this.state = 1977;
            localContext._name = this.tableName();
            this.state = 1979;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 91) {
                {
                this.state = 1978;
                this.rewriteDisabled();
                }
            }

            this.state = 1982;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 1981;
                this.tableComment();
                }
            }

            this.state = 1985;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 229) {
                {
                this.state = 1984;
                this.viewPartition();
                }
            }

            this.state = 1988;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42 || _la === 94) {
                {
                this.state = 1987;
                this.viewOrganization();
                }
            }

            this.state = 1991;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 282) {
                {
                this.state = 1990;
                this.tableRowFormat();
                }
            }

            this.state = 1994;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 311) {
                {
                this.state = 1993;
                this.tableFileFormat();
                }
            }

            this.state = 1997;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 182) {
                {
                this.state = 1996;
                this.tableLocation();
                }
            }

            this.state = 2000;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 322) {
                {
                this.state = 1999;
                this.tablePropertiesPrefixed();
                }
            }

            this.state = 2002;
            this.match(HiveSQLParser.KW_AS);
            this.state = 2003;
            this.selectStatementWithCTE();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropMaterializedViewStatement(): DropMaterializedViewStatementContext {
        let localContext = new DropMaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 192, HiveSQLParser.RULE_dropMaterializedViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2005;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 2006;
            this.match(HiveSQLParser.KW_MATERIALIZED);
            this.state = 2007;
            this.match(HiveSQLParser.KW_VIEW);
            this.state = 2009;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 2008;
                this.ifExists();
                }
            }

            this.state = 2011;
            this.viewName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createScheduledQueryStatement(): CreateScheduledQueryStatementContext {
        let localContext = new CreateScheduledQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 194, HiveSQLParser.RULE_createScheduledQueryStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2013;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 2014;
            this.match(HiveSQLParser.KW_SCHEDULED);
            this.state = 2015;
            this.match(HiveSQLParser.KW_QUERY);
            this.state = 2016;
            localContext._name = this.id_();
            this.state = 2017;
            this.scheduleSpec();
            this.state = 2019;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 111) {
                {
                this.state = 2018;
                this.executedAsSpec();
                }
            }

            this.state = 2022;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 91 || _la === 102) {
                {
                this.state = 2021;
                this.enableSpecification();
                }
            }

            this.state = 2024;
            this.definedAsSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropScheduledQueryStatement(): DropScheduledQueryStatementContext {
        let localContext = new DropScheduledQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 196, HiveSQLParser.RULE_dropScheduledQueryStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2026;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 2027;
            this.match(HiveSQLParser.KW_SCHEDULED);
            this.state = 2028;
            this.match(HiveSQLParser.KW_QUERY);
            this.state = 2029;
            localContext._name = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterScheduledQueryStatement(): AlterScheduledQueryStatementContext {
        let localContext = new AlterScheduledQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 198, HiveSQLParser.RULE_alterScheduledQueryStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2031;
            this.match(HiveSQLParser.KW_ALTER);
            this.state = 2032;
            this.match(HiveSQLParser.KW_SCHEDULED);
            this.state = 2033;
            this.match(HiveSQLParser.KW_QUERY);
            this.state = 2034;
            localContext._name = this.id_();
            this.state = 2035;
            localContext._mod = this.alterScheduledQueryChange();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterScheduledQueryChange(): AlterScheduledQueryChangeContext {
        let localContext = new AlterScheduledQueryChangeContext(this.context, this.state);
        this.enterRule(localContext, 200, HiveSQLParser.RULE_alterScheduledQueryChange);
        try {
            this.state = 2042;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_EVERY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2037;
                this.scheduleSpec();
                }
                break;
            case HiveSQLParser.KW_EXECUTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2038;
                this.executedAsSpec();
                }
                break;
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_ENABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2039;
                this.enableSpecification();
                }
                break;
            case HiveSQLParser.KW_AS:
            case HiveSQLParser.KW_DEFINED:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2040;
                this.definedAsSpec();
                }
                break;
            case HiveSQLParser.KW_EXECUTE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2041;
                this.match(HiveSQLParser.KW_EXECUTE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scheduleSpec(): ScheduleSpecContext {
        let localContext = new ScheduleSpecContext(this.context, this.state);
        this.enterRule(localContext, 202, HiveSQLParser.RULE_scheduleSpec);
        let _la: number;
        try {
            this.state = 2059;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_CRON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2044;
                this.match(HiveSQLParser.KW_CRON);
                this.state = 2045;
                localContext._cronString = this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case HiveSQLParser.KW_EVERY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2046;
                this.match(HiveSQLParser.KW_EVERY);
                this.state = 2048;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 419) {
                    {
                    this.state = 2047;
                    localContext._value = this.match(HiveSQLParser.Number);
                    }
                }

                this.state = 2050;
                localContext._qualifier = this.intervalQualifiers();
                this.state = 2057;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20 || _la === 214) {
                    {
                    this.state = 2054;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case HiveSQLParser.KW_AT:
                        {
                        this.state = 2051;
                        this.match(HiveSQLParser.KW_AT);
                        }
                        break;
                    case HiveSQLParser.KW_OFFSET:
                        {
                        this.state = 2052;
                        this.match(HiveSQLParser.KW_OFFSET);
                        this.state = 2053;
                        this.match(HiveSQLParser.KW_BY);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2056;
                    localContext._offsetTs = this.match(HiveSQLParser.StringLiteral);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executedAsSpec(): ExecutedAsSpecContext {
        let localContext = new ExecutedAsSpecContext(this.context, this.state);
        this.enterRule(localContext, 204, HiveSQLParser.RULE_executedAsSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2061;
            this.match(HiveSQLParser.KW_EXECUTED);
            this.state = 2062;
            this.match(HiveSQLParser.KW_AS);
            this.state = 2063;
            localContext._executedAs = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definedAsSpec(): DefinedAsSpecContext {
        let localContext = new DefinedAsSpecContext(this.context, this.state);
        this.enterRule(localContext, 206, HiveSQLParser.RULE_definedAsSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2066;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 2065;
                this.match(HiveSQLParser.KW_DEFINED);
                }
            }

            this.state = 2068;
            this.match(HiveSQLParser.KW_AS);
            this.state = 2069;
            this.statement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showFunctionIdentifier(): ShowFunctionIdentifierContext {
        let localContext = new ShowFunctionIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 208, HiveSQLParser.RULE_showFunctionIdentifier);
        try {
            this.state = 2073;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2071;
                this.functionIdentifier();
                }
                break;
            case HiveSQLParser.StringLiteral:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2072;
                this.match(HiveSQLParser.StringLiteral);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStmtIdentifier(): ShowStmtIdentifierContext {
        let localContext = new ShowStmtIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 210, HiveSQLParser.RULE_showStmtIdentifier);
        try {
            this.state = 2077;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2075;
                this.id_();
                }
                break;
            case HiveSQLParser.StringLiteral:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2076;
                this.match(HiveSQLParser.StringLiteral);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableComment(): TableCommentContext {
        let localContext = new TableCommentContext(this.context, this.state);
        this.enterRule(localContext, 212, HiveSQLParser.RULE_tableComment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2079;
            this.match(HiveSQLParser.KW_COMMENT);
            this.state = 2080;
            localContext._comment = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableUsing(): TableUsingContext {
        let localContext = new TableUsingContext(this.context, this.state);
        this.enterRule(localContext, 214, HiveSQLParser.RULE_tableUsing);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2082;
            this.match(HiveSQLParser.KW_USING);
            this.state = 2086;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 414) {
                {
                {
                this.state = 2083;
                this.match(HiveSQLParser.StringLiteral);
                }
                }
                this.state = 2088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTablePartitionSpec(): CreateTablePartitionSpecContext {
        let localContext = new CreateTablePartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 216, HiveSQLParser.RULE_createTablePartitionSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2089;
            this.match(HiveSQLParser.KW_PARTITIONED);
            this.state = 2090;
            this.match(HiveSQLParser.KW_BY);
            this.state = 2099;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.LPAREN:
                {
                this.state = 2091;
                this.match(HiveSQLParser.LPAREN);
                this.state = 2094;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 165, this.context) ) {
                case 1:
                    {
                    this.state = 2092;
                    localContext._opt1 = this.createTablePartitionColumnTypeSpec();
                    }
                    break;
                case 2:
                    {
                    this.state = 2093;
                    localContext._opt2 = this.createTablePartitionColumnSpec();
                    }
                    break;
                }
                }
                break;
            case HiveSQLParser.KW_SPEC:
                {
                this.state = 2096;
                this.match(HiveSQLParser.KW_SPEC);
                this.state = 2097;
                this.match(HiveSQLParser.LPAREN);
                this.state = 2098;
                localContext._spec = this.partitionTransformSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2101;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTablePartitionColumnTypeSpec(): CreateTablePartitionColumnTypeSpecContext {
        let localContext = new CreateTablePartitionColumnTypeSpecContext(this.context, this.state);
        this.enterRule(localContext, 218, HiveSQLParser.RULE_createTablePartitionColumnTypeSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2103;
            this.columnNameTypeConstraint();
            this.state = 2108;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2104;
                this.match(HiveSQLParser.COMMA);
                this.state = 2105;
                this.columnNameTypeConstraint();
                }
                }
                this.state = 2110;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTablePartitionColumnSpec(): CreateTablePartitionColumnSpecContext {
        let localContext = new CreateTablePartitionColumnSpecContext(this.context, this.state);
        this.enterRule(localContext, 220, HiveSQLParser.RULE_createTablePartitionColumnSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2111;
            this.columnName();
            this.state = 2116;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2112;
                this.match(HiveSQLParser.COMMA);
                this.state = 2113;
                this.columnName();
                }
                }
                this.state = 2118;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTransformSpec(): PartitionTransformSpecContext {
        let localContext = new PartitionTransformSpecContext(this.context, this.state);
        this.enterRule(localContext, 222, HiveSQLParser.RULE_partitionTransformSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2119;
            this.columnNameTransformConstraint();
            this.state = 2124;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2120;
                this.match(HiveSQLParser.COMMA);
                this.state = 2121;
                this.columnNameTransformConstraint();
                }
                }
                this.state = 2126;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTransformConstraint(): ColumnNameTransformConstraintContext {
        let localContext = new ColumnNameTransformConstraintContext(this.context, this.state);
        this.enterRule(localContext, 224, HiveSQLParser.RULE_columnNameTransformConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2127;
            this.partitionTransformType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTransformType(): PartitionTransformTypeContext {
        let localContext = new PartitionTransformTypeContext(this.context, this.state);
        this.enterRule(localContext, 226, HiveSQLParser.RULE_partitionTransformType);
        let _la: number;
        try {
            this.state = 2142;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 170, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2129;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2130;
                _la = this.tokenStream.LA(1);
                if(!(_la === 73 || _la === 144 || _la === 200 || _la === 381)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2131;
                this.match(HiveSQLParser.LPAREN);
                this.state = 2132;
                this.columnName();
                this.state = 2133;
                this.match(HiveSQLParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2135;
                _la = this.tokenStream.LA(1);
                if(!(_la === 30 || _la === 341)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2136;
                this.match(HiveSQLParser.LPAREN);
                this.state = 2137;
                localContext._value = this.match(HiveSQLParser.Number);
                this.state = 2138;
                this.match(HiveSQLParser.COMMA);
                this.state = 2139;
                this.columnName();
                this.state = 2140;
                this.match(HiveSQLParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableBuckets(): TableBucketsContext {
        let localContext = new TableBucketsContext(this.context, this.state);
        this.enterRule(localContext, 228, HiveSQLParser.RULE_tableBuckets);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2144;
            this.match(HiveSQLParser.KW_CLUSTERED);
            this.state = 2145;
            this.match(HiveSQLParser.KW_BY);
            this.state = 2146;
            this.match(HiveSQLParser.LPAREN);
            this.state = 2147;
            localContext._bucketCols = this.columnNameList();
            this.state = 2148;
            this.match(HiveSQLParser.RPAREN);
            this.state = 2155;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305) {
                {
                this.state = 2149;
                this.match(HiveSQLParser.KW_SORTED);
                this.state = 2150;
                this.match(HiveSQLParser.KW_BY);
                this.state = 2151;
                this.match(HiveSQLParser.LPAREN);
                this.state = 2152;
                localContext._sortCols = this.columnNameOrderList();
                this.state = 2153;
                this.match(HiveSQLParser.RPAREN);
                }
            }

            this.state = 2157;
            this.match(HiveSQLParser.KW_INTO);
            this.state = 2158;
            localContext._num = this.match(HiveSQLParser.Number);
            this.state = 2159;
            this.match(HiveSQLParser.KW_BUCKETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableImplBuckets(): TableImplBucketsContext {
        let localContext = new TableImplBucketsContext(this.context, this.state);
        this.enterRule(localContext, 230, HiveSQLParser.RULE_tableImplBuckets);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2161;
            this.match(HiveSQLParser.KW_CLUSTERED);
            this.state = 2162;
            this.match(HiveSQLParser.KW_INTO);
            this.state = 2163;
            localContext._num = this.match(HiveSQLParser.Number);
            this.state = 2164;
            this.match(HiveSQLParser.KW_BUCKETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSkewed(): TableSkewedContext {
        let localContext = new TableSkewedContext(this.context, this.state);
        this.enterRule(localContext, 232, HiveSQLParser.RULE_tableSkewed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2166;
            this.match(HiveSQLParser.KW_SKEWED);
            this.state = 2167;
            this.match(HiveSQLParser.KW_BY);
            this.state = 2168;
            this.match(HiveSQLParser.LPAREN);
            this.state = 2169;
            localContext._skewedCols = this.columnNameList();
            this.state = 2170;
            this.match(HiveSQLParser.RPAREN);
            this.state = 2171;
            this.match(HiveSQLParser.KW_ON);
            this.state = 2172;
            this.match(HiveSQLParser.LPAREN);
            this.state = 2173;
            localContext._skewedValues = this.skewedValueElement();
            this.state = 2174;
            this.match(HiveSQLParser.RPAREN);
            this.state = 2176;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
            case 1:
                {
                this.state = 2175;
                this.storedAsDirs();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormat(): RowFormatContext {
        let localContext = new RowFormatContext(this.context, this.state);
        this.enterRule(localContext, 234, HiveSQLParser.RULE_rowFormat);
        try {
            this.state = 2180;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 173, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2178;
                this.rowFormatSerde();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2179;
                this.rowFormatDelimited();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public recordReader(): RecordReaderContext {
        let localContext = new RecordReaderContext(this.context, this.state);
        this.enterRule(localContext, 236, HiveSQLParser.RULE_recordReader);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2182;
            this.match(HiveSQLParser.KW_RECORDREADER);
            this.state = 2183;
            this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public recordWriter(): RecordWriterContext {
        let localContext = new RecordWriterContext(this.context, this.state);
        this.enterRule(localContext, 238, HiveSQLParser.RULE_recordWriter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2185;
            this.match(HiveSQLParser.KW_RECORDWRITER);
            this.state = 2186;
            this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormatSerde(): RowFormatSerdeContext {
        let localContext = new RowFormatSerdeContext(this.context, this.state);
        this.enterRule(localContext, 240, HiveSQLParser.RULE_rowFormatSerde);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2188;
            this.match(HiveSQLParser.KW_ROW);
            this.state = 2189;
            this.match(HiveSQLParser.KW_FORMAT);
            this.state = 2190;
            this.match(HiveSQLParser.KW_SERDE);
            this.state = 2191;
            localContext._name = this.match(HiveSQLParser.StringLiteral);
            this.state = 2195;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 2192;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 2193;
                this.match(HiveSQLParser.KW_SERDEPROPERTIES);
                this.state = 2194;
                localContext._serdeprops = this.tableProperties();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormatDelimited(): RowFormatDelimitedContext {
        let localContext = new RowFormatDelimitedContext(this.context, this.state);
        this.enterRule(localContext, 242, HiveSQLParser.RULE_rowFormatDelimited);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2197;
            this.match(HiveSQLParser.KW_ROW);
            this.state = 2198;
            this.match(HiveSQLParser.KW_FORMAT);
            this.state = 2199;
            this.match(HiveSQLParser.KW_DELIMITED);
            this.state = 2201;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 2200;
                this.tableRowFormatFieldIdentifier();
                }
            }

            this.state = 2204;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 44) {
                {
                this.state = 2203;
                this.tableRowFormatCollItemsIdentifier();
                }
            }

            this.state = 2207;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                {
                this.state = 2206;
                this.tableRowFormatMapKeysIdentifier();
                }
                break;
            }
            this.state = 2210;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 179) {
                {
                this.state = 2209;
                this.tableRowFormatLinesIdentifier();
                }
            }

            this.state = 2213;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 210) {
                {
                this.state = 2212;
                this.tableRowNullFormat();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormat(): TableRowFormatContext {
        let localContext = new TableRowFormatContext(this.context, this.state);
        this.enterRule(localContext, 244, HiveSQLParser.RULE_tableRowFormat);
        try {
            this.state = 2217;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 180, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2215;
                this.rowFormatDelimited();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2216;
                this.rowFormatSerde();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext {
        let localContext = new TablePropertiesPrefixedContext(this.context, this.state);
        this.enterRule(localContext, 246, HiveSQLParser.RULE_tablePropertiesPrefixed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2219;
            this.match(HiveSQLParser.KW_TBLPROPERTIES);
            this.state = 2220;
            this.tableProperties();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProperties(): TablePropertiesContext {
        let localContext = new TablePropertiesContext(this.context, this.state);
        this.enterRule(localContext, 248, HiveSQLParser.RULE_tableProperties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2222;
            this.match(HiveSQLParser.LPAREN);
            this.state = 2223;
            this.tablePropertiesList();
            this.state = 2224;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePropertiesList(): TablePropertiesListContext {
        let localContext = new TablePropertiesListContext(this.context, this.state);
        this.enterRule(localContext, 250, HiveSQLParser.RULE_tablePropertiesList);
        let _la: number;
        try {
            this.state = 2242;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 183, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2226;
                this.keyValueProperty();
                this.state = 2231;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 385) {
                    {
                    {
                    this.state = 2227;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 2228;
                    this.keyValueProperty();
                    }
                    }
                    this.state = 2233;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2234;
                this.keyProperty();
                this.state = 2239;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 385) {
                    {
                    {
                    this.state = 2235;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 2236;
                    this.keyProperty();
                    }
                    }
                    this.state = 2241;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyValueProperty(): KeyValuePropertyContext {
        let localContext = new KeyValuePropertyContext(this.context, this.state);
        this.enterRule(localContext, 252, HiveSQLParser.RULE_keyValueProperty);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2244;
            localContext._key = this.match(HiveSQLParser.StringLiteral);
            this.state = 2245;
            this.match(HiveSQLParser.EQUAL);
            this.state = 2246;
            localContext._value = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyProperty(): KeyPropertyContext {
        let localContext = new KeyPropertyContext(this.context, this.state);
        this.enterRule(localContext, 254, HiveSQLParser.RULE_keyProperty);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2248;
            localContext._key = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatFieldIdentifier(): TableRowFormatFieldIdentifierContext {
        let localContext = new TableRowFormatFieldIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 256, HiveSQLParser.RULE_tableRowFormatFieldIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2250;
            this.match(HiveSQLParser.KW_FIELDS);
            this.state = 2251;
            this.match(HiveSQLParser.KW_TERMINATED);
            this.state = 2252;
            this.match(HiveSQLParser.KW_BY);
            this.state = 2253;
            localContext._fldIdnt = this.match(HiveSQLParser.StringLiteral);
            this.state = 2257;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 2254;
                this.match(HiveSQLParser.KW_ESCAPED);
                this.state = 2255;
                this.match(HiveSQLParser.KW_BY);
                this.state = 2256;
                localContext._fldEscape = this.match(HiveSQLParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatCollItemsIdentifier(): TableRowFormatCollItemsIdentifierContext {
        let localContext = new TableRowFormatCollItemsIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 258, HiveSQLParser.RULE_tableRowFormatCollItemsIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2259;
            this.match(HiveSQLParser.KW_COLLECTION);
            this.state = 2260;
            this.match(HiveSQLParser.KW_ITEMS);
            this.state = 2261;
            this.match(HiveSQLParser.KW_TERMINATED);
            this.state = 2262;
            this.match(HiveSQLParser.KW_BY);
            this.state = 2263;
            localContext._collIdnt = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatMapKeysIdentifier(): TableRowFormatMapKeysIdentifierContext {
        let localContext = new TableRowFormatMapKeysIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 260, HiveSQLParser.RULE_tableRowFormatMapKeysIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2265;
            this.match(HiveSQLParser.KW_MAP);
            this.state = 2266;
            this.match(HiveSQLParser.KW_KEYS);
            this.state = 2267;
            this.match(HiveSQLParser.KW_TERMINATED);
            this.state = 2268;
            this.match(HiveSQLParser.KW_BY);
            this.state = 2269;
            localContext._mapKeysIdnt = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatLinesIdentifier(): TableRowFormatLinesIdentifierContext {
        let localContext = new TableRowFormatLinesIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 262, HiveSQLParser.RULE_tableRowFormatLinesIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2271;
            this.match(HiveSQLParser.KW_LINES);
            this.state = 2272;
            this.match(HiveSQLParser.KW_TERMINATED);
            this.state = 2273;
            this.match(HiveSQLParser.KW_BY);
            this.state = 2274;
            localContext._linesIdnt = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowNullFormat(): TableRowNullFormatContext {
        let localContext = new TableRowNullFormatContext(this.context, this.state);
        this.enterRule(localContext, 264, HiveSQLParser.RULE_tableRowNullFormat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2276;
            this.match(HiveSQLParser.KW_NULL);
            this.state = 2277;
            this.match(HiveSQLParser.KW_DEFINED);
            this.state = 2278;
            this.match(HiveSQLParser.KW_AS);
            this.state = 2279;
            localContext._nullIdnt = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFileFormat(): TableFileFormatContext {
        let localContext = new TableFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 266, HiveSQLParser.RULE_tableFileFormat);
        let _la: number;
        try {
            this.state = 2322;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 190, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2281;
                this.match(HiveSQLParser.KW_STORED);
                this.state = 2282;
                this.match(HiveSQLParser.KW_AS);
                this.state = 2283;
                this.match(HiveSQLParser.KW_INPUTFORMAT);
                this.state = 2284;
                localContext._inFmt = this.match(HiveSQLParser.StringLiteral);
                this.state = 2285;
                this.match(HiveSQLParser.KW_OUTPUTFORMAT);
                this.state = 2286;
                localContext._outFmt = this.match(HiveSQLParser.StringLiteral);
                this.state = 2291;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 2287;
                    this.match(HiveSQLParser.KW_INPUTDRIVER);
                    this.state = 2288;
                    localContext._inDriver = this.match(HiveSQLParser.StringLiteral);
                    this.state = 2289;
                    this.match(HiveSQLParser.KW_OUTPUTDRIVER);
                    this.state = 2290;
                    localContext._outDriver = this.match(HiveSQLParser.StringLiteral);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2293;
                this.match(HiveSQLParser.KW_STORED);
                this.state = 2294;
                this.match(HiveSQLParser.KW_BY);
                this.state = 2295;
                localContext._storageHandler = this.match(HiveSQLParser.StringLiteral);
                this.state = 2299;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 376) {
                    {
                    this.state = 2296;
                    this.match(HiveSQLParser.KW_WITH);
                    this.state = 2297;
                    this.match(HiveSQLParser.KW_SERDEPROPERTIES);
                    this.state = 2298;
                    localContext._serdeprops = this.tableProperties();
                    }
                }

                this.state = 2304;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 2301;
                    this.match(HiveSQLParser.KW_STORED);
                    this.state = 2302;
                    this.match(HiveSQLParser.KW_AS);
                    this.state = 2303;
                    localContext._fileformat = this.id_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2306;
                this.match(HiveSQLParser.KW_STORED);
                this.state = 2307;
                this.match(HiveSQLParser.KW_BY);
                this.state = 2308;
                localContext._genericSpec = this.id_();
                this.state = 2312;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 376) {
                    {
                    this.state = 2309;
                    this.match(HiveSQLParser.KW_WITH);
                    this.state = 2310;
                    this.match(HiveSQLParser.KW_SERDEPROPERTIES);
                    this.state = 2311;
                    localContext._serdeprops = this.tableProperties();
                    }
                }

                this.state = 2317;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 2314;
                    this.match(HiveSQLParser.KW_STORED);
                    this.state = 2315;
                    this.match(HiveSQLParser.KW_AS);
                    this.state = 2316;
                    localContext._fileformat = this.id_();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2319;
                this.match(HiveSQLParser.KW_STORED);
                this.state = 2320;
                this.match(HiveSQLParser.KW_AS);
                this.state = 2321;
                localContext._genericSpec = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableLocation(): TableLocationContext {
        let localContext = new TableLocationContext(this.context, this.state);
        this.enterRule(localContext, 268, HiveSQLParser.RULE_tableLocation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2324;
            this.match(HiveSQLParser.KW_LOCATION);
            this.state = 2325;
            localContext._locn = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeList(): ColumnNameTypeListContext {
        let localContext = new ColumnNameTypeListContext(this.context, this.state);
        this.enterRule(localContext, 270, HiveSQLParser.RULE_columnNameTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2327;
            this.columnNameType();
            this.state = 2332;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2328;
                this.match(HiveSQLParser.COMMA);
                this.state = 2329;
                this.columnNameType();
                }
                }
                this.state = 2334;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeOrConstraintList(): ColumnNameTypeOrConstraintListContext {
        let localContext = new ColumnNameTypeOrConstraintListContext(this.context, this.state);
        this.enterRule(localContext, 272, HiveSQLParser.RULE_columnNameTypeOrConstraintList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2335;
            this.columnNameTypeOrConstraint();
            this.state = 2340;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2336;
                this.match(HiveSQLParser.COMMA);
                this.state = 2337;
                this.columnNameTypeOrConstraint();
                }
                }
                this.state = 2342;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameColonTypeList(): ColumnNameColonTypeListContext {
        let localContext = new ColumnNameColonTypeListContext(this.context, this.state);
        this.enterRule(localContext, 274, HiveSQLParser.RULE_columnNameColonTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2343;
            this.columnNameColonType();
            this.state = 2348;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2344;
                this.match(HiveSQLParser.COMMA);
                this.state = 2345;
                this.columnNameColonType();
                }
                }
                this.state = 2350;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameList(): ColumnNameListContext {
        let localContext = new ColumnNameListContext(this.context, this.state);
        this.enterRule(localContext, 276, HiveSQLParser.RULE_columnNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2351;
            this.columnName();
            this.state = 2356;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2352;
                this.match(HiveSQLParser.COMMA);
                this.state = 2353;
                this.columnName();
                }
                }
                this.state = 2358;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 278, HiveSQLParser.RULE_columnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2359;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extColumnName(): ExtColumnNameContext {
        let localContext = new ExtColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 280, HiveSQLParser.RULE_extColumnName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2361;
            this.id_();
            this.state = 2371;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 383) {
                {
                {
                this.state = 2362;
                this.match(HiveSQLParser.DOT);
                this.state = 2367;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 195, this.context) ) {
                case 1:
                    {
                    this.state = 2363;
                    this.match(HiveSQLParser.KW_ELEM_TYPE);
                    }
                    break;
                case 2:
                    {
                    this.state = 2364;
                    this.match(HiveSQLParser.KW_KEY_TYPE);
                    }
                    break;
                case 3:
                    {
                    this.state = 2365;
                    this.match(HiveSQLParser.KW_VALUE_TYPE);
                    }
                    break;
                case 4:
                    {
                    this.state = 2366;
                    this.id_();
                    }
                    break;
                }
                }
                }
                this.state = 2373;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameOrderList(): ColumnNameOrderListContext {
        let localContext = new ColumnNameOrderListContext(this.context, this.state);
        this.enterRule(localContext, 282, HiveSQLParser.RULE_columnNameOrderList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2374;
            this.columnNameOrder();
            this.state = 2379;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2375;
                this.match(HiveSQLParser.COMMA);
                this.state = 2376;
                this.columnNameOrder();
                }
                }
                this.state = 2381;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnParenthesesList(): ColumnParenthesesListContext {
        let localContext = new ColumnParenthesesListContext(this.context, this.state);
        this.enterRule(localContext, 284, HiveSQLParser.RULE_columnParenthesesList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2382;
            this.match(HiveSQLParser.LPAREN);
            this.state = 2383;
            this.columnNameList();
            this.state = 2384;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enableValidateSpecification(): EnableValidateSpecificationContext {
        let localContext = new EnableValidateSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 286, HiveSQLParser.RULE_enableValidateSpecification);
        let _la: number;
        try {
            this.state = 2391;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_ENABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2386;
                this.enableSpecification();
                this.state = 2388;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 208 || _la === 363) {
                    {
                    this.state = 2387;
                    this.validateSpecification();
                    }
                }

                }
                break;
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_NOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2390;
                this.enforcedSpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enableSpecification(): EnableSpecificationContext {
        let localContext = new EnableSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 288, HiveSQLParser.RULE_enableSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2393;
            _la = this.tokenStream.LA(1);
            if(!(_la === 91 || _la === 102)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validateSpecification(): ValidateSpecificationContext {
        let localContext = new ValidateSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 290, HiveSQLParser.RULE_validateSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2395;
            _la = this.tokenStream.LA(1);
            if(!(_la === 208 || _la === 363)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enforcedSpecification(): EnforcedSpecificationContext {
        let localContext = new EnforcedSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 292, HiveSQLParser.RULE_enforcedSpecification);
        try {
            this.state = 2400;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ENFORCED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2397;
                this.match(HiveSQLParser.KW_ENFORCED);
                }
                break;
            case HiveSQLParser.KW_NOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2398;
                this.match(HiveSQLParser.KW_NOT);
                this.state = 2399;
                this.match(HiveSQLParser.KW_ENFORCED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relySpecification(): RelySpecificationContext {
        let localContext = new RelySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 294, HiveSQLParser.RULE_relySpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2402;
            _la = this.tokenStream.LA(1);
            if(!(_la === 205 || _la === 263)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createConstraint(): CreateConstraintContext {
        let localContext = new CreateConstraintContext(this.context, this.state);
        this.enterRule(localContext, 296, HiveSQLParser.RULE_createConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2406;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2404;
                this.match(HiveSQLParser.KW_CONSTRAINT);
                this.state = 2405;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2408;
            this.tableLevelConstraint();
            this.state = 2410;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la === 207) {
                {
                this.state = 2409;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterConstraintWithName(): AlterConstraintWithNameContext {
        let localContext = new AlterConstraintWithNameContext(this.context, this.state);
        this.enterRule(localContext, 298, HiveSQLParser.RULE_alterConstraintWithName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2412;
            this.match(HiveSQLParser.KW_CONSTRAINT);
            this.state = 2413;
            localContext._constraintName = this.id_();
            this.state = 2414;
            this.tableLevelConstraint();
            this.state = 2416;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la === 207) {
                {
                this.state = 2415;
                this.constraintOptsAlter();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableLevelConstraint(): TableLevelConstraintContext {
        let localContext = new TableLevelConstraintContext(this.context, this.state);
        this.enterRule(localContext, 300, HiveSQLParser.RULE_tableLevelConstraint);
        try {
            this.state = 2420;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_PRIMARY:
            case HiveSQLParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2418;
                this.pkUkConstraint();
                }
                break;
            case HiveSQLParser.KW_CHECK:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2419;
                this.checkConstraint();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pkUkConstraint(): PkUkConstraintContext {
        let localContext = new PkUkConstraintContext(this.context, this.state);
        this.enterRule(localContext, 302, HiveSQLParser.RULE_pkUkConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2422;
            this.tableConstraintType();
            this.state = 2423;
            localContext._pkCols = this.columnParenthesesList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkConstraint(): CheckConstraintContext {
        let localContext = new CheckConstraintContext(this.context, this.state);
        this.enterRule(localContext, 304, HiveSQLParser.RULE_checkConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2425;
            this.match(HiveSQLParser.KW_CHECK);
            this.state = 2426;
            this.match(HiveSQLParser.LPAREN);
            this.state = 2427;
            this.expression();
            this.state = 2428;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createForeignKey(): CreateForeignKeyContext {
        let localContext = new CreateForeignKeyContext(this.context, this.state);
        this.enterRule(localContext, 306, HiveSQLParser.RULE_createForeignKey);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2432;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2430;
                this.match(HiveSQLParser.KW_CONSTRAINT);
                this.state = 2431;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2434;
            this.match(HiveSQLParser.KW_FOREIGN);
            this.state = 2435;
            this.match(HiveSQLParser.KW_KEY);
            this.state = 2436;
            localContext._fkCols = this.columnParenthesesList();
            this.state = 2437;
            this.match(HiveSQLParser.KW_REFERENCES);
            this.state = 2438;
            localContext._tabName = this.tableName();
            this.state = 2439;
            localContext._parCols = this.columnParenthesesList();
            this.state = 2441;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la === 207) {
                {
                this.state = 2440;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterForeignKeyWithName(): AlterForeignKeyWithNameContext {
        let localContext = new AlterForeignKeyWithNameContext(this.context, this.state);
        this.enterRule(localContext, 308, HiveSQLParser.RULE_alterForeignKeyWithName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2443;
            this.match(HiveSQLParser.KW_CONSTRAINT);
            this.state = 2444;
            localContext._constraintName = this.id_();
            this.state = 2445;
            this.match(HiveSQLParser.KW_FOREIGN);
            this.state = 2446;
            this.match(HiveSQLParser.KW_KEY);
            this.state = 2447;
            localContext._fkCols = this.columnParenthesesList();
            this.state = 2448;
            this.match(HiveSQLParser.KW_REFERENCES);
            this.state = 2449;
            localContext._tabName = this.tableName();
            this.state = 2450;
            localContext._parCols = this.columnParenthesesList();
            this.state = 2452;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la === 207) {
                {
                this.state = 2451;
                this.constraintOptsAlter();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedValueElement(): SkewedValueElementContext {
        let localContext = new SkewedValueElementContext(this.context, this.state);
        this.enterRule(localContext, 310, HiveSQLParser.RULE_skewedValueElement);
        try {
            this.state = 2456;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_CURRENT_DATE:
            case HiveSQLParser.KW_CURRENT_TIMESTAMP:
            case HiveSQLParser.KW_DATE:
            case HiveSQLParser.KW_FALSE:
            case HiveSQLParser.KW_NULL:
            case HiveSQLParser.KW_TIMESTAMP:
            case HiveSQLParser.KW_TIMESTAMPLOCALTZ:
            case HiveSQLParser.KW_TRUE:
            case HiveSQLParser.QUESTION:
            case HiveSQLParser.StringLiteral:
            case HiveSQLParser.IntegralLiteral:
            case HiveSQLParser.NumberLiteral:
            case HiveSQLParser.Number:
            case HiveSQLParser.CharSetName:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2454;
                this.skewedColumnValues();
                }
                break;
            case HiveSQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2455;
                this.skewedColumnValuePairList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedColumnValuePairList(): SkewedColumnValuePairListContext {
        let localContext = new SkewedColumnValuePairListContext(this.context, this.state);
        this.enterRule(localContext, 312, HiveSQLParser.RULE_skewedColumnValuePairList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2458;
            this.skewedColumnValuePair();
            this.state = 2463;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2459;
                this.match(HiveSQLParser.COMMA);
                this.state = 2460;
                this.skewedColumnValuePair();
                }
                }
                this.state = 2465;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedColumnValuePair(): SkewedColumnValuePairContext {
        let localContext = new SkewedColumnValuePairContext(this.context, this.state);
        this.enterRule(localContext, 314, HiveSQLParser.RULE_skewedColumnValuePair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2466;
            this.match(HiveSQLParser.LPAREN);
            this.state = 2467;
            localContext._colValues = this.skewedColumnValues();
            this.state = 2468;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedColumnValues(): SkewedColumnValuesContext {
        let localContext = new SkewedColumnValuesContext(this.context, this.state);
        this.enterRule(localContext, 316, HiveSQLParser.RULE_skewedColumnValues);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2470;
            this.skewedColumnValue();
            this.state = 2475;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2471;
                this.match(HiveSQLParser.COMMA);
                this.state = 2472;
                this.skewedColumnValue();
                }
                }
                this.state = 2477;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedColumnValue(): SkewedColumnValueContext {
        let localContext = new SkewedColumnValueContext(this.context, this.state);
        this.enterRule(localContext, 318, HiveSQLParser.RULE_skewedColumnValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2478;
            this.constant();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedValueLocationElement(): SkewedValueLocationElementContext {
        let localContext = new SkewedValueLocationElementContext(this.context, this.state);
        this.enterRule(localContext, 320, HiveSQLParser.RULE_skewedValueLocationElement);
        try {
            this.state = 2482;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_CURRENT_DATE:
            case HiveSQLParser.KW_CURRENT_TIMESTAMP:
            case HiveSQLParser.KW_DATE:
            case HiveSQLParser.KW_FALSE:
            case HiveSQLParser.KW_NULL:
            case HiveSQLParser.KW_TIMESTAMP:
            case HiveSQLParser.KW_TIMESTAMPLOCALTZ:
            case HiveSQLParser.KW_TRUE:
            case HiveSQLParser.QUESTION:
            case HiveSQLParser.StringLiteral:
            case HiveSQLParser.IntegralLiteral:
            case HiveSQLParser.NumberLiteral:
            case HiveSQLParser.Number:
            case HiveSQLParser.CharSetName:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2480;
                this.skewedColumnValue();
                }
                break;
            case HiveSQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2481;
                this.skewedColumnValuePair();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderSpecification(): OrderSpecificationContext {
        let localContext = new OrderSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 322, HiveSQLParser.RULE_orderSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2484;
            _la = this.tokenStream.LA(1);
            if(!(_la === 18 || _la === 86)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullOrdering(): NullOrderingContext {
        let localContext = new NullOrderingContext(this.context, this.state);
        this.enterRule(localContext, 324, HiveSQLParser.RULE_nullOrdering);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2486;
            this.match(HiveSQLParser.KW_NULLS);
            this.state = 2487;
            _la = this.tokenStream.LA(1);
            if(!(_la === 125 || _la === 171)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameOrder(): ColumnNameOrderContext {
        let localContext = new ColumnNameOrderContext(this.context, this.state);
        this.enterRule(localContext, 326, HiveSQLParser.RULE_columnNameOrder);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2489;
            this.id_();
            this.state = 2491;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18 || _la === 86) {
                {
                this.state = 2490;
                localContext._orderSpec = this.orderSpecification();
                }
            }

            this.state = 2494;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 211) {
                {
                this.state = 2493;
                localContext._nullSpec = this.nullOrdering();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCommentList(): ColumnNameCommentListContext {
        let localContext = new ColumnNameCommentListContext(this.context, this.state);
        this.enterRule(localContext, 328, HiveSQLParser.RULE_columnNameCommentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2496;
            this.columnNameComment();
            this.state = 2501;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2497;
                this.match(HiveSQLParser.COMMA);
                this.state = 2498;
                this.columnNameComment();
                }
                }
                this.state = 2503;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameComment(): ColumnNameCommentContext {
        let localContext = new ColumnNameCommentContext(this.context, this.state);
        this.enterRule(localContext, 330, HiveSQLParser.RULE_columnNameComment);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2504;
            localContext._colName = this.id_();
            this.state = 2507;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2505;
                this.match(HiveSQLParser.KW_COMMENT);
                this.state = 2506;
                localContext._comment = this.match(HiveSQLParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderSpecificationRewrite(): OrderSpecificationRewriteContext {
        let localContext = new OrderSpecificationRewriteContext(this.context, this.state);
        this.enterRule(localContext, 332, HiveSQLParser.RULE_orderSpecificationRewrite);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2509;
            _la = this.tokenStream.LA(1);
            if(!(_la === 18 || _la === 86)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnRefOrder(): ColumnRefOrderContext {
        let localContext = new ColumnRefOrderContext(this.context, this.state);
        this.enterRule(localContext, 334, HiveSQLParser.RULE_columnRefOrder);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2511;
            this.expression();
            this.state = 2513;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18 || _la === 86) {
                {
                this.state = 2512;
                localContext._orderSpec = this.orderSpecificationRewrite();
                }
            }

            this.state = 2516;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 211) {
                {
                this.state = 2515;
                localContext._nullSpec = this.nullOrdering();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameType(): ColumnNameTypeContext {
        let localContext = new ColumnNameTypeContext(this.context, this.state);
        this.enterRule(localContext, 336, HiveSQLParser.RULE_columnNameType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2518;
            localContext._colName = this.id_();
            this.state = 2519;
            this.colType();
            this.state = 2522;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2520;
                this.match(HiveSQLParser.KW_COMMENT);
                this.state = 2521;
                localContext._comment = this.match(HiveSQLParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeOrConstraint(): ColumnNameTypeOrConstraintContext {
        let localContext = new ColumnNameTypeOrConstraintContext(this.context, this.state);
        this.enterRule(localContext, 338, HiveSQLParser.RULE_columnNameTypeOrConstraint);
        try {
            this.state = 2526;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2524;
                this.tableConstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2525;
                this.columnNameTypeConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableConstraint(): TableConstraintContext {
        let localContext = new TableConstraintContext(this.context, this.state);
        this.enterRule(localContext, 340, HiveSQLParser.RULE_tableConstraint);
        try {
            this.state = 2530;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 220, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2528;
                this.createForeignKey();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2529;
                this.createConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeConstraint(): ColumnNameTypeConstraintContext {
        let localContext = new ColumnNameTypeConstraintContext(this.context, this.state);
        this.enterRule(localContext, 342, HiveSQLParser.RULE_columnNameTypeConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2532;
            localContext._colName = this.id_();
            this.state = 2533;
            this.colType();
            this.state = 2535;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 40 || _la === 55 || _la === 80 || _la === 207 || _la === 242 || _la === 260 || _la === 348) {
                {
                this.state = 2534;
                this.columnConstraint();
                }
            }

            this.state = 2539;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2537;
                this.match(HiveSQLParser.KW_COMMENT);
                this.state = 2538;
                localContext._comment = this.match(HiveSQLParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnConstraint(): ColumnConstraintContext {
        let localContext = new ColumnConstraintContext(this.context, this.state);
        this.enterRule(localContext, 344, HiveSQLParser.RULE_columnConstraint);
        try {
            this.state = 2543;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2541;
                this.foreignKeyConstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2542;
                this.colConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public foreignKeyConstraint(): ForeignKeyConstraintContext {
        let localContext = new ForeignKeyConstraintContext(this.context, this.state);
        this.enterRule(localContext, 346, HiveSQLParser.RULE_foreignKeyConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2547;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2545;
                this.match(HiveSQLParser.KW_CONSTRAINT);
                this.state = 2546;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2549;
            this.match(HiveSQLParser.KW_REFERENCES);
            this.state = 2550;
            localContext._tabName = this.tableName();
            this.state = 2551;
            this.match(HiveSQLParser.LPAREN);
            this.state = 2552;
            localContext._colName = this.columnName();
            this.state = 2553;
            this.match(HiveSQLParser.RPAREN);
            this.state = 2555;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la === 207) {
                {
                this.state = 2554;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colConstraint(): ColConstraintContext {
        let localContext = new ColConstraintContext(this.context, this.state);
        this.enterRule(localContext, 348, HiveSQLParser.RULE_colConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2559;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2557;
                this.match(HiveSQLParser.KW_CONSTRAINT);
                this.state = 2558;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2561;
            this.columnConstraintType();
            this.state = 2563;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la === 207) {
                {
                this.state = 2562;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColumnConstraint(): AlterColumnConstraintContext {
        let localContext = new AlterColumnConstraintContext(this.context, this.state);
        this.enterRule(localContext, 350, HiveSQLParser.RULE_alterColumnConstraint);
        try {
            this.state = 2567;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 228, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2565;
                this.alterForeignKeyConstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2566;
                this.alterColConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterForeignKeyConstraint(): AlterForeignKeyConstraintContext {
        let localContext = new AlterForeignKeyConstraintContext(this.context, this.state);
        this.enterRule(localContext, 352, HiveSQLParser.RULE_alterForeignKeyConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2571;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2569;
                this.match(HiveSQLParser.KW_CONSTRAINT);
                this.state = 2570;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2573;
            this.match(HiveSQLParser.KW_REFERENCES);
            this.state = 2574;
            localContext._tabName = this.tableName();
            this.state = 2575;
            this.match(HiveSQLParser.LPAREN);
            this.state = 2576;
            localContext._colName = this.columnName();
            this.state = 2577;
            this.match(HiveSQLParser.RPAREN);
            this.state = 2579;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la === 207) {
                {
                this.state = 2578;
                this.constraintOptsAlter();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColConstraint(): AlterColConstraintContext {
        let localContext = new AlterColConstraintContext(this.context, this.state);
        this.enterRule(localContext, 354, HiveSQLParser.RULE_alterColConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2583;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2581;
                this.match(HiveSQLParser.KW_CONSTRAINT);
                this.state = 2582;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2585;
            this.columnConstraintType();
            this.state = 2587;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la === 207) {
                {
                this.state = 2586;
                this.constraintOptsAlter();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnConstraintType(): ColumnConstraintTypeContext {
        let localContext = new ColumnConstraintTypeContext(this.context, this.state);
        this.enterRule(localContext, 356, HiveSQLParser.RULE_columnConstraintType);
        try {
            this.state = 2595;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2589;
                this.match(HiveSQLParser.KW_NOT);
                this.state = 2590;
                this.match(HiveSQLParser.KW_NULL);
                }
                break;
            case HiveSQLParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2591;
                this.match(HiveSQLParser.KW_DEFAULT);
                this.state = 2592;
                this.defaultVal();
                }
                break;
            case HiveSQLParser.KW_CHECK:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2593;
                this.checkConstraint();
                }
                break;
            case HiveSQLParser.KW_PRIMARY:
            case HiveSQLParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2594;
                this.tableConstraintType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultVal(): DefaultValContext {
        let localContext = new DefaultValContext(this.context, this.state);
        this.enterRule(localContext, 358, HiveSQLParser.RULE_defaultVal);
        try {
            this.state = 2600;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 234, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2597;
                this.constant();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2598;
                this.function_();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2599;
                this.castExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableConstraintType(): TableConstraintTypeContext {
        let localContext = new TableConstraintTypeContext(this.context, this.state);
        this.enterRule(localContext, 360, HiveSQLParser.RULE_tableConstraintType);
        try {
            this.state = 2605;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_PRIMARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2602;
                this.match(HiveSQLParser.KW_PRIMARY);
                this.state = 2603;
                this.match(HiveSQLParser.KW_KEY);
                }
                break;
            case HiveSQLParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2604;
                this.match(HiveSQLParser.KW_UNIQUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext {
        let localContext = new ConstraintOptsCreateContext(this.context, this.state);
        this.enterRule(localContext, 362, HiveSQLParser.RULE_constraintOptsCreate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2607;
            this.enableValidateSpecification();
            this.state = 2609;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 205 || _la === 263) {
                {
                this.state = 2608;
                this.relySpecification();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext {
        let localContext = new ConstraintOptsAlterContext(this.context, this.state);
        this.enterRule(localContext, 364, HiveSQLParser.RULE_constraintOptsAlter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2611;
            this.enableValidateSpecification();
            this.state = 2613;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 205 || _la === 263) {
                {
                this.state = 2612;
                this.relySpecification();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameColonType(): ColumnNameColonTypeContext {
        let localContext = new ColumnNameColonTypeContext(this.context, this.state);
        this.enterRule(localContext, 366, HiveSQLParser.RULE_columnNameColonType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2615;
            localContext._colName = this.id_();
            this.state = 2616;
            this.match(HiveSQLParser.COLON);
            this.state = 2617;
            this.colType();
            this.state = 2620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2618;
                this.match(HiveSQLParser.KW_COMMENT);
                this.state = 2619;
                localContext._comment = this.match(HiveSQLParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colType(): ColTypeContext {
        let localContext = new ColTypeContext(this.context, this.state);
        this.enterRule(localContext, 368, HiveSQLParser.RULE_colType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2622;
            this.type_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colTypeList(): ColTypeListContext {
        let localContext = new ColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 370, HiveSQLParser.RULE_colTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2624;
            this.colType();
            this.state = 2629;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2625;
                this.match(HiveSQLParser.COMMA);
                this.state = 2626;
                this.colType();
                }
                }
                this.state = 2631;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_(): TypeContext {
        let localContext = new TypeContext(this.context, this.state);
        this.enterRule(localContext, 372, HiveSQLParser.RULE_type);
        try {
            this.state = 2637;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_BIGINT:
            case HiveSQLParser.KW_BINARY:
            case HiveSQLParser.KW_BOOLEAN:
            case HiveSQLParser.KW_CHAR:
            case HiveSQLParser.KW_DATE:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DECIMAL:
            case HiveSQLParser.KW_DOUBLE:
            case HiveSQLParser.KW_FLOAT:
            case HiveSQLParser.KW_INT:
            case HiveSQLParser.KW_REAL:
            case HiveSQLParser.KW_SMALLINT:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_TIMESTAMP:
            case HiveSQLParser.KW_TIMESTAMPLOCALTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_VARCHAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2632;
                this.primitiveType();
                }
                break;
            case HiveSQLParser.KW_ARRAY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2633;
                this.listType();
                }
                break;
            case HiveSQLParser.KW_STRUCT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2634;
                this.structType();
                }
                break;
            case HiveSQLParser.KW_MAP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2635;
                this.mapType();
                }
                break;
            case HiveSQLParser.KW_UNIONTYPE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2636;
                this.unionType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primitiveType(): PrimitiveTypeContext {
        let localContext = new PrimitiveTypeContext(this.context, this.state);
        this.enterRule(localContext, 374, HiveSQLParser.RULE_primitiveType);
        let _la: number;
        try {
            this.state = 2675;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2639;
                this.match(HiveSQLParser.KW_TINYINT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2640;
                this.match(HiveSQLParser.KW_SMALLINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2641;
                this.match(HiveSQLParser.KW_INT);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2642;
                this.match(HiveSQLParser.KW_BIGINT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2643;
                this.match(HiveSQLParser.KW_BOOLEAN);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2644;
                this.match(HiveSQLParser.KW_FLOAT);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2645;
                this.match(HiveSQLParser.KW_REAL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2646;
                this.match(HiveSQLParser.KW_DOUBLE);
                this.state = 2648;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 239) {
                    {
                    this.state = 2647;
                    this.match(HiveSQLParser.KW_PRECISION);
                    }
                }

                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2650;
                this.match(HiveSQLParser.KW_DATE);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2651;
                this.match(HiveSQLParser.KW_DATETIME);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2652;
                this.match(HiveSQLParser.KW_TIMESTAMP);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2653;
                this.match(HiveSQLParser.KW_TIMESTAMPLOCALTZ);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2654;
                this.match(HiveSQLParser.KW_TIMESTAMP);
                this.state = 2655;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 2656;
                this.match(HiveSQLParser.KW_LOCAL);
                this.state = 2657;
                this.match(HiveSQLParser.KW_TIME);
                this.state = 2658;
                this.match(HiveSQLParser.KW_ZONE);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2659;
                this.match(HiveSQLParser.KW_STRING);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2660;
                this.match(HiveSQLParser.KW_BINARY);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2661;
                this.match(HiveSQLParser.KW_DECIMAL);
                this.state = 2669;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387) {
                    {
                    this.state = 2662;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 2663;
                    localContext._prec = this.match(HiveSQLParser.Number);
                    this.state = 2666;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 385) {
                        {
                        this.state = 2664;
                        this.match(HiveSQLParser.COMMA);
                        this.state = 2665;
                        localContext._scale = this.match(HiveSQLParser.Number);
                        }
                    }

                    this.state = 2668;
                    this.match(HiveSQLParser.RPAREN);
                    }
                }

                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2671;
                _la = this.tokenStream.LA(1);
                if(!(_la === 39 || _la === 366)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2672;
                this.match(HiveSQLParser.LPAREN);
                this.state = 2673;
                localContext._length = this.match(HiveSQLParser.Number);
                this.state = 2674;
                this.match(HiveSQLParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listType(): ListTypeContext {
        let localContext = new ListTypeContext(this.context, this.state);
        this.enterRule(localContext, 376, HiveSQLParser.RULE_listType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2677;
            this.match(HiveSQLParser.KW_ARRAY);
            this.state = 2678;
            this.match(HiveSQLParser.LESSTHAN);
            this.state = 2679;
            this.type_();
            this.state = 2680;
            this.match(HiveSQLParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public structType(): StructTypeContext {
        let localContext = new StructTypeContext(this.context, this.state);
        this.enterRule(localContext, 378, HiveSQLParser.RULE_structType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2682;
            this.match(HiveSQLParser.KW_STRUCT);
            this.state = 2683;
            this.match(HiveSQLParser.LESSTHAN);
            this.state = 2684;
            this.columnNameColonTypeList();
            this.state = 2685;
            this.match(HiveSQLParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mapType(): MapTypeContext {
        let localContext = new MapTypeContext(this.context, this.state);
        this.enterRule(localContext, 380, HiveSQLParser.RULE_mapType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2687;
            this.match(HiveSQLParser.KW_MAP);
            this.state = 2688;
            this.match(HiveSQLParser.LESSTHAN);
            this.state = 2689;
            localContext._left = this.primitiveType();
            this.state = 2690;
            this.match(HiveSQLParser.COMMA);
            this.state = 2691;
            localContext._right = this.type_();
            this.state = 2692;
            this.match(HiveSQLParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unionType(): UnionTypeContext {
        let localContext = new UnionTypeContext(this.context, this.state);
        this.enterRule(localContext, 382, HiveSQLParser.RULE_unionType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2694;
            this.match(HiveSQLParser.KW_UNIONTYPE);
            this.state = 2695;
            this.match(HiveSQLParser.LESSTHAN);
            this.state = 2696;
            this.colTypeList();
            this.state = 2697;
            this.match(HiveSQLParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setOperator(): SetOperatorContext {
        let localContext = new SetOperatorContext(this.context, this.state);
        this.enterRule(localContext, 384, HiveSQLParser.RULE_setOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2699;
            _la = this.tokenStream.LA(1);
            if(!(_la === 107 || _la === 158 || _la === 198 || _la === 346)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2701;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 7 || _la === 92) {
                {
                this.state = 2700;
                _la = this.tokenStream.LA(1);
                if(!(_la === 7 || _la === 92)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryStatementExpression(): QueryStatementExpressionContext {
        let localContext = new QueryStatementExpressionContext(this.context, this.state);
        this.enterRule(localContext, 386, HiveSQLParser.RULE_queryStatementExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2704;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 2703;
                localContext._w = this.withClause();
                }
            }

            this.state = 2706;
            this.queryStatementExpressionBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryStatementExpressionBody(): QueryStatementExpressionBodyContext {
        let localContext = new QueryStatementExpressionBodyContext(this.context, this.state);
        this.enterRule(localContext, 388, HiveSQLParser.RULE_queryStatementExpressionBody);
        try {
            this.state = 2710;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_FROM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2708;
                this.fromStatement();
                }
                break;
            case HiveSQLParser.KW_INSERT:
            case HiveSQLParser.KW_MAP:
            case HiveSQLParser.KW_REDUCE:
            case HiveSQLParser.KW_SELECT:
            case HiveSQLParser.KW_VALUES:
            case HiveSQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2709;
                this.regularBody();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 390, HiveSQLParser.RULE_withClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2712;
            this.match(HiveSQLParser.KW_WITH);
            this.state = 2713;
            this.cteStatement();
            this.state = 2718;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2714;
                this.match(HiveSQLParser.COMMA);
                this.state = 2715;
                this.cteStatement();
                }
                }
                this.state = 2720;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cteStatement(): CteStatementContext {
        let localContext = new CteStatementContext(this.context, this.state);
        this.enterRule(localContext, 392, HiveSQLParser.RULE_cteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2721;
            this.id_();
            this.state = 2726;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 2722;
                this.match(HiveSQLParser.LPAREN);
                this.state = 2723;
                localContext._colAliases = this.columnNameList();
                this.state = 2724;
                this.match(HiveSQLParser.RPAREN);
                }
            }

            this.state = 2728;
            this.match(HiveSQLParser.KW_AS);
            this.state = 2729;
            this.match(HiveSQLParser.LPAREN);
            this.state = 2730;
            this.queryStatementExpression();
            this.state = 2731;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromStatement(): FromStatementContext {
        let localContext = new FromStatementContext(this.context, this.state);
        this.enterRule(localContext, 394, HiveSQLParser.RULE_fromStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2733;
            this.singleFromStatement();
            this.state = 2739;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 107 || _la === 158 || _la === 198 || _la === 346) {
                {
                {
                this.state = 2734;
                localContext._u = this.setOperator();
                this.state = 2735;
                localContext._r = this.singleFromStatement();
                }
                }
                this.state = 2741;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleFromStatement(): SingleFromStatementContext {
        let localContext = new SingleFromStatementContext(this.context, this.state);
        this.enterRule(localContext, 396, HiveSQLParser.RULE_singleFromStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2742;
            this.fromClause();
            this.state = 2744;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 2743;
                localContext._body = this.body();
                localContext._b.push(localContext._body!);
                }
                }
                this.state = 2746;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 156 || _la === 191 || _la === 259 || _la === 289);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public regularBody(): RegularBodyContext {
        let localContext = new RegularBodyContext(this.context, this.state);
        this.enterRule(localContext, 398, HiveSQLParser.RULE_regularBody);
        try {
            this.state = 2752;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_INSERT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2748;
                localContext._i = this.insertClause();
                this.state = 2749;
                localContext._s = this.selectStatement();
                }
                break;
            case HiveSQLParser.KW_MAP:
            case HiveSQLParser.KW_REDUCE:
            case HiveSQLParser.KW_SELECT:
            case HiveSQLParser.KW_VALUES:
            case HiveSQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2751;
                this.selectStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomSelectStatement(): AtomSelectStatementContext {
        let localContext = new AtomSelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 400, HiveSQLParser.RULE_atomSelectStatement);
        let _la: number;
        try {
            this.state = 2778;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_MAP:
            case HiveSQLParser.KW_REDUCE:
            case HiveSQLParser.KW_SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2754;
                localContext._s = this.selectClause();
                this.state = 2756;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 134) {
                    {
                    this.state = 2755;
                    localContext._f = this.fromClause();
                    }
                }

                this.state = 2759;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
                case 1:
                    {
                    this.state = 2758;
                    localContext._w = this.whereClause();
                    }
                    break;
                }
                this.state = 2762;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139) {
                    {
                    this.state = 2761;
                    localContext._g = this.groupByClause();
                    }
                }

                this.state = 2765;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 141) {
                    {
                    this.state = 2764;
                    localContext._h = this.havingClause();
                    }
                }

                this.state = 2768;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 375) {
                    {
                    this.state = 2767;
                    localContext._win = this.window_clause();
                    }
                }

                this.state = 2771;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 247) {
                    {
                    this.state = 2770;
                    localContext._q = this.qualifyClause();
                    }
                }

                }
                break;
            case HiveSQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2773;
                this.match(HiveSQLParser.LPAREN);
                this.state = 2774;
                this.selectStatement();
                this.state = 2775;
                this.match(HiveSQLParser.RPAREN);
                }
                break;
            case HiveSQLParser.KW_VALUES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2777;
                this.valuesSource();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 402, HiveSQLParser.RULE_selectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2780;
            localContext._a = this.atomSelectStatement();
            this.state = 2782;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 107 || _la === 158 || _la === 198 || _la === 346) {
                {
                this.state = 2781;
                localContext._set_ = this.setOpSelectStatement();
                }
            }

            this.state = 2785;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 220) {
                {
                this.state = 2784;
                localContext._o = this.orderByClause();
                }
            }

            this.state = 2788;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 41) {
                {
                this.state = 2787;
                localContext._c = this.clusterByClause();
                }
            }

            this.state = 2791;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 93) {
                {
                this.state = 2790;
                localContext._d = this.distributeByClause();
                }
            }

            this.state = 2794;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 373) {
                {
                this.state = 2793;
                localContext._where = this.whereClause();
                }
            }

            this.state = 2797;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 304) {
                {
                this.state = 2796;
                localContext._sort = this.sortByClause();
                }
            }

            this.state = 2800;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 178) {
                {
                this.state = 2799;
                localContext._l = this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setOpSelectStatement(): SetOpSelectStatementContext {
        let localContext = new SetOpSelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 404, HiveSQLParser.RULE_setOpSelectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2805;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 2802;
                localContext._u = this.setOperator();
                this.state = 2803;
                localContext._b = this.atomSelectStatement();
                }
                }
                this.state = 2807;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 107 || _la === 158 || _la === 198 || _la === 346);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext {
        let localContext = new SelectStatementWithCTEContext(this.context, this.state);
        this.enterRule(localContext, 406, HiveSQLParser.RULE_selectStatementWithCTE);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2810;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 2809;
                localContext._w = this.withClause();
                }
            }

            this.state = 2812;
            this.selectStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public body(): BodyContext {
        let localContext = new BodyContext(this.context, this.state);
        this.enterRule(localContext, 408, HiveSQLParser.RULE_body);
        let _la: number;
        try {
            this.state = 2883;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_INSERT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2814;
                this.insertClause();
                this.state = 2815;
                this.selectClause();
                this.state = 2817;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 172 || _la === 385) {
                    {
                    this.state = 2816;
                    this.lateralView();
                    }
                }

                this.state = 2820;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 373) {
                    {
                    this.state = 2819;
                    this.whereClause();
                    }
                }

                this.state = 2823;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139) {
                    {
                    this.state = 2822;
                    this.groupByClause();
                    }
                }

                this.state = 2826;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 141) {
                    {
                    this.state = 2825;
                    this.havingClause();
                    }
                }

                this.state = 2829;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 375) {
                    {
                    this.state = 2828;
                    this.window_clause();
                    }
                }

                this.state = 2832;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 247) {
                    {
                    this.state = 2831;
                    this.qualifyClause();
                    }
                }

                this.state = 2835;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 2834;
                    this.orderByClause();
                    }
                }

                this.state = 2838;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 41) {
                    {
                    this.state = 2837;
                    this.clusterByClause();
                    }
                }

                this.state = 2841;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93) {
                    {
                    this.state = 2840;
                    this.distributeByClause();
                    }
                }

                this.state = 2844;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 2843;
                    this.sortByClause();
                    }
                }

                this.state = 2847;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 2846;
                    this.limitClause();
                    }
                }

                }
                break;
            case HiveSQLParser.KW_MAP:
            case HiveSQLParser.KW_REDUCE:
            case HiveSQLParser.KW_SELECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2849;
                this.selectClause();
                this.state = 2851;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 172 || _la === 385) {
                    {
                    this.state = 2850;
                    this.lateralView();
                    }
                }

                this.state = 2854;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 373) {
                    {
                    this.state = 2853;
                    this.whereClause();
                    }
                }

                this.state = 2857;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139) {
                    {
                    this.state = 2856;
                    this.groupByClause();
                    }
                }

                this.state = 2860;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 141) {
                    {
                    this.state = 2859;
                    this.havingClause();
                    }
                }

                this.state = 2863;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 375) {
                    {
                    this.state = 2862;
                    this.window_clause();
                    }
                }

                this.state = 2866;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 247) {
                    {
                    this.state = 2865;
                    this.qualifyClause();
                    }
                }

                this.state = 2869;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 2868;
                    this.orderByClause();
                    }
                }

                this.state = 2872;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 41) {
                    {
                    this.state = 2871;
                    this.clusterByClause();
                    }
                }

                this.state = 2875;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93) {
                    {
                    this.state = 2874;
                    this.distributeByClause();
                    }
                }

                this.state = 2878;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 2877;
                    this.sortByClause();
                    }
                }

                this.state = 2881;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 2880;
                    this.limitClause();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertClause(): InsertClauseContext {
        let localContext = new InsertClauseContext(this.context, this.state);
        this.enterRule(localContext, 410, HiveSQLParser.RULE_insertClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2885;
            this.match(HiveSQLParser.KW_INSERT);
            this.state = 2902;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_OVERWRITE:
                {
                this.state = 2886;
                this.match(HiveSQLParser.KW_OVERWRITE);
                this.state = 2887;
                this.destination();
                this.state = 2889;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 2888;
                    this.ifNotExists();
                    }
                }

                }
                break;
            case HiveSQLParser.KW_INTO:
                {
                this.state = 2891;
                this.match(HiveSQLParser.KW_INTO);
                this.state = 2893;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319) {
                    {
                    this.state = 2892;
                    this.match(HiveSQLParser.KW_TABLE);
                    }
                }

                this.state = 2895;
                this.tableOrPartition();
                this.state = 2900;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 294, this.context) ) {
                case 1:
                    {
                    this.state = 2896;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 2897;
                    localContext._targetCols = this.columnNameList();
                    this.state = 2898;
                    this.match(HiveSQLParser.RPAREN);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public destination(): DestinationContext {
        let localContext = new DestinationContext(this.context, this.state);
        this.enterRule(localContext, 412, HiveSQLParser.RULE_destination);
        let _la: number;
        try {
            this.state = 2917;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2905;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 181) {
                    {
                    this.state = 2904;
                    localContext._local = this.match(HiveSQLParser.KW_LOCAL);
                    }
                }

                this.state = 2907;
                this.match(HiveSQLParser.KW_DIRECTORY);
                this.state = 2908;
                this.match(HiveSQLParser.StringLiteral);
                this.state = 2910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 282) {
                    {
                    this.state = 2909;
                    this.tableRowFormat();
                    }
                }

                this.state = 2913;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 2912;
                    this.tableFileFormat();
                    }
                }

                }
                break;
            case HiveSQLParser.KW_TABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2915;
                this.match(HiveSQLParser.KW_TABLE);
                this.state = 2916;
                this.tableOrPartition();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 414, HiveSQLParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2919;
            this.match(HiveSQLParser.KW_LIMIT);
            this.state = 2928;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 301, this.context) ) {
            case 1:
                {
                this.state = 2922;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 300, this.context) ) {
                case 1:
                    {
                    this.state = 2920;
                    localContext._offset = this.match(HiveSQLParser.Number);
                    this.state = 2921;
                    this.match(HiveSQLParser.COMMA);
                    }
                    break;
                }
                this.state = 2924;
                localContext._num = this.match(HiveSQLParser.Number);
                }
                break;
            case 2:
                {
                this.state = 2925;
                localContext._num = this.match(HiveSQLParser.Number);
                this.state = 2926;
                this.match(HiveSQLParser.KW_OFFSET);
                this.state = 2927;
                localContext._offset = this.match(HiveSQLParser.Number);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteStatement(): DeleteStatementContext {
        let localContext = new DeleteStatementContext(this.context, this.state);
        this.enterRule(localContext, 416, HiveSQLParser.RULE_deleteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2930;
            this.match(HiveSQLParser.KW_DELETE);
            this.state = 2931;
            this.match(HiveSQLParser.KW_FROM);
            this.state = 2932;
            this.tableName();
            this.state = 2934;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 373) {
                {
                this.state = 2933;
                this.whereClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAssignmentClause(): ColumnAssignmentClauseContext {
        let localContext = new ColumnAssignmentClauseContext(this.context, this.state);
        this.enterRule(localContext, 418, HiveSQLParser.RULE_columnAssignmentClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2936;
            this.tableOrColumn();
            this.state = 2937;
            this.match(HiveSQLParser.EQUAL);
            this.state = 2938;
            this.precedencePlusExpressionOrDefault();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedencePlusExpressionOrDefault(): PrecedencePlusExpressionOrDefaultContext {
        let localContext = new PrecedencePlusExpressionOrDefaultContext(this.context, this.state);
        this.enterRule(localContext, 420, HiveSQLParser.RULE_precedencePlusExpressionOrDefault);
        try {
            this.state = 2942;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 303, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2940;
                this.defaultValue();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2941;
                this.precedencePlusExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setColumnsClause(): SetColumnsClauseContext {
        let localContext = new SetColumnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 422, HiveSQLParser.RULE_setColumnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2944;
            this.match(HiveSQLParser.KW_SET);
            this.state = 2945;
            this.columnAssignmentClause();
            this.state = 2950;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 2946;
                this.match(HiveSQLParser.COMMA);
                this.state = 2947;
                this.columnAssignmentClause();
                }
                }
                this.state = 2952;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateStatement(): UpdateStatementContext {
        let localContext = new UpdateStatementContext(this.context, this.state);
        this.enterRule(localContext, 424, HiveSQLParser.RULE_updateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2953;
            this.match(HiveSQLParser.KW_UPDATE);
            this.state = 2954;
            this.tableName();
            this.state = 2955;
            this.setColumnsClause();
            this.state = 2957;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 373) {
                {
                this.state = 2956;
                this.whereClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlTransactionStatement(): SqlTransactionStatementContext {
        let localContext = new SqlTransactionStatementContext(this.context, this.state);
        this.enterRule(localContext, 426, HiveSQLParser.RULE_sqlTransactionStatement);
        try {
            this.state = 2963;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_START:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2959;
                this.startTransactionStatement();
                }
                break;
            case HiveSQLParser.KW_COMMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2960;
                this.commitStatement();
                }
                break;
            case HiveSQLParser.KW_ROLLBACK:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2961;
                this.rollbackStatement();
                }
                break;
            case HiveSQLParser.KW_SET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2962;
                this.setAutoCommitStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public startTransactionStatement(): StartTransactionStatementContext {
        let localContext = new StartTransactionStatementContext(this.context, this.state);
        this.enterRule(localContext, 428, HiveSQLParser.RULE_startTransactionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2965;
            this.match(HiveSQLParser.KW_START);
            this.state = 2966;
            this.match(HiveSQLParser.KW_TRANSACTION);
            this.state = 2975;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 162 || _la === 252) {
                {
                this.state = 2967;
                this.transactionMode();
                this.state = 2972;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 385) {
                    {
                    {
                    this.state = 2968;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 2969;
                    this.transactionMode();
                    }
                    }
                    this.state = 2974;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionMode(): TransactionModeContext {
        let localContext = new TransactionModeContext(this.context, this.state);
        this.enterRule(localContext, 430, HiveSQLParser.RULE_transactionMode);
        try {
            this.state = 2979;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ISOLATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2977;
                this.isolationLevel();
                }
                break;
            case HiveSQLParser.KW_READ:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2978;
                this.transactionAccessMode();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionAccessMode(): TransactionAccessModeContext {
        let localContext = new TransactionAccessModeContext(this.context, this.state);
        this.enterRule(localContext, 432, HiveSQLParser.RULE_transactionAccessMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2981;
            this.match(HiveSQLParser.KW_READ);
            this.state = 2982;
            _la = this.tokenStream.LA(1);
            if(!(_la === 216 || _la === 380)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isolationLevel(): IsolationLevelContext {
        let localContext = new IsolationLevelContext(this.context, this.state);
        this.enterRule(localContext, 434, HiveSQLParser.RULE_isolationLevel);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2984;
            this.match(HiveSQLParser.KW_ISOLATION);
            this.state = 2985;
            this.match(HiveSQLParser.KW_LEVEL);
            this.state = 2986;
            this.levelOfIsolation();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        let localContext = new LevelOfIsolationContext(this.context, this.state);
        this.enterRule(localContext, 436, HiveSQLParser.RULE_levelOfIsolation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2988;
            this.match(HiveSQLParser.KW_SNAPSHOT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commitStatement(): CommitStatementContext {
        let localContext = new CommitStatementContext(this.context, this.state);
        this.enterRule(localContext, 438, HiveSQLParser.RULE_commitStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2990;
            this.match(HiveSQLParser.KW_COMMIT);
            this.state = 2992;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 378) {
                {
                this.state = 2991;
                this.match(HiveSQLParser.KW_WORK);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollbackStatement(): RollbackStatementContext {
        let localContext = new RollbackStatementContext(this.context, this.state);
        this.enterRule(localContext, 440, HiveSQLParser.RULE_rollbackStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2994;
            this.match(HiveSQLParser.KW_ROLLBACK);
            this.state = 2996;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 378) {
                {
                this.state = 2995;
                this.match(HiveSQLParser.KW_WORK);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setAutoCommitStatement(): SetAutoCommitStatementContext {
        let localContext = new SetAutoCommitStatementContext(this.context, this.state);
        this.enterRule(localContext, 442, HiveSQLParser.RULE_setAutoCommitStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2998;
            this.match(HiveSQLParser.KW_SET);
            this.state = 2999;
            this.match(HiveSQLParser.KW_AUTOCOMMIT);
            this.state = 3000;
            this.booleanValueTok();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public abortTransactionStatement(): AbortTransactionStatementContext {
        let localContext = new AbortTransactionStatementContext(this.context, this.state);
        this.enterRule(localContext, 444, HiveSQLParser.RULE_abortTransactionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3002;
            this.match(HiveSQLParser.KW_ABORT);
            this.state = 3003;
            this.match(HiveSQLParser.KW_TRANSACTIONS);
            this.state = 3005;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 3004;
                this.match(HiveSQLParser.Number);
                }
                }
                this.state = 3007;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 419);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public abortCompactionStatement(): AbortCompactionStatementContext {
        let localContext = new AbortCompactionStatementContext(this.context, this.state);
        this.enterRule(localContext, 446, HiveSQLParser.RULE_abortCompactionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3009;
            this.match(HiveSQLParser.KW_ABORT);
            this.state = 3010;
            this.match(HiveSQLParser.KW_COMPACTIONS);
            this.state = 3012;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 3011;
                this.match(HiveSQLParser.Number);
                }
                }
                this.state = 3014;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 419);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeStatement(): MergeStatementContext {
        let localContext = new MergeStatementContext(this.context, this.state);
        this.enterRule(localContext, 448, HiveSQLParser.RULE_mergeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3016;
            this.match(HiveSQLParser.KW_MERGE);
            this.state = 3018;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 424) {
                {
                this.state = 3017;
                this.match(HiveSQLParser.QUERY_HINT);
                }
            }

            this.state = 3020;
            this.match(HiveSQLParser.KW_INTO);
            this.state = 3021;
            this.tableName();
            this.state = 3026;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252585854) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3236739107) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4152217853) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815305069) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 968573415) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750079) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 1004889323) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4138967) !== 0) || _la === 420) {
                {
                this.state = 3023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3022;
                    this.match(HiveSQLParser.KW_AS);
                    }
                }

                this.state = 3025;
                this.id_();
                }
            }

            this.state = 3028;
            this.match(HiveSQLParser.KW_USING);
            this.state = 3029;
            this.joinSourcePart();
            this.state = 3030;
            this.match(HiveSQLParser.KW_ON);
            this.state = 3031;
            this.expression();
            this.state = 3032;
            this.whenClauses();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClauses(): WhenClausesContext {
        let localContext = new WhenClausesContext(this.context, this.state);
        this.enterRule(localContext, 450, HiveSQLParser.RULE_whenClauses);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3038;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 318, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 3036;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 317, this.context) ) {
                    case 1:
                        {
                        this.state = 3034;
                        this.whenMatchedAndClause();
                        }
                        break;
                    case 2:
                        {
                        this.state = 3035;
                        this.whenMatchedThenClause();
                        }
                        break;
                    }
                    }
                }
                this.state = 3040;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 318, this.context);
            }
            this.state = 3042;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 372) {
                {
                this.state = 3041;
                this.whenNotMatchedClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenNotMatchedClause(): WhenNotMatchedClauseContext {
        let localContext = new WhenNotMatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 452, HiveSQLParser.RULE_whenNotMatchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3044;
            this.match(HiveSQLParser.KW_WHEN);
            this.state = 3045;
            this.match(HiveSQLParser.KW_NOT);
            this.state = 3046;
            this.match(HiveSQLParser.KW_MATCHED);
            this.state = 3049;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 11) {
                {
                this.state = 3047;
                this.match(HiveSQLParser.KW_AND);
                this.state = 3048;
                this.expression();
                }
            }

            this.state = 3051;
            this.match(HiveSQLParser.KW_THEN);
            this.state = 3052;
            this.match(HiveSQLParser.KW_INSERT);
            this.state = 3054;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 3053;
                localContext._targetCols = this.columnParenthesesList();
                }
            }

            this.state = 3056;
            this.match(HiveSQLParser.KW_VALUES);
            this.state = 3057;
            this.valueRowConstructor();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenMatchedAndClause(): WhenMatchedAndClauseContext {
        let localContext = new WhenMatchedAndClauseContext(this.context, this.state);
        this.enterRule(localContext, 454, HiveSQLParser.RULE_whenMatchedAndClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3059;
            this.match(HiveSQLParser.KW_WHEN);
            this.state = 3060;
            this.match(HiveSQLParser.KW_MATCHED);
            this.state = 3061;
            this.match(HiveSQLParser.KW_AND);
            this.state = 3062;
            this.expression();
            this.state = 3063;
            this.match(HiveSQLParser.KW_THEN);
            this.state = 3064;
            this.updateOrDelete();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenMatchedThenClause(): WhenMatchedThenClauseContext {
        let localContext = new WhenMatchedThenClauseContext(this.context, this.state);
        this.enterRule(localContext, 456, HiveSQLParser.RULE_whenMatchedThenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3066;
            this.match(HiveSQLParser.KW_WHEN);
            this.state = 3067;
            this.match(HiveSQLParser.KW_MATCHED);
            this.state = 3068;
            this.match(HiveSQLParser.KW_THEN);
            this.state = 3069;
            this.updateOrDelete();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateOrDelete(): UpdateOrDeleteContext {
        let localContext = new UpdateOrDeleteContext(this.context, this.state);
        this.enterRule(localContext, 458, HiveSQLParser.RULE_updateOrDelete);
        try {
            this.state = 3074;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_UPDATE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3071;
                this.match(HiveSQLParser.KW_UPDATE);
                this.state = 3072;
                this.setColumnsClause();
                }
                break;
            case HiveSQLParser.KW_DELETE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3073;
                this.match(HiveSQLParser.KW_DELETE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public killQueryStatement(): KillQueryStatementContext {
        let localContext = new KillQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 460, HiveSQLParser.RULE_killQueryStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3076;
            this.match(HiveSQLParser.KW_KILL);
            this.state = 3077;
            this.match(HiveSQLParser.KW_QUERY);
            this.state = 3079;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 3078;
                this.match(HiveSQLParser.StringLiteral);
                }
                }
                this.state = 3081;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 414);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactionId(): CompactionIdContext {
        let localContext = new CompactionIdContext(this.context, this.state);
        this.enterRule(localContext, 462, HiveSQLParser.RULE_compactionId);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3083;
            this.match(HiveSQLParser.KW_COMPACT_ID);
            this.state = 3084;
            this.match(HiveSQLParser.EQUAL);
            this.state = 3085;
            localContext._compactId = this.match(HiveSQLParser.Number);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactionPool(): CompactionPoolContext {
        let localContext = new CompactionPoolContext(this.context, this.state);
        this.enterRule(localContext, 464, HiveSQLParser.RULE_compactionPool);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3087;
            this.match(HiveSQLParser.KW_POOL);
            this.state = 3088;
            localContext._poolName = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactionType(): CompactionTypeContext {
        let localContext = new CompactionTypeContext(this.context, this.state);
        this.enterRule(localContext, 466, HiveSQLParser.RULE_compactionType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3090;
            this.match(HiveSQLParser.KW_TYPE);
            this.state = 3091;
            localContext._compactType = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactionStatus(): CompactionStatusContext {
        let localContext = new CompactionStatusContext(this.context, this.state);
        this.enterRule(localContext, 468, HiveSQLParser.RULE_compactionStatus);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3093;
            this.match(HiveSQLParser.KW_STATUS);
            this.state = 3094;
            localContext._status = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatement(): AlterStatementContext {
        let localContext = new AlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 470, HiveSQLParser.RULE_alterStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3096;
            this.match(HiveSQLParser.KW_ALTER);
            this.state = 3118;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_TABLE:
                {
                this.state = 3097;
                this.match(HiveSQLParser.KW_TABLE);
                this.state = 3098;
                this.tableName();
                this.state = 3099;
                this.alterTableStatementSuffix();
                }
                break;
            case HiveSQLParser.KW_VIEW:
                {
                this.state = 3101;
                this.match(HiveSQLParser.KW_VIEW);
                this.state = 3102;
                this.tableName();
                this.state = 3104;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3103;
                    this.match(HiveSQLParser.KW_AS);
                    }
                }

                this.state = 3106;
                this.alterViewStatementSuffix();
                }
                break;
            case HiveSQLParser.KW_MATERIALIZED:
                {
                this.state = 3108;
                this.match(HiveSQLParser.KW_MATERIALIZED);
                this.state = 3109;
                this.match(HiveSQLParser.KW_VIEW);
                this.state = 3110;
                localContext._tableNameTree = this.tableName();
                this.state = 3111;
                this.alterMaterializedViewStatementSuffix();
                }
                break;
            case HiveSQLParser.KW_DATABASE:
            case HiveSQLParser.KW_SCHEMA:
                {
                this.state = 3113;
                this.db_schema();
                this.state = 3114;
                this.alterDatabaseStatementSuffix();
                }
                break;
            case HiveSQLParser.KW_DATACONNECTOR:
                {
                this.state = 3116;
                this.match(HiveSQLParser.KW_DATACONNECTOR);
                this.state = 3117;
                this.alterDataConnectorStatementSuffix();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableStatementSuffix(): AlterTableStatementSuffixContext {
        let localContext = new AlterTableStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 472, HiveSQLParser.RULE_alterTableStatementSuffix);
        try {
            this.state = 3139;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 326, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3120;
                this.alterStatementSuffixRename();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3121;
                this.alterStatementSuffixDropPartitions();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3122;
                this.alterStatementSuffixAddPartitions();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3123;
                this.alterStatementSuffixTouch();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3124;
                this.alterStatementSuffixArchive();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3125;
                this.alterStatementSuffixUnArchive();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3126;
                this.alterStatementSuffixProperties();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3127;
                this.alterStatementSuffixSkewedby();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3128;
                this.alterStatementSuffixExchangePartition();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3129;
                this.alterStatementPartitionKeyType();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3130;
                this.alterStatementSuffixDropConstraint();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3131;
                this.alterStatementSuffixAddConstraint();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3132;
                this.alterTblPartitionStatementSuffix();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3133;
                this.partitionSpec();
                this.state = 3134;
                this.alterTblPartitionStatementSuffix();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3136;
                this.alterStatementSuffixSetOwner();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3137;
                this.alterStatementSuffixSetPartSpec();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3138;
                this.alterStatementSuffixExecute();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTblPartitionStatementSuffix(): AlterTblPartitionStatementSuffixContext {
        let localContext = new AlterTblPartitionStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 474, HiveSQLParser.RULE_alterTblPartitionStatementSuffix);
        try {
            this.state = 3155;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 327, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3141;
                this.alterStatementSuffixFileFormat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3142;
                this.alterStatementSuffixLocation();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3143;
                this.alterStatementSuffixMergeFiles();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3144;
                this.alterStatementSuffixSerdeProperties();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3145;
                this.alterStatementSuffixRenamePart();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3146;
                this.alterStatementSuffixBucketNum();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3147;
                this.alterTblPartitionStatementSuffixSkewedLocation();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3148;
                this.alterStatementSuffixClusterbySortby();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3149;
                this.alterStatementSuffixCompact();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3150;
                this.alterStatementSuffixUpdateStatsCol();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3151;
                this.alterStatementSuffixUpdateStats();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3152;
                this.alterStatementSuffixRenameCol();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3153;
                this.alterStatementSuffixAddCol();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3154;
                this.alterStatementSuffixUpdateColumns();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementPartitionKeyType(): AlterStatementPartitionKeyTypeContext {
        let localContext = new AlterStatementPartitionKeyTypeContext(this.context, this.state);
        this.enterRule(localContext, 476, HiveSQLParser.RULE_alterStatementPartitionKeyType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3157;
            this.match(HiveSQLParser.KW_PARTITION);
            this.state = 3158;
            this.match(HiveSQLParser.KW_COLUMN);
            this.state = 3159;
            this.match(HiveSQLParser.LPAREN);
            this.state = 3160;
            this.columnNameType();
            this.state = 3161;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterViewStatementSuffix(): AlterViewStatementSuffixContext {
        let localContext = new AlterViewStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 478, HiveSQLParser.RULE_alterViewStatementSuffix);
        try {
            this.state = 3168;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_SET:
            case HiveSQLParser.KW_UNSET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3163;
                this.alterViewSuffixProperties();
                }
                break;
            case HiveSQLParser.KW_RENAME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3164;
                this.alterStatementSuffixRename();
                }
                break;
            case HiveSQLParser.KW_ADD:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3165;
                this.alterStatementSuffixAddPartitions();
                }
                break;
            case HiveSQLParser.KW_DROP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3166;
                this.alterStatementSuffixDropPartitions();
                }
                break;
            case HiveSQLParser.KW_MAP:
            case HiveSQLParser.KW_REDUCE:
            case HiveSQLParser.KW_SELECT:
            case HiveSQLParser.KW_VALUES:
            case HiveSQLParser.KW_WITH:
            case HiveSQLParser.LPAREN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3167;
                this.selectStatementWithCTE();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterMaterializedViewStatementSuffix(): AlterMaterializedViewStatementSuffixContext {
        let localContext = new AlterMaterializedViewStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 480, HiveSQLParser.RULE_alterMaterializedViewStatementSuffix);
        try {
            this.state = 3172;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_ENABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3170;
                this.alterMaterializedViewSuffixRewrite();
                }
                break;
            case HiveSQLParser.KW_REBUILD:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3171;
                this.alterMaterializedViewSuffixRebuild();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterMaterializedViewSuffixRewrite(): AlterMaterializedViewSuffixRewriteContext {
        let localContext = new AlterMaterializedViewSuffixRewriteContext(this.context, this.state);
        this.enterRule(localContext, 482, HiveSQLParser.RULE_alterMaterializedViewSuffixRewrite);
        try {
            this.state = 3176;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ENABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3174;
                localContext._mvRewriteFlag = this.rewriteEnabled();
                }
                break;
            case HiveSQLParser.KW_DISABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3175;
                localContext._mvRewriteFlag2 = this.rewriteDisabled();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterMaterializedViewSuffixRebuild(): AlterMaterializedViewSuffixRebuildContext {
        let localContext = new AlterMaterializedViewSuffixRebuildContext(this.context, this.state);
        this.enterRule(localContext, 484, HiveSQLParser.RULE_alterMaterializedViewSuffixRebuild);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3178;
            this.match(HiveSQLParser.KW_REBUILD);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabaseStatementSuffix(): AlterDatabaseStatementSuffixContext {
        let localContext = new AlterDatabaseStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 486, HiveSQLParser.RULE_alterDatabaseStatementSuffix);
        try {
            this.state = 3184;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 331, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3180;
                this.alterDatabaseSuffixProperties();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3181;
                this.alterDatabaseSuffixSetOwner();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3182;
                this.alterScopeProperties();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3183;
                this.alterDatabaseSuffixSetLocation();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabaseSuffixProperties(): AlterDatabaseSuffixPropertiesContext {
        let localContext = new AlterDatabaseSuffixPropertiesContext(this.context, this.state);
        this.enterRule(localContext, 488, HiveSQLParser.RULE_alterDatabaseSuffixProperties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3186;
            localContext._name = this.id_();
            this.state = 3187;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3188;
            this.match(HiveSQLParser.KW_DBPROPERTIES);
            this.state = 3189;
            this.dbProperties();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterScopeProperties(): AlterScopePropertiesContext {
        let localContext = new AlterScopePropertiesContext(this.context, this.state);
        this.enterRule(localContext, 490, HiveSQLParser.RULE_alterScopeProperties);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3191;
            localContext._name = this.match(HiveSQLParser.KW_SET);
            this.state = 3192;
            this.id_();
            this.state = 3197;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 3193;
                this.match(HiveSQLParser.COMMA);
                this.state = 3194;
                this.id_();
                }
                }
                this.state = 3199;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3200;
            this.match(HiveSQLParser.EQUAL);
            this.state = 3201;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabaseSuffixSetOwner(): AlterDatabaseSuffixSetOwnerContext {
        let localContext = new AlterDatabaseSuffixSetOwnerContext(this.context, this.state);
        this.enterRule(localContext, 492, HiveSQLParser.RULE_alterDatabaseSuffixSetOwner);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3203;
            localContext._dbName = this.id_();
            this.state = 3204;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3205;
            this.match(HiveSQLParser.KW_OWNER);
            this.state = 3206;
            this.principalName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabaseSuffixSetLocation(): AlterDatabaseSuffixSetLocationContext {
        let localContext = new AlterDatabaseSuffixSetLocationContext(this.context, this.state);
        this.enterRule(localContext, 494, HiveSQLParser.RULE_alterDatabaseSuffixSetLocation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3208;
            localContext._dbName = this.id_();
            this.state = 3209;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3210;
            _la = this.tokenStream.LA(1);
            if(!(_la === 182 || _la === 189)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3211;
            localContext._newLocation = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabaseSuffixSetManagedLocation(): AlterDatabaseSuffixSetManagedLocationContext {
        let localContext = new AlterDatabaseSuffixSetManagedLocationContext(this.context, this.state);
        this.enterRule(localContext, 496, HiveSQLParser.RULE_alterDatabaseSuffixSetManagedLocation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3213;
            localContext._dbName = this.id_();
            this.state = 3214;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3215;
            this.match(HiveSQLParser.KW_MANAGEDLOCATION);
            this.state = 3216;
            localContext._newLocation = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixRename(): AlterStatementSuffixRenameContext {
        let localContext = new AlterStatementSuffixRenameContext(this.context, this.state);
        this.enterRule(localContext, 498, HiveSQLParser.RULE_alterStatementSuffixRename);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3218;
            this.match(HiveSQLParser.KW_RENAME);
            this.state = 3219;
            this.match(HiveSQLParser.KW_TO);
            this.state = 3220;
            this.tableName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixAddCol(): AlterStatementSuffixAddColContext {
        let localContext = new AlterStatementSuffixAddColContext(this.context, this.state);
        this.enterRule(localContext, 500, HiveSQLParser.RULE_alterStatementSuffixAddCol);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3224;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ADD:
                {
                this.state = 3222;
                localContext._add = this.match(HiveSQLParser.KW_ADD);
                }
                break;
            case HiveSQLParser.KW_REPLACE:
                {
                this.state = 3223;
                localContext._replace = this.match(HiveSQLParser.KW_REPLACE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3226;
            this.match(HiveSQLParser.KW_COLUMNS);
            this.state = 3227;
            this.match(HiveSQLParser.LPAREN);
            this.state = 3228;
            this.columnNameTypeList();
            this.state = 3229;
            this.match(HiveSQLParser.RPAREN);
            this.state = 3231;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 273) {
                {
                this.state = 3230;
                this.restrictOrCascade();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixAddConstraint(): AlterStatementSuffixAddConstraintContext {
        let localContext = new AlterStatementSuffixAddConstraintContext(this.context, this.state);
        this.enterRule(localContext, 502, HiveSQLParser.RULE_alterStatementSuffixAddConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3233;
            this.match(HiveSQLParser.KW_ADD);
            this.state = 3236;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 335, this.context) ) {
            case 1:
                {
                this.state = 3234;
                localContext._fk = this.alterForeignKeyWithName();
                }
                break;
            case 2:
                {
                this.state = 3235;
                this.alterConstraintWithName();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixUpdateColumns(): AlterStatementSuffixUpdateColumnsContext {
        let localContext = new AlterStatementSuffixUpdateColumnsContext(this.context, this.state);
        this.enterRule(localContext, 504, HiveSQLParser.RULE_alterStatementSuffixUpdateColumns);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3238;
            this.match(HiveSQLParser.KW_UPDATE);
            this.state = 3239;
            this.match(HiveSQLParser.KW_COLUMNS);
            this.state = 3241;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 273) {
                {
                this.state = 3240;
                this.restrictOrCascade();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixDropConstraint(): AlterStatementSuffixDropConstraintContext {
        let localContext = new AlterStatementSuffixDropConstraintContext(this.context, this.state);
        this.enterRule(localContext, 506, HiveSQLParser.RULE_alterStatementSuffixDropConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3243;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 3244;
            this.match(HiveSQLParser.KW_CONSTRAINT);
            this.state = 3245;
            localContext._cName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixRenameCol(): AlterStatementSuffixRenameColContext {
        let localContext = new AlterStatementSuffixRenameColContext(this.context, this.state);
        this.enterRule(localContext, 508, HiveSQLParser.RULE_alterStatementSuffixRenameCol);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3247;
            this.match(HiveSQLParser.KW_CHANGE);
            this.state = 3249;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 3248;
                this.match(HiveSQLParser.KW_COLUMN);
                }
            }

            this.state = 3251;
            localContext._oldName = this.id_();
            this.state = 3252;
            localContext._newName = this.id_();
            this.state = 3253;
            this.colType();
            this.state = 3255;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 40 || _la === 55 || _la === 80 || _la === 207 || _la === 242 || _la === 260 || _la === 348) {
                {
                this.state = 3254;
                this.alterColumnConstraint();
                }
            }

            this.state = 3259;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 3257;
                this.match(HiveSQLParser.KW_COMMENT);
                this.state = 3258;
                localContext._comment = this.match(HiveSQLParser.StringLiteral);
                }
            }

            this.state = 3262;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6 || _la === 125) {
                {
                this.state = 3261;
                this.alterStatementChangeColPosition();
                }
            }

            this.state = 3265;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 273) {
                {
                this.state = 3264;
                this.restrictOrCascade();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixUpdateStatsCol(): AlterStatementSuffixUpdateStatsColContext {
        let localContext = new AlterStatementSuffixUpdateStatsColContext(this.context, this.state);
        this.enterRule(localContext, 510, HiveSQLParser.RULE_alterStatementSuffixUpdateStatsCol);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3267;
            this.match(HiveSQLParser.KW_UPDATE);
            this.state = 3268;
            this.match(HiveSQLParser.KW_STATISTICS);
            this.state = 3269;
            this.match(HiveSQLParser.KW_FOR);
            this.state = 3271;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 3270;
                this.match(HiveSQLParser.KW_COLUMN);
                }
            }

            this.state = 3273;
            localContext._colName = this.id_();
            this.state = 3274;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3275;
            this.tableProperties();
            this.state = 3278;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 3276;
                this.match(HiveSQLParser.KW_COMMENT);
                this.state = 3277;
                localContext._comment = this.match(HiveSQLParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixUpdateStats(): AlterStatementSuffixUpdateStatsContext {
        let localContext = new AlterStatementSuffixUpdateStatsContext(this.context, this.state);
        this.enterRule(localContext, 512, HiveSQLParser.RULE_alterStatementSuffixUpdateStats);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3280;
            this.match(HiveSQLParser.KW_UPDATE);
            this.state = 3281;
            this.match(HiveSQLParser.KW_STATISTICS);
            this.state = 3282;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3283;
            this.tableProperties();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementChangeColPosition(): AlterStatementChangeColPositionContext {
        let localContext = new AlterStatementChangeColPositionContext(this.context, this.state);
        this.enterRule(localContext, 514, HiveSQLParser.RULE_alterStatementChangeColPosition);
        try {
            this.state = 3288;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_FIRST:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3285;
                localContext._first = this.match(HiveSQLParser.KW_FIRST);
                }
                break;
            case HiveSQLParser.KW_AFTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3286;
                this.match(HiveSQLParser.KW_AFTER);
                this.state = 3287;
                localContext._afterCol = this.id_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixAddPartitions(): AlterStatementSuffixAddPartitionsContext {
        let localContext = new AlterStatementSuffixAddPartitionsContext(this.context, this.state);
        this.enterRule(localContext, 516, HiveSQLParser.RULE_alterStatementSuffixAddPartitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3290;
            this.match(HiveSQLParser.KW_ADD);
            this.state = 3292;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 3291;
                this.ifNotExists();
                }
            }

            this.state = 3295;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 3294;
                this.alterStatementSuffixAddPartitionsElement();
                }
                }
                this.state = 3297;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 228);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixAddPartitionsElement(): AlterStatementSuffixAddPartitionsElementContext {
        let localContext = new AlterStatementSuffixAddPartitionsElementContext(this.context, this.state);
        this.enterRule(localContext, 518, HiveSQLParser.RULE_alterStatementSuffixAddPartitionsElement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3299;
            this.partitionSpec();
            this.state = 3301;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 182) {
                {
                this.state = 3300;
                this.partitionLocation();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixTouch(): AlterStatementSuffixTouchContext {
        let localContext = new AlterStatementSuffixTouchContext(this.context, this.state);
        this.enterRule(localContext, 520, HiveSQLParser.RULE_alterStatementSuffixTouch);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3303;
            this.match(HiveSQLParser.KW_TOUCH);
            this.state = 3307;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 228) {
                {
                {
                this.state = 3304;
                this.partitionSpec();
                }
                }
                this.state = 3309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixArchive(): AlterStatementSuffixArchiveContext {
        let localContext = new AlterStatementSuffixArchiveContext(this.context, this.state);
        this.enterRule(localContext, 522, HiveSQLParser.RULE_alterStatementSuffixArchive);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3310;
            this.match(HiveSQLParser.KW_ARCHIVE);
            this.state = 3314;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 228) {
                {
                {
                this.state = 3311;
                this.partitionSpec();
                }
                }
                this.state = 3316;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixUnArchive(): AlterStatementSuffixUnArchiveContext {
        let localContext = new AlterStatementSuffixUnArchiveContext(this.context, this.state);
        this.enterRule(localContext, 524, HiveSQLParser.RULE_alterStatementSuffixUnArchive);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3317;
            this.match(HiveSQLParser.KW_UNARCHIVE);
            this.state = 3321;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 228) {
                {
                {
                this.state = 3318;
                this.partitionSpec();
                }
                }
                this.state = 3323;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionLocation(): PartitionLocationContext {
        let localContext = new PartitionLocationContext(this.context, this.state);
        this.enterRule(localContext, 526, HiveSQLParser.RULE_partitionLocation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3324;
            this.match(HiveSQLParser.KW_LOCATION);
            this.state = 3325;
            localContext._locn = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext {
        let localContext = new AlterStatementSuffixDropPartitionsContext(this.context, this.state);
        this.enterRule(localContext, 528, HiveSQLParser.RULE_alterStatementSuffixDropPartitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3327;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 3329;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 3328;
                this.ifExists();
                }
            }

            this.state = 3331;
            this.match(HiveSQLParser.KW_PARTITION);
            this.state = 3332;
            this.partitionSelectorSpec();
            this.state = 3338;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 3333;
                this.match(HiveSQLParser.COMMA);
                this.state = 3334;
                this.match(HiveSQLParser.KW_PARTITION);
                this.state = 3335;
                this.partitionSelectorSpec();
                }
                }
                this.state = 3340;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3342;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 246) {
                {
                this.state = 3341;
                this.match(HiveSQLParser.KW_PURGE);
                }
            }

            this.state = 3345;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 3344;
                this.replicationClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixProperties(): AlterStatementSuffixPropertiesContext {
        let localContext = new AlterStatementSuffixPropertiesContext(this.context, this.state);
        this.enterRule(localContext, 530, HiveSQLParser.RULE_alterStatementSuffixProperties);
        let _la: number;
        try {
            this.state = 3356;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3347;
                this.match(HiveSQLParser.KW_SET);
                this.state = 3348;
                this.match(HiveSQLParser.KW_TBLPROPERTIES);
                this.state = 3349;
                this.tableProperties();
                }
                break;
            case HiveSQLParser.KW_UNSET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3350;
                this.match(HiveSQLParser.KW_UNSET);
                this.state = 3351;
                this.match(HiveSQLParser.KW_TBLPROPERTIES);
                this.state = 3353;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 3352;
                    this.ifExists();
                    }
                }

                this.state = 3355;
                this.tableProperties();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterViewSuffixProperties(): AlterViewSuffixPropertiesContext {
        let localContext = new AlterViewSuffixPropertiesContext(this.context, this.state);
        this.enterRule(localContext, 532, HiveSQLParser.RULE_alterViewSuffixProperties);
        let _la: number;
        try {
            this.state = 3367;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3358;
                this.match(HiveSQLParser.KW_SET);
                this.state = 3359;
                this.match(HiveSQLParser.KW_TBLPROPERTIES);
                this.state = 3360;
                this.tableProperties();
                }
                break;
            case HiveSQLParser.KW_UNSET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3361;
                this.match(HiveSQLParser.KW_UNSET);
                this.state = 3362;
                this.match(HiveSQLParser.KW_TBLPROPERTIES);
                this.state = 3364;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 3363;
                    this.ifExists();
                    }
                }

                this.state = 3366;
                this.tableProperties();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixSerdeProperties(): AlterStatementSuffixSerdePropertiesContext {
        let localContext = new AlterStatementSuffixSerdePropertiesContext(this.context, this.state);
        this.enterRule(localContext, 534, HiveSQLParser.RULE_alterStatementSuffixSerdeProperties);
        let _la: number;
        try {
            this.state = 3384;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3369;
                this.match(HiveSQLParser.KW_SET);
                this.state = 3379;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_SERDE:
                    {
                    this.state = 3370;
                    this.match(HiveSQLParser.KW_SERDE);
                    this.state = 3371;
                    localContext._serdeName = this.match(HiveSQLParser.StringLiteral);
                    this.state = 3375;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 376) {
                        {
                        this.state = 3372;
                        this.match(HiveSQLParser.KW_WITH);
                        this.state = 3373;
                        this.match(HiveSQLParser.KW_SERDEPROPERTIES);
                        this.state = 3374;
                        this.tableProperties();
                        }
                    }

                    }
                    break;
                case HiveSQLParser.KW_SERDEPROPERTIES:
                    {
                    this.state = 3377;
                    this.match(HiveSQLParser.KW_SERDEPROPERTIES);
                    this.state = 3378;
                    this.tableProperties();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case HiveSQLParser.KW_UNSET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3381;
                this.match(HiveSQLParser.KW_UNSET);
                this.state = 3382;
                this.match(HiveSQLParser.KW_SERDEPROPERTIES);
                this.state = 3383;
                this.tableProperties();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePartitionPrefix(): TablePartitionPrefixContext {
        let localContext = new TablePartitionPrefixContext(this.context, this.state);
        this.enterRule(localContext, 536, HiveSQLParser.RULE_tablePartitionPrefix);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3386;
            this.tableName();
            this.state = 3388;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 228) {
                {
                this.state = 3387;
                this.partitionSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixFileFormat(): AlterStatementSuffixFileFormatContext {
        let localContext = new AlterStatementSuffixFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 538, HiveSQLParser.RULE_alterStatementSuffixFileFormat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3390;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3391;
            this.match(HiveSQLParser.KW_FILEFORMAT);
            this.state = 3392;
            this.fileFormat();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixClusterbySortby(): AlterStatementSuffixClusterbySortbyContext {
        let localContext = new AlterStatementSuffixClusterbySortbyContext(this.context, this.state);
        this.enterRule(localContext, 540, HiveSQLParser.RULE_alterStatementSuffixClusterbySortby);
        let _la: number;
        try {
            this.state = 3397;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3394;
                this.match(HiveSQLParser.KW_NOT);
                this.state = 3395;
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 305)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case HiveSQLParser.KW_CLUSTERED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3396;
                this.tableBuckets();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTblPartitionStatementSuffixSkewedLocation(): AlterTblPartitionStatementSuffixSkewedLocationContext {
        let localContext = new AlterTblPartitionStatementSuffixSkewedLocationContext(this.context, this.state);
        this.enterRule(localContext, 542, HiveSQLParser.RULE_alterTblPartitionStatementSuffixSkewedLocation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3399;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3400;
            this.match(HiveSQLParser.KW_SKEWED);
            this.state = 3401;
            this.match(HiveSQLParser.KW_LOCATION);
            this.state = 3402;
            this.skewedLocations();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedLocations(): SkewedLocationsContext {
        let localContext = new SkewedLocationsContext(this.context, this.state);
        this.enterRule(localContext, 544, HiveSQLParser.RULE_skewedLocations);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3404;
            this.match(HiveSQLParser.LPAREN);
            this.state = 3405;
            this.skewedLocationsList();
            this.state = 3406;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedLocationsList(): SkewedLocationsListContext {
        let localContext = new SkewedLocationsListContext(this.context, this.state);
        this.enterRule(localContext, 546, HiveSQLParser.RULE_skewedLocationsList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3408;
            this.skewedLocationMap();
            this.state = 3413;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 3409;
                this.match(HiveSQLParser.COMMA);
                this.state = 3410;
                this.skewedLocationMap();
                }
                }
                this.state = 3415;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedLocationMap(): SkewedLocationMapContext {
        let localContext = new SkewedLocationMapContext(this.context, this.state);
        this.enterRule(localContext, 548, HiveSQLParser.RULE_skewedLocationMap);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3416;
            localContext._key = this.skewedValueLocationElement();
            this.state = 3417;
            this.match(HiveSQLParser.EQUAL);
            this.state = 3418;
            localContext._value = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixLocation(): AlterStatementSuffixLocationContext {
        let localContext = new AlterStatementSuffixLocationContext(this.context, this.state);
        this.enterRule(localContext, 550, HiveSQLParser.RULE_alterStatementSuffixLocation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3420;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3421;
            this.match(HiveSQLParser.KW_LOCATION);
            this.state = 3422;
            localContext._newLoc = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixSkewedby(): AlterStatementSuffixSkewedbyContext {
        let localContext = new AlterStatementSuffixSkewedbyContext(this.context, this.state);
        this.enterRule(localContext, 552, HiveSQLParser.RULE_alterStatementSuffixSkewedby);
        try {
            this.state = 3430;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_SKEWED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3424;
                this.tableSkewed();
                }
                break;
            case HiveSQLParser.KW_NOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3425;
                this.match(HiveSQLParser.KW_NOT);
                this.state = 3428;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_SKEWED:
                    {
                    this.state = 3426;
                    this.match(HiveSQLParser.KW_SKEWED);
                    }
                    break;
                case HiveSQLParser.KW_STORED:
                    {
                    this.state = 3427;
                    this.storedAsDirs();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixExchangePartition(): AlterStatementSuffixExchangePartitionContext {
        let localContext = new AlterStatementSuffixExchangePartitionContext(this.context, this.state);
        this.enterRule(localContext, 554, HiveSQLParser.RULE_alterStatementSuffixExchangePartition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3432;
            this.match(HiveSQLParser.KW_EXCHANGE);
            this.state = 3433;
            this.partitionSpec();
            this.state = 3434;
            this.match(HiveSQLParser.KW_WITH);
            this.state = 3435;
            this.match(HiveSQLParser.KW_TABLE);
            this.state = 3436;
            localContext._exchangename = this.tableName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixRenamePart(): AlterStatementSuffixRenamePartContext {
        let localContext = new AlterStatementSuffixRenamePartContext(this.context, this.state);
        this.enterRule(localContext, 556, HiveSQLParser.RULE_alterStatementSuffixRenamePart);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3438;
            this.match(HiveSQLParser.KW_RENAME);
            this.state = 3439;
            this.match(HiveSQLParser.KW_TO);
            this.state = 3440;
            this.partitionSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixStatsPart(): AlterStatementSuffixStatsPartContext {
        let localContext = new AlterStatementSuffixStatsPartContext(this.context, this.state);
        this.enterRule(localContext, 558, HiveSQLParser.RULE_alterStatementSuffixStatsPart);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3442;
            this.match(HiveSQLParser.KW_UPDATE);
            this.state = 3443;
            this.match(HiveSQLParser.KW_STATISTICS);
            this.state = 3444;
            this.match(HiveSQLParser.KW_FOR);
            this.state = 3446;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 3445;
                this.match(HiveSQLParser.KW_COLUMN);
                }
            }

            this.state = 3448;
            localContext._colName = this.id_();
            this.state = 3449;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3450;
            this.tableProperties();
            this.state = 3453;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 3451;
                this.match(HiveSQLParser.KW_COMMENT);
                this.state = 3452;
                localContext._comment = this.match(HiveSQLParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixMergeFiles(): AlterStatementSuffixMergeFilesContext {
        let localContext = new AlterStatementSuffixMergeFilesContext(this.context, this.state);
        this.enterRule(localContext, 560, HiveSQLParser.RULE_alterStatementSuffixMergeFiles);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3455;
            this.match(HiveSQLParser.KW_CONCATENATE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixBucketNum(): AlterStatementSuffixBucketNumContext {
        let localContext = new AlterStatementSuffixBucketNumContext(this.context, this.state);
        this.enterRule(localContext, 562, HiveSQLParser.RULE_alterStatementSuffixBucketNum);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3457;
            this.match(HiveSQLParser.KW_INTO);
            this.state = 3458;
            localContext._num = this.match(HiveSQLParser.Number);
            this.state = 3459;
            this.match(HiveSQLParser.KW_BUCKETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public blocking(): BlockingContext {
        let localContext = new BlockingContext(this.context, this.state);
        this.enterRule(localContext, 564, HiveSQLParser.RULE_blocking);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3461;
            this.match(HiveSQLParser.KW_AND);
            this.state = 3462;
            this.match(HiveSQLParser.KW_WAIT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactPool(): CompactPoolContext {
        let localContext = new CompactPoolContext(this.context, this.state);
        this.enterRule(localContext, 566, HiveSQLParser.RULE_compactPool);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3464;
            this.match(HiveSQLParser.KW_POOL);
            this.state = 3465;
            localContext._poolName = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixCompact(): AlterStatementSuffixCompactContext {
        let localContext = new AlterStatementSuffixCompactContext(this.context, this.state);
        this.enterRule(localContext, 568, HiveSQLParser.RULE_alterStatementSuffixCompact);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3467;
            this.match(HiveSQLParser.KW_COMPACT);
            this.state = 3468;
            localContext._compactType = this.match(HiveSQLParser.StringLiteral);
            this.state = 3470;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42) {
                {
                this.state = 3469;
                this.tableImplBuckets();
                }
            }

            this.state = 3473;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 11) {
                {
                this.state = 3472;
                this.blocking();
                }
            }

            this.state = 3476;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 237) {
                {
                this.state = 3475;
                this.compactPool();
                }
            }

            this.state = 3482;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 3478;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 3479;
                this.match(HiveSQLParser.KW_OVERWRITE);
                this.state = 3480;
                this.match(HiveSQLParser.KW_TBLPROPERTIES);
                this.state = 3481;
                this.tableProperties();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixSetOwner(): AlterStatementSuffixSetOwnerContext {
        let localContext = new AlterStatementSuffixSetOwnerContext(this.context, this.state);
        this.enterRule(localContext, 570, HiveSQLParser.RULE_alterStatementSuffixSetOwner);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3484;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3485;
            this.match(HiveSQLParser.KW_OWNER);
            this.state = 3486;
            this.principalName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixSetPartSpec(): AlterStatementSuffixSetPartSpecContext {
        let localContext = new AlterStatementSuffixSetPartSpecContext(this.context, this.state);
        this.enterRule(localContext, 572, HiveSQLParser.RULE_alterStatementSuffixSetPartSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3488;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3489;
            this.match(HiveSQLParser.KW_PARTITION);
            this.state = 3490;
            this.match(HiveSQLParser.KW_SPEC);
            this.state = 3491;
            this.match(HiveSQLParser.LPAREN);
            this.state = 3492;
            localContext._spec = this.partitionTransformSpec();
            this.state = 3493;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixExecute(): AlterStatementSuffixExecuteContext {
        let localContext = new AlterStatementSuffixExecuteContext(this.context, this.state);
        this.enterRule(localContext, 574, HiveSQLParser.RULE_alterStatementSuffixExecute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3495;
            this.match(HiveSQLParser.KW_EXECUTE);
            this.state = 3505;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ROLLBACK:
                {
                this.state = 3496;
                this.match(HiveSQLParser.KW_ROLLBACK);
                this.state = 3497;
                this.match(HiveSQLParser.LPAREN);
                this.state = 3498;
                localContext._rollbackParam = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 414 || _la === 419)) {
                    localContext._rollbackParam = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
                {
                this.state = 3499;
                this.match(HiveSQLParser.KW_EXPIRE_SNAPSHOTS);
                this.state = 3500;
                this.match(HiveSQLParser.LPAREN);
                this.state = 3501;
                localContext._expireParam = this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
                {
                this.state = 3502;
                this.match(HiveSQLParser.KW_SET_CURRENT_SNAPSHOT);
                this.state = 3503;
                this.match(HiveSQLParser.LPAREN);
                this.state = 3504;
                localContext._snapshotParam = this.match(HiveSQLParser.Number);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3507;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fileFormat(): FileFormatContext {
        let localContext = new FileFormatContext(this.context, this.state);
        this.enterRule(localContext, 576, HiveSQLParser.RULE_fileFormat);
        let _la: number;
        try {
            this.state = 3522;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 375, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3509;
                this.match(HiveSQLParser.KW_INPUTFORMAT);
                this.state = 3510;
                localContext._inFmt = this.match(HiveSQLParser.StringLiteral);
                this.state = 3511;
                this.match(HiveSQLParser.KW_OUTPUTFORMAT);
                this.state = 3512;
                localContext._outFmt = this.match(HiveSQLParser.StringLiteral);
                this.state = 3513;
                this.match(HiveSQLParser.KW_SERDE);
                this.state = 3514;
                localContext._serdeCls = this.match(HiveSQLParser.StringLiteral);
                this.state = 3519;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 3515;
                    this.match(HiveSQLParser.KW_INPUTDRIVER);
                    this.state = 3516;
                    localContext._inDriver = this.match(HiveSQLParser.StringLiteral);
                    this.state = 3517;
                    this.match(HiveSQLParser.KW_OUTPUTDRIVER);
                    this.state = 3518;
                    localContext._outDriver = this.match(HiveSQLParser.StringLiteral);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3521;
                localContext._genericSpec = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDataConnectorStatementSuffix(): AlterDataConnectorStatementSuffixContext {
        let localContext = new AlterDataConnectorStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 578, HiveSQLParser.RULE_alterDataConnectorStatementSuffix);
        try {
            this.state = 3527;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 376, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3524;
                this.alterDataConnectorSuffixProperties();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3525;
                this.alterDataConnectorSuffixSetOwner();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3526;
                this.alterDataConnectorSuffixSetUrl();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDataConnectorSuffixProperties(): AlterDataConnectorSuffixPropertiesContext {
        let localContext = new AlterDataConnectorSuffixPropertiesContext(this.context, this.state);
        this.enterRule(localContext, 580, HiveSQLParser.RULE_alterDataConnectorSuffixProperties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3529;
            localContext._name = this.id_();
            this.state = 3530;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3531;
            this.match(HiveSQLParser.KW_DCPROPERTIES);
            this.state = 3532;
            this.dcProperties();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDataConnectorSuffixSetOwner(): AlterDataConnectorSuffixSetOwnerContext {
        let localContext = new AlterDataConnectorSuffixSetOwnerContext(this.context, this.state);
        this.enterRule(localContext, 582, HiveSQLParser.RULE_alterDataConnectorSuffixSetOwner);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3534;
            localContext._dcName = this.id_();
            this.state = 3535;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3536;
            this.match(HiveSQLParser.KW_OWNER);
            this.state = 3537;
            this.principalName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDataConnectorSuffixSetUrl(): AlterDataConnectorSuffixSetUrlContext {
        let localContext = new AlterDataConnectorSuffixSetUrlContext(this.context, this.state);
        this.enterRule(localContext, 584, HiveSQLParser.RULE_alterDataConnectorSuffixSetUrl);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3539;
            localContext._dcName = this.id_();
            this.state = 3540;
            this.match(HiveSQLParser.KW_SET);
            this.state = 3541;
            this.match(HiveSQLParser.KW_URL);
            this.state = 3542;
            localContext._newUri = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeTableOrFile(): LikeTableOrFileContext {
        let localContext = new LikeTableOrFileContext(this.context, this.state);
        this.enterRule(localContext, 586, HiveSQLParser.RULE_likeTableOrFile);
        try {
            this.state = 3553;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3544;
                this.match(HiveSQLParser.KW_LIKE);
                this.state = 3545;
                this.match(HiveSQLParser.KW_FILE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3546;
                this.match(HiveSQLParser.KW_LIKE);
                this.state = 3547;
                this.match(HiveSQLParser.KW_FILE);
                this.state = 3548;
                localContext._format = this.id_();
                this.state = 3549;
                localContext._uri = this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3551;
                this.match(HiveSQLParser.KW_LIKE);
                this.state = 3552;
                localContext._likeName = this.tableName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableStatement(): CreateTableStatementContext {
        let localContext = new CreateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 588, HiveSQLParser.RULE_createTableStatement);
        let _la: number;
        try {
            this.state = 3684;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3555;
                this.match(HiveSQLParser.KW_CREATE);
                this.state = 3557;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 323) {
                    {
                    this.state = 3556;
                    localContext._temp = this.match(HiveSQLParser.KW_TEMPORARY);
                    }
                }

                this.state = 3560;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 335) {
                    {
                    this.state = 3559;
                    localContext._trans = this.match(HiveSQLParser.KW_TRANSACTIONAL);
                    }
                }

                this.state = 3563;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 118) {
                    {
                    this.state = 3562;
                    localContext._ext = this.match(HiveSQLParser.KW_EXTERNAL);
                    }
                }

                this.state = 3565;
                this.match(HiveSQLParser.KW_TABLE);
                this.state = 3567;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 3566;
                    this.ifNotExists();
                    }
                }

                this.state = 3569;
                localContext._name = this.tableName();
                this.state = 3623;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_LIKE:
                    {
                    this.state = 3570;
                    this.likeTableOrFile();
                    this.state = 3572;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 229) {
                        {
                        this.state = 3571;
                        this.createTablePartitionSpec();
                        }
                    }

                    this.state = 3575;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 282) {
                        {
                        this.state = 3574;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3578;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 311) {
                        {
                        this.state = 3577;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3581;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 182) {
                        {
                        this.state = 3580;
                        this.tableLocation();
                        }
                    }

                    this.state = 3584;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 322) {
                        {
                        this.state = 3583;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    }
                    break;
                case HiveSQLParser.KW_AS:
                case HiveSQLParser.KW_CLUSTERED:
                case HiveSQLParser.KW_COMMENT:
                case HiveSQLParser.KW_LOCATION:
                case HiveSQLParser.KW_PARTITIONED:
                case HiveSQLParser.KW_ROW:
                case HiveSQLParser.KW_SKEWED:
                case HiveSQLParser.KW_STORED:
                case HiveSQLParser.KW_TBLPROPERTIES:
                case HiveSQLParser.KW_USING:
                case HiveSQLParser.SEMICOLON:
                case HiveSQLParser.LPAREN:
                    {
                    this.state = 3590;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 387) {
                        {
                        this.state = 3586;
                        this.match(HiveSQLParser.LPAREN);
                        this.state = 3587;
                        this.columnNameTypeOrConstraintList();
                        this.state = 3588;
                        this.match(HiveSQLParser.RPAREN);
                        }
                    }

                    this.state = 3593;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 360) {
                        {
                        this.state = 3592;
                        this.tableUsing();
                        }
                    }

                    this.state = 3596;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 47) {
                        {
                        this.state = 3595;
                        this.tableComment();
                        }
                    }

                    this.state = 3599;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 229) {
                        {
                        this.state = 3598;
                        this.createTablePartitionSpec();
                        }
                    }

                    this.state = 3602;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 42) {
                        {
                        this.state = 3601;
                        this.tableBuckets();
                        }
                    }

                    this.state = 3605;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 300) {
                        {
                        this.state = 3604;
                        this.tableSkewed();
                        }
                    }

                    this.state = 3608;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 282) {
                        {
                        this.state = 3607;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3611;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 311) {
                        {
                        this.state = 3610;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3614;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 182) {
                        {
                        this.state = 3613;
                        this.tableLocation();
                        }
                    }

                    this.state = 3617;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 322) {
                        {
                        this.state = 3616;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    this.state = 3621;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3619;
                        this.match(HiveSQLParser.KW_AS);
                        this.state = 3620;
                        this.selectStatementWithCTE();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3625;
                this.match(HiveSQLParser.KW_CREATE);
                this.state = 3626;
                localContext._mgd = this.match(HiveSQLParser.KW_MANAGED);
                this.state = 3627;
                this.match(HiveSQLParser.KW_TABLE);
                this.state = 3629;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 3628;
                    this.ifNotExists();
                    }
                }

                this.state = 3631;
                localContext._name = this.tableName();
                this.state = 3682;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_LIKE:
                    {
                    this.state = 3632;
                    this.likeTableOrFile();
                    this.state = 3634;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 282) {
                        {
                        this.state = 3633;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3637;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 311) {
                        {
                        this.state = 3636;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3640;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 182) {
                        {
                        this.state = 3639;
                        this.tableLocation();
                        }
                    }

                    this.state = 3643;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 322) {
                        {
                        this.state = 3642;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    }
                    break;
                case HiveSQLParser.KW_AS:
                case HiveSQLParser.KW_CLUSTERED:
                case HiveSQLParser.KW_COMMENT:
                case HiveSQLParser.KW_LOCATION:
                case HiveSQLParser.KW_PARTITIONED:
                case HiveSQLParser.KW_ROW:
                case HiveSQLParser.KW_SKEWED:
                case HiveSQLParser.KW_STORED:
                case HiveSQLParser.KW_TBLPROPERTIES:
                case HiveSQLParser.KW_USING:
                case HiveSQLParser.SEMICOLON:
                case HiveSQLParser.LPAREN:
                    {
                    this.state = 3649;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 387) {
                        {
                        this.state = 3645;
                        this.match(HiveSQLParser.LPAREN);
                        this.state = 3646;
                        this.columnNameTypeOrConstraintList();
                        this.state = 3647;
                        this.match(HiveSQLParser.RPAREN);
                        }
                    }

                    this.state = 3652;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 360) {
                        {
                        this.state = 3651;
                        this.tableUsing();
                        }
                    }

                    this.state = 3655;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 47) {
                        {
                        this.state = 3654;
                        this.tableComment();
                        }
                    }

                    this.state = 3658;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 229) {
                        {
                        this.state = 3657;
                        this.createTablePartitionSpec();
                        }
                    }

                    this.state = 3661;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 42) {
                        {
                        this.state = 3660;
                        this.tableBuckets();
                        }
                    }

                    this.state = 3664;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 300) {
                        {
                        this.state = 3663;
                        this.tableSkewed();
                        }
                    }

                    this.state = 3667;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 282) {
                        {
                        this.state = 3666;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3670;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 311) {
                        {
                        this.state = 3669;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3673;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 182) {
                        {
                        this.state = 3672;
                        this.tableLocation();
                        }
                    }

                    this.state = 3676;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 322) {
                        {
                        this.state = 3675;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    this.state = 3680;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3678;
                        this.match(HiveSQLParser.KW_AS);
                        this.state = 3679;
                        this.selectStatementWithCTE();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDataConnectorStatement(): CreateDataConnectorStatementContext {
        let localContext = new CreateDataConnectorStatementContext(this.context, this.state);
        this.enterRule(localContext, 590, HiveSQLParser.RULE_createDataConnectorStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3686;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 3687;
            this.match(HiveSQLParser.KW_DATACONNECTOR);
            this.state = 3689;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 3688;
                this.ifNotExists();
                }
            }

            this.state = 3691;
            localContext._name = this.id_();
            this.state = 3692;
            this.dataConnectorType();
            this.state = 3693;
            this.dataConnectorUrl();
            this.state = 3695;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 3694;
                this.dataConnectorComment();
                }
            }

            this.state = 3700;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 3697;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 3698;
                this.match(HiveSQLParser.KW_DCPROPERTIES);
                this.state = 3699;
                localContext._dcprops = this.dcProperties();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataConnectorComment(): DataConnectorCommentContext {
        let localContext = new DataConnectorCommentContext(this.context, this.state);
        this.enterRule(localContext, 592, HiveSQLParser.RULE_dataConnectorComment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3702;
            this.match(HiveSQLParser.KW_COMMENT);
            this.state = 3703;
            localContext._comment = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataConnectorUrl(): DataConnectorUrlContext {
        let localContext = new DataConnectorUrlContext(this.context, this.state);
        this.enterRule(localContext, 594, HiveSQLParser.RULE_dataConnectorUrl);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3705;
            this.match(HiveSQLParser.KW_URL);
            this.state = 3706;
            localContext._url = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataConnectorType(): DataConnectorTypeContext {
        let localContext = new DataConnectorTypeContext(this.context, this.state);
        this.enterRule(localContext, 596, HiveSQLParser.RULE_dataConnectorType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3708;
            this.match(HiveSQLParser.KW_TYPE);
            this.state = 3709;
            localContext._dcType = this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dcProperties(): DcPropertiesContext {
        let localContext = new DcPropertiesContext(this.context, this.state);
        this.enterRule(localContext, 598, HiveSQLParser.RULE_dcProperties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3711;
            this.match(HiveSQLParser.LPAREN);
            this.state = 3712;
            this.dbPropertiesList();
            this.state = 3713;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropDataConnectorStatement(): DropDataConnectorStatementContext {
        let localContext = new DropDataConnectorStatementContext(this.context, this.state);
        this.enterRule(localContext, 600, HiveSQLParser.RULE_dropDataConnectorStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3715;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 3716;
            this.match(HiveSQLParser.KW_DATACONNECTOR);
            this.state = 3718;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 3717;
                this.ifExists();
                }
            }

            this.state = 3720;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAllColumns(): TableAllColumnsContext {
        let localContext = new TableAllColumnsContext(this.context, this.state);
        this.enterRule(localContext, 602, HiveSQLParser.RULE_tableAllColumns);
        try {
            this.state = 3727;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.STAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3722;
                this.match(HiveSQLParser.STAR);
                }
                break;
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.Identifier:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3723;
                this.tableName();
                this.state = 3724;
                this.match(HiveSQLParser.DOT);
                this.state = 3725;
                this.match(HiveSQLParser.STAR);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableOrColumn(): TableOrColumnContext {
        let localContext = new TableOrColumnContext(this.context, this.state);
        this.enterRule(localContext, 604, HiveSQLParser.RULE_tableOrColumn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3729;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultValue(): DefaultValueContext {
        let localContext = new DefaultValueContext(this.context, this.state);
        this.enterRule(localContext, 606, HiveSQLParser.RULE_defaultValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3731;
            this.match(HiveSQLParser.KW_DEFAULT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionList(): ExpressionListContext {
        let localContext = new ExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 608, HiveSQLParser.RULE_expressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3733;
            this.expression();
            this.state = 3738;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 3734;
                this.match(HiveSQLParser.COMMA);
                this.state = 3735;
                this.expression();
                }
                }
                this.state = 3740;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasList(): AliasListContext {
        let localContext = new AliasListContext(this.context, this.state);
        this.enterRule(localContext, 610, HiveSQLParser.RULE_aliasList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3741;
            this.id_();
            this.state = 3746;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 3742;
                this.match(HiveSQLParser.COMMA);
                this.state = 3743;
                this.id_();
                }
                }
                this.state = 3748;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 612, HiveSQLParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3749;
            this.match(HiveSQLParser.KW_FROM);
            this.state = 3750;
            this.fromSource();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromSource(): FromSourceContext {
        let localContext = new FromSourceContext(this.context, this.state);
        this.enterRule(localContext, 614, HiveSQLParser.RULE_fromSource);
        let _la: number;
        try {
            this.state = 3761;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_UNIQUEJOIN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3752;
                this.uniqueJoinToken();
                this.state = 3753;
                this.uniqueJoinSource();
                this.state = 3756;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3754;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 3755;
                    this.uniqueJoinSource();
                    }
                    }
                    this.state = 3758;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 385);
                }
                break;
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLE:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.LPAREN:
            case HiveSQLParser.Identifier:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3760;
                this.joinSource();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomjoinSource(): AtomjoinSourceContext {
        let localContext = new AtomjoinSourceContext(this.context, this.state);
        this.enterRule(localContext, 616, HiveSQLParser.RULE_atomjoinSource);
        try {
            let alternative: number;
            this.state = 3795;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 430, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3763;
                this.tableSource();
                this.state = 3767;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 426, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3764;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3769;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 426, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3770;
                this.virtualTableSource();
                this.state = 3774;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 427, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3771;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3776;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 427, this.context);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3777;
                this.subQuerySource();
                this.state = 3781;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 428, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3778;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3783;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 428, this.context);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3784;
                this.partitionedTableFunction();
                this.state = 3788;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 429, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3785;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3790;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 429, this.context);
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3791;
                this.match(HiveSQLParser.LPAREN);
                this.state = 3792;
                this.joinSource();
                this.state = 3793;
                this.match(HiveSQLParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinSource(): JoinSourceContext {
        let localContext = new JoinSourceContext(this.context, this.state);
        this.enterRule(localContext, 618, HiveSQLParser.RULE_joinSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3797;
            this.atomjoinSource();
            this.state = 3808;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 60 || ((((_la - 135)) & ~0x1F) === 0 && ((1 << (_la - 135)) & 1073872897) !== 0) || _la === 174 || _la === 276 || _la === 385) {
                {
                {
                this.state = 3798;
                this.joinToken();
                this.state = 3799;
                this.joinSourcePart();
                this.state = 3804;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_ON:
                    {
                    this.state = 3800;
                    this.match(HiveSQLParser.KW_ON);
                    this.state = 3801;
                    this.expression();
                    }
                    break;
                case HiveSQLParser.KW_USING:
                    {
                    this.state = 3802;
                    this.match(HiveSQLParser.KW_USING);
                    this.state = 3803;
                    this.columnParenthesesList();
                    }
                    break;
                case HiveSQLParser.KW_CLUSTER:
                case HiveSQLParser.KW_CROSS:
                case HiveSQLParser.KW_DISTRIBUTE:
                case HiveSQLParser.KW_EXCEPT:
                case HiveSQLParser.KW_FULL:
                case HiveSQLParser.KW_GROUP:
                case HiveSQLParser.KW_HAVING:
                case HiveSQLParser.KW_INNER:
                case HiveSQLParser.KW_INSERT:
                case HiveSQLParser.KW_INTERSECT:
                case HiveSQLParser.KW_JOIN:
                case HiveSQLParser.KW_LEFT:
                case HiveSQLParser.KW_LIMIT:
                case HiveSQLParser.KW_MAP:
                case HiveSQLParser.KW_MINUS:
                case HiveSQLParser.KW_ORDER:
                case HiveSQLParser.KW_QUALIFY:
                case HiveSQLParser.KW_REDUCE:
                case HiveSQLParser.KW_RIGHT:
                case HiveSQLParser.KW_SELECT:
                case HiveSQLParser.KW_SORT:
                case HiveSQLParser.KW_UNION:
                case HiveSQLParser.KW_WHERE:
                case HiveSQLParser.KW_WINDOW:
                case HiveSQLParser.COMMA:
                case HiveSQLParser.SEMICOLON:
                case HiveSQLParser.RPAREN:
                    break;
                default:
                    break;
                }
                }
                }
                this.state = 3810;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinSourcePart(): JoinSourcePartContext {
        let localContext = new JoinSourcePartContext(this.context, this.state);
        this.enterRule(localContext, 620, HiveSQLParser.RULE_joinSourcePart);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3815;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 433, this.context) ) {
            case 1:
                {
                this.state = 3811;
                this.tableSource();
                }
                break;
            case 2:
                {
                this.state = 3812;
                this.virtualTableSource();
                }
                break;
            case 3:
                {
                this.state = 3813;
                this.subQuerySource();
                }
                break;
            case 4:
                {
                this.state = 3814;
                this.partitionedTableFunction();
                }
                break;
            }
            this.state = 3820;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 434, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3817;
                    this.lateralView();
                    }
                    }
                }
                this.state = 3822;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 434, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uniqueJoinSource(): UniqueJoinSourceContext {
        let localContext = new UniqueJoinSourceContext(this.context, this.state);
        this.enterRule(localContext, 622, HiveSQLParser.RULE_uniqueJoinSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3824;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 241) {
                {
                this.state = 3823;
                this.match(HiveSQLParser.KW_PRESERVE);
                }
            }

            this.state = 3826;
            this.uniqueJoinTableSource();
            this.state = 3827;
            this.uniqueJoinExpr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uniqueJoinExpr(): UniqueJoinExprContext {
        let localContext = new UniqueJoinExprContext(this.context, this.state);
        this.enterRule(localContext, 624, HiveSQLParser.RULE_uniqueJoinExpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3829;
            this.match(HiveSQLParser.LPAREN);
            this.state = 3830;
            this.expressionList();
            this.state = 3831;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uniqueJoinToken(): UniqueJoinTokenContext {
        let localContext = new UniqueJoinTokenContext(this.context, this.state);
        this.enterRule(localContext, 626, HiveSQLParser.RULE_uniqueJoinToken);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3833;
            this.match(HiveSQLParser.KW_UNIQUEJOIN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinToken(): JoinTokenContext {
        let localContext = new JoinTokenContext(this.context, this.state);
        this.enterRule(localContext, 628, HiveSQLParser.RULE_joinToken);
        let _la: number;
        try {
            this.state = 3849;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.COMMA:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3835;
                this.match(HiveSQLParser.COMMA);
                }
                break;
            case HiveSQLParser.KW_CROSS:
            case HiveSQLParser.KW_FULL:
            case HiveSQLParser.KW_INNER:
            case HiveSQLParser.KW_JOIN:
            case HiveSQLParser.KW_LEFT:
            case HiveSQLParser.KW_RIGHT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3846;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_INNER:
                    {
                    this.state = 3836;
                    this.match(HiveSQLParser.KW_INNER);
                    }
                    break;
                case HiveSQLParser.KW_CROSS:
                    {
                    this.state = 3837;
                    this.match(HiveSQLParser.KW_CROSS);
                    }
                    break;
                case HiveSQLParser.KW_FULL:
                case HiveSQLParser.KW_RIGHT:
                    {
                    this.state = 3838;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 135 || _la === 276)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3840;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 222) {
                        {
                        this.state = 3839;
                        this.match(HiveSQLParser.KW_OUTER);
                        }
                    }

                    }
                    break;
                case HiveSQLParser.KW_LEFT:
                    {
                    this.state = 3842;
                    this.match(HiveSQLParser.KW_LEFT);
                    this.state = 3844;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 12 || _la === 222 || _la === 290) {
                        {
                        this.state = 3843;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 12 || _la === 222 || _la === 290)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                case HiveSQLParser.KW_JOIN:
                    break;
                default:
                    break;
                }
                this.state = 3848;
                this.match(HiveSQLParser.KW_JOIN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lateralView(): LateralViewContext {
        let localContext = new LateralViewContext(this.context, this.state);
        this.enterRule(localContext, 630, HiveSQLParser.RULE_lateralView);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3908;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 449, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3851;
                this.match(HiveSQLParser.KW_LATERAL);
                this.state = 3852;
                this.match(HiveSQLParser.KW_VIEW);
                this.state = 3853;
                this.match(HiveSQLParser.KW_OUTER);
                this.state = 3854;
                this.function_();
                this.state = 3855;
                this.tableAlias();
                this.state = 3865;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3856;
                    this.match(HiveSQLParser.KW_AS);
                    this.state = 3857;
                    this.id_();
                    this.state = 3862;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 440, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3858;
                            this.match(HiveSQLParser.COMMA);
                            this.state = 3859;
                            this.id_();
                            }
                            }
                        }
                        this.state = 3864;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 440, this.context);
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3868;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 385) {
                    {
                    this.state = 3867;
                    this.match(HiveSQLParser.COMMA);
                    }
                }

                this.state = 3870;
                this.match(HiveSQLParser.KW_LATERAL);
                this.state = 3906;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_VIEW:
                    {
                    this.state = 3871;
                    this.match(HiveSQLParser.KW_VIEW);
                    this.state = 3872;
                    this.function_();
                    this.state = 3873;
                    this.tableAlias();
                    this.state = 3883;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3874;
                        this.match(HiveSQLParser.KW_AS);
                        this.state = 3875;
                        this.id_();
                        this.state = 3880;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 443, this.context);
                        while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                            if (alternative === 1) {
                                {
                                {
                                this.state = 3876;
                                this.match(HiveSQLParser.COMMA);
                                this.state = 3877;
                                this.id_();
                                }
                                }
                            }
                            this.state = 3882;
                            this.errorHandler.sync(this);
                            alternative = this.interpreter.adaptivePredict(this.tokenStream, 443, this.context);
                        }
                        }
                    }

                    }
                    break;
                case HiveSQLParser.KW_TABLE:
                    {
                    this.state = 3885;
                    this.match(HiveSQLParser.KW_TABLE);
                    this.state = 3886;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 3887;
                    this.valuesClause();
                    this.state = 3888;
                    this.match(HiveSQLParser.RPAREN);
                    this.state = 3890;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3889;
                        this.match(HiveSQLParser.KW_AS);
                        }
                    }

                    this.state = 3892;
                    this.tableAlias();
                    this.state = 3904;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 387) {
                        {
                        this.state = 3893;
                        this.match(HiveSQLParser.LPAREN);
                        this.state = 3894;
                        this.id_();
                        this.state = 3899;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 385) {
                            {
                            {
                            this.state = 3895;
                            this.match(HiveSQLParser.COMMA);
                            this.state = 3896;
                            this.id_();
                            }
                            }
                            this.state = 3901;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        this.state = 3902;
                        this.match(HiveSQLParser.RPAREN);
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAlias(): TableAliasContext {
        let localContext = new TableAliasContext(this.context, this.state);
        this.enterRule(localContext, 632, HiveSQLParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3910;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableBucketSample(): TableBucketSampleContext {
        let localContext = new TableBucketSampleContext(this.context, this.state);
        this.enterRule(localContext, 634, HiveSQLParser.RULE_tableBucketSample);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3912;
            this.match(HiveSQLParser.KW_TABLESAMPLE);
            this.state = 3913;
            this.match(HiveSQLParser.LPAREN);
            this.state = 3914;
            this.match(HiveSQLParser.KW_BUCKET);
            this.state = 3915;
            localContext._numerator = this.match(HiveSQLParser.Number);
            this.state = 3916;
            this.match(HiveSQLParser.KW_OUT);
            this.state = 3917;
            this.match(HiveSQLParser.KW_OF);
            this.state = 3918;
            localContext._denominator = this.match(HiveSQLParser.Number);
            this.state = 3928;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 215) {
                {
                this.state = 3919;
                this.match(HiveSQLParser.KW_ON);
                this.state = 3920;
                localContext._expression = this.expression();
                localContext._expr.push(localContext._expression!);
                this.state = 3925;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 385) {
                    {
                    {
                    this.state = 3921;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 3922;
                    localContext._expression = this.expression();
                    localContext._expr.push(localContext._expression!);
                    }
                    }
                    this.state = 3927;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3930;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public splitSample(): SplitSampleContext {
        let localContext = new SplitSampleContext(this.context, this.state);
        this.enterRule(localContext, 636, HiveSQLParser.RULE_splitSample);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3932;
            this.match(HiveSQLParser.KW_TABLESAMPLE);
            this.state = 3933;
            this.match(HiveSQLParser.LPAREN);
            this.state = 3937;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.Number:
                {
                this.state = 3934;
                this.match(HiveSQLParser.Number);
                this.state = 3935;
                _la = this.tokenStream.LA(1);
                if(!(_la === 232 || _la === 283)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case HiveSQLParser.ByteLengthLiteral:
                {
                this.state = 3936;
                this.match(HiveSQLParser.ByteLengthLiteral);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3939;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSample(): TableSampleContext {
        let localContext = new TableSampleContext(this.context, this.state);
        this.enterRule(localContext, 638, HiveSQLParser.RULE_tableSample);
        try {
            this.state = 3943;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 453, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3941;
                this.tableBucketSample();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3942;
                this.splitSample();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSource(): TableSourceContext {
        let localContext = new TableSourceContext(this.context, this.state);
        this.enterRule(localContext, 640, HiveSQLParser.RULE_tableSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3945;
            localContext._tabname = this.tableName();
            this.state = 3947;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 3946;
                localContext._props = this.tableProperties();
                }
            }

            this.state = 3950;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 321) {
                {
                this.state = 3949;
                localContext._ts = this.tableSample();
                }
            }

            this.state = 3953;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 129) {
                {
                this.state = 3952;
                localContext._asOf = this.asOfClause();
                }
            }

            this.state = 3959;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 458, this.context) ) {
            case 1:
                {
                this.state = 3956;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3955;
                    this.match(HiveSQLParser.KW_AS);
                    }
                }

                this.state = 3958;
                localContext._alias = this.id_();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public asOfClause(): AsOfClauseContext {
        let localContext = new AsOfClauseContext(this.context, this.state);
        this.enterRule(localContext, 642, HiveSQLParser.RULE_asOfClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3961;
            this.match(HiveSQLParser.KW_FOR);
            this.state = 3971;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_SYSTEM_TIME:
                {
                this.state = 3962;
                this.match(HiveSQLParser.KW_SYSTEM_TIME);
                this.state = 3963;
                this.match(HiveSQLParser.KW_AS);
                this.state = 3964;
                this.match(HiveSQLParser.KW_OF);
                this.state = 3965;
                localContext._asOfTime = this.expression();
                }
                break;
            case HiveSQLParser.KW_FOR:
                {
                this.state = 3966;
                this.match(HiveSQLParser.KW_FOR);
                this.state = 3967;
                this.match(HiveSQLParser.KW_SYSTEM_VERSION);
                this.state = 3968;
                this.match(HiveSQLParser.KW_AS);
                this.state = 3969;
                this.match(HiveSQLParser.KW_OF);
                this.state = 3970;
                localContext._asOfVersion = this.match(HiveSQLParser.Number);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uniqueJoinTableSource(): UniqueJoinTableSourceContext {
        let localContext = new UniqueJoinTableSourceContext(this.context, this.state);
        this.enterRule(localContext, 644, HiveSQLParser.RULE_uniqueJoinTableSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3973;
            localContext._tabname = this.tableName();
            this.state = 3975;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 321) {
                {
                this.state = 3974;
                localContext._ts = this.tableSample();
                }
            }

            this.state = 3981;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252585854) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3236739107) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4152217853) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815305069) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 968573415) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750079) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 1004889323) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4138967) !== 0) || _la === 420) {
                {
                this.state = 3978;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3977;
                    this.match(HiveSQLParser.KW_AS);
                    }
                }

                this.state = 3980;
                localContext._alias = this.id_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 646, HiveSQLParser.RULE_tableName);
        try {
            this.state = 3991;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 464, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3983;
                localContext._db = this.id_();
                this.state = 3984;
                this.match(HiveSQLParser.DOT);
                this.state = 3985;
                localContext._tab = this.id_();
                this.state = 3988;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 463, this.context) ) {
                case 1:
                    {
                    this.state = 3986;
                    this.match(HiveSQLParser.DOT);
                    this.state = 3987;
                    localContext._meta = this.id_();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3990;
                localContext._tab = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewName(): ViewNameContext {
        let localContext = new ViewNameContext(this.context, this.state);
        this.enterRule(localContext, 648, HiveSQLParser.RULE_viewName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3996;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 465, this.context) ) {
            case 1:
                {
                this.state = 3993;
                localContext._db = this.id_();
                this.state = 3994;
                this.match(HiveSQLParser.DOT);
                }
                break;
            }
            this.state = 3998;
            localContext._view = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subQuerySource(): SubQuerySourceContext {
        let localContext = new SubQuerySourceContext(this.context, this.state);
        this.enterRule(localContext, 650, HiveSQLParser.RULE_subQuerySource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4000;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4001;
            this.queryStatementExpression();
            this.state = 4002;
            this.match(HiveSQLParser.RPAREN);
            this.state = 4004;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 4003;
                this.match(HiveSQLParser.KW_AS);
                }
            }

            this.state = 4006;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitioningSpec(): PartitioningSpecContext {
        let localContext = new PartitioningSpecContext(this.context, this.state);
        this.enterRule(localContext, 652, HiveSQLParser.RULE_partitioningSpec);
        let _la: number;
        try {
            this.state = 4019;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_PARTITION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4008;
                this.partitionByClause();
                this.state = 4010;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 4009;
                    this.orderByClause();
                    }
                }

                }
                break;
            case HiveSQLParser.KW_ORDER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4012;
                this.orderByClause();
                }
                break;
            case HiveSQLParser.KW_DISTRIBUTE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4013;
                this.distributeByClause();
                this.state = 4015;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 4014;
                    this.sortByClause();
                    }
                }

                }
                break;
            case HiveSQLParser.KW_SORT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4017;
                this.sortByClause();
                }
                break;
            case HiveSQLParser.KW_CLUSTER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4018;
                this.clusterByClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTableFunctionSource(): PartitionTableFunctionSourceContext {
        let localContext = new PartitionTableFunctionSourceContext(this.context, this.state);
        this.enterRule(localContext, 654, HiveSQLParser.RULE_partitionTableFunctionSource);
        try {
            this.state = 4024;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 470, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4021;
                this.subQuerySource();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4022;
                this.tableSource();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4023;
                this.partitionedTableFunction();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext {
        let localContext = new PartitionedTableFunctionContext(this.context, this.state);
        this.enterRule(localContext, 656, HiveSQLParser.RULE_partitionedTableFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4026;
            localContext._n = this.id_();
            this.state = 4027;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4028;
            this.match(HiveSQLParser.KW_ON);
            this.state = 4029;
            localContext._ptfsrc = this.partitionTableFunctionSource();
            this.state = 4031;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 41 || _la === 93 || _la === 220 || _la === 228 || _la === 304) {
                {
                this.state = 4030;
                localContext._spec = this.partitioningSpec();
                }
            }

            this.state = 4048;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 420) {
                {
                this.state = 4033;
                this.match(HiveSQLParser.Identifier);
                this.state = 4034;
                this.match(HiveSQLParser.LPAREN);
                this.state = 4035;
                this.expression();
                this.state = 4036;
                this.match(HiveSQLParser.RPAREN);
                this.state = 4045;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 385) {
                    {
                    {
                    this.state = 4037;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 4038;
                    this.match(HiveSQLParser.Identifier);
                    this.state = 4039;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 4040;
                    this.expression();
                    this.state = 4041;
                    this.match(HiveSQLParser.RPAREN);
                    }
                    }
                    this.state = 4047;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 4050;
            this.match(HiveSQLParser.RPAREN);
            this.state = 4052;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 474, this.context) ) {
            case 1:
                {
                this.state = 4051;
                localContext._alias = this.id_();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 658, HiveSQLParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4054;
            this.match(HiveSQLParser.KW_WHERE);
            this.state = 4055;
            this.searchCondition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchCondition(): SearchConditionContext {
        let localContext = new SearchConditionContext(this.context, this.state);
        this.enterRule(localContext, 660, HiveSQLParser.RULE_searchCondition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4057;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesSource(): ValuesSourceContext {
        let localContext = new ValuesSourceContext(this.context, this.state);
        this.enterRule(localContext, 662, HiveSQLParser.RULE_valuesSource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4059;
            this.valuesClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesClause(): ValuesClauseContext {
        let localContext = new ValuesClauseContext(this.context, this.state);
        this.enterRule(localContext, 664, HiveSQLParser.RULE_valuesClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4061;
            this.match(HiveSQLParser.KW_VALUES);
            this.state = 4062;
            this.valuesTableConstructor();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesTableConstructor(): ValuesTableConstructorContext {
        let localContext = new ValuesTableConstructorContext(this.context, this.state);
        this.enterRule(localContext, 666, HiveSQLParser.RULE_valuesTableConstructor);
        let _la: number;
        try {
            this.state = 4080;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 477, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4064;
                this.valueRowConstructor();
                this.state = 4069;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 385) {
                    {
                    {
                    this.state = 4065;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 4066;
                    this.valueRowConstructor();
                    }
                    }
                    this.state = 4071;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4072;
                this.firstValueRowConstructor();
                this.state = 4077;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 385) {
                    {
                    {
                    this.state = 4073;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 4074;
                    this.valueRowConstructor();
                    }
                    }
                    this.state = 4079;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueRowConstructor(): ValueRowConstructorContext {
        let localContext = new ValueRowConstructorContext(this.context, this.state);
        this.enterRule(localContext, 668, HiveSQLParser.RULE_valueRowConstructor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4082;
            this.expressionsInParenthesis();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public firstValueRowConstructor(): FirstValueRowConstructorContext {
        let localContext = new FirstValueRowConstructorContext(this.context, this.state);
        this.enterRule(localContext, 670, HiveSQLParser.RULE_firstValueRowConstructor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4084;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4085;
            this.firstExpressionsWithAlias();
            this.state = 4086;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public virtualTableSource(): VirtualTableSourceContext {
        let localContext = new VirtualTableSourceContext(this.context, this.state);
        this.enterRule(localContext, 672, HiveSQLParser.RULE_virtualTableSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4088;
            this.match(HiveSQLParser.KW_TABLE);
            this.state = 4089;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4090;
            this.valuesClause();
            this.state = 4091;
            this.match(HiveSQLParser.RPAREN);
            this.state = 4093;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 4092;
                this.match(HiveSQLParser.KW_AS);
                }
            }

            this.state = 4095;
            this.tableAlias();
            this.state = 4105;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 4096;
                this.match(HiveSQLParser.LPAREN);
                this.state = 4097;
                this.id_();
                this.state = 4102;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 385) {
                    {
                    {
                    this.state = 4098;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 4099;
                    this.id_();
                    }
                    }
                    this.state = 4104;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 4107;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectClause(): SelectClauseContext {
        let localContext = new SelectClauseContext(this.context, this.state);
        this.enterRule(localContext, 674, HiveSQLParser.RULE_selectClause);
        let _la: number;
        try {
            this.state = 4122;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4109;
                this.match(HiveSQLParser.KW_SELECT);
                this.state = 4111;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 424) {
                    {
                    this.state = 4110;
                    this.match(HiveSQLParser.QUERY_HINT);
                    }
                }

                this.state = 4119;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_ABORT:
                case HiveSQLParser.KW_ACTIVATE:
                case HiveSQLParser.KW_ACTIVE:
                case HiveSQLParser.KW_ADD:
                case HiveSQLParser.KW_ADMIN:
                case HiveSQLParser.KW_AFTER:
                case HiveSQLParser.KW_ALL:
                case HiveSQLParser.KW_ALLOC_FRACTION:
                case HiveSQLParser.KW_ANALYZE:
                case HiveSQLParser.KW_ARCHIVE:
                case HiveSQLParser.KW_ARRAY:
                case HiveSQLParser.KW_ASC:
                case HiveSQLParser.KW_AST:
                case HiveSQLParser.KW_AT:
                case HiveSQLParser.KW_AUTOCOMMIT:
                case HiveSQLParser.KW_BATCH:
                case HiveSQLParser.KW_BEFORE:
                case HiveSQLParser.KW_BIGINT:
                case HiveSQLParser.KW_BINARY:
                case HiveSQLParser.KW_BOOLEAN:
                case HiveSQLParser.KW_BUCKET:
                case HiveSQLParser.KW_BUCKETS:
                case HiveSQLParser.KW_CACHE:
                case HiveSQLParser.KW_CASCADE:
                case HiveSQLParser.KW_CASE:
                case HiveSQLParser.KW_CAST:
                case HiveSQLParser.KW_CBO:
                case HiveSQLParser.KW_CHANGE:
                case HiveSQLParser.KW_CHECK:
                case HiveSQLParser.KW_CLUSTER:
                case HiveSQLParser.KW_CLUSTERED:
                case HiveSQLParser.KW_CLUSTERSTATUS:
                case HiveSQLParser.KW_COLLECTION:
                case HiveSQLParser.KW_COLUMNS:
                case HiveSQLParser.KW_COMMENT:
                case HiveSQLParser.KW_COMPACT:
                case HiveSQLParser.KW_COMPACTIONS:
                case HiveSQLParser.KW_COMPUTE:
                case HiveSQLParser.KW_CONCATENATE:
                case HiveSQLParser.KW_CONTINUE:
                case HiveSQLParser.KW_COST:
                case HiveSQLParser.KW_CRON:
                case HiveSQLParser.KW_CURRENT_DATE:
                case HiveSQLParser.KW_CURRENT_TIMESTAMP:
                case HiveSQLParser.KW_DATA:
                case HiveSQLParser.KW_DATABASES:
                case HiveSQLParser.KW_DATE:
                case HiveSQLParser.KW_DATETIME:
                case HiveSQLParser.KW_DAY:
                case HiveSQLParser.KW_DAYOFWEEK:
                case HiveSQLParser.KW_DBPROPERTIES:
                case HiveSQLParser.KW_DCPROPERTIES:
                case HiveSQLParser.KW_DEBUG:
                case HiveSQLParser.KW_DEFAULT:
                case HiveSQLParser.KW_DEFERRED:
                case HiveSQLParser.KW_DEFINED:
                case HiveSQLParser.KW_DELIMITED:
                case HiveSQLParser.KW_DEPENDENCY:
                case HiveSQLParser.KW_DESC:
                case HiveSQLParser.KW_DETAIL:
                case HiveSQLParser.KW_DIRECTORIES:
                case HiveSQLParser.KW_DIRECTORY:
                case HiveSQLParser.KW_DISABLE:
                case HiveSQLParser.KW_DISTINCT:
                case HiveSQLParser.KW_DISTRIBUTE:
                case HiveSQLParser.KW_DISTRIBUTED:
                case HiveSQLParser.KW_DO:
                case HiveSQLParser.KW_DOUBLE:
                case HiveSQLParser.KW_DOW:
                case HiveSQLParser.KW_DUMP:
                case HiveSQLParser.KW_ELEM_TYPE:
                case HiveSQLParser.KW_ENABLE:
                case HiveSQLParser.KW_ENFORCED:
                case HiveSQLParser.KW_ESCAPED:
                case HiveSQLParser.KW_EVERY:
                case HiveSQLParser.KW_EXCLUSIVE:
                case HiveSQLParser.KW_EXECUTE:
                case HiveSQLParser.KW_EXECUTED:
                case HiveSQLParser.KW_EXISTS:
                case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
                case HiveSQLParser.KW_EXPLAIN:
                case HiveSQLParser.KW_EXPORT:
                case HiveSQLParser.KW_EXPRESSION:
                case HiveSQLParser.KW_EXTRACT:
                case HiveSQLParser.KW_FALSE:
                case HiveSQLParser.KW_FIELDS:
                case HiveSQLParser.KW_FILE:
                case HiveSQLParser.KW_FILEFORMAT:
                case HiveSQLParser.KW_FIRST:
                case HiveSQLParser.KW_FLOAT:
                case HiveSQLParser.KW_FLOOR:
                case HiveSQLParser.KW_FORMAT:
                case HiveSQLParser.KW_FORMATTED:
                case HiveSQLParser.KW_FUNCTIONS:
                case HiveSQLParser.KW_GROUPING:
                case HiveSQLParser.KW_HOLD_DDLTIME:
                case HiveSQLParser.KW_HOUR:
                case HiveSQLParser.KW_IDXPROPERTIES:
                case HiveSQLParser.KW_IF:
                case HiveSQLParser.KW_IGNORE:
                case HiveSQLParser.KW_INDEX:
                case HiveSQLParser.KW_INDEXES:
                case HiveSQLParser.KW_INPATH:
                case HiveSQLParser.KW_INPUTDRIVER:
                case HiveSQLParser.KW_INPUTFORMAT:
                case HiveSQLParser.KW_INT:
                case HiveSQLParser.KW_INTERVAL:
                case HiveSQLParser.KW_ISOLATION:
                case HiveSQLParser.KW_ITEMS:
                case HiveSQLParser.KW_JAR:
                case HiveSQLParser.KW_JOINCOST:
                case HiveSQLParser.KW_KEY:
                case HiveSQLParser.KW_KEYS:
                case HiveSQLParser.KW_KEY_TYPE:
                case HiveSQLParser.KW_KILL:
                case HiveSQLParser.KW_LAST:
                case HiveSQLParser.KW_LEVEL:
                case HiveSQLParser.KW_LIMIT:
                case HiveSQLParser.KW_LINES:
                case HiveSQLParser.KW_LOAD:
                case HiveSQLParser.KW_LOCATION:
                case HiveSQLParser.KW_LOCK:
                case HiveSQLParser.KW_LOCKS:
                case HiveSQLParser.KW_LOGICAL:
                case HiveSQLParser.KW_LONG:
                case HiveSQLParser.KW_MANAGED:
                case HiveSQLParser.KW_MANAGEDLOCATION:
                case HiveSQLParser.KW_MANAGEMENT:
                case HiveSQLParser.KW_MAP:
                case HiveSQLParser.KW_MAPJOIN:
                case HiveSQLParser.KW_MAPPING:
                case HiveSQLParser.KW_MATCHED:
                case HiveSQLParser.KW_MATERIALIZED:
                case HiveSQLParser.KW_METADATA:
                case HiveSQLParser.KW_MINUTE:
                case HiveSQLParser.KW_MONTH:
                case HiveSQLParser.KW_MOVE:
                case HiveSQLParser.KW_MSCK:
                case HiveSQLParser.KW_NORELY:
                case HiveSQLParser.KW_NOSCAN:
                case HiveSQLParser.KW_NOT:
                case HiveSQLParser.KW_NOVALIDATE:
                case HiveSQLParser.KW_NO_DROP:
                case HiveSQLParser.KW_NULL:
                case HiveSQLParser.KW_NULLS:
                case HiveSQLParser.KW_OFFLINE:
                case HiveSQLParser.KW_OFFSET:
                case HiveSQLParser.KW_OPERATOR:
                case HiveSQLParser.KW_OPTION:
                case HiveSQLParser.KW_OUTPUTDRIVER:
                case HiveSQLParser.KW_OUTPUTFORMAT:
                case HiveSQLParser.KW_OVERWRITE:
                case HiveSQLParser.KW_OWNER:
                case HiveSQLParser.KW_PARTITIONED:
                case HiveSQLParser.KW_PARTITIONS:
                case HiveSQLParser.KW_PATH:
                case HiveSQLParser.KW_PLAN:
                case HiveSQLParser.KW_PLANS:
                case HiveSQLParser.KW_PLUS:
                case HiveSQLParser.KW_POOL:
                case HiveSQLParser.KW_PRINCIPALS:
                case HiveSQLParser.KW_PROTECTION:
                case HiveSQLParser.KW_PURGE:
                case HiveSQLParser.KW_QUARTER:
                case HiveSQLParser.KW_QUERY:
                case HiveSQLParser.KW_QUERY_PARALLELISM:
                case HiveSQLParser.KW_READ:
                case HiveSQLParser.KW_READONLY:
                case HiveSQLParser.KW_REAL:
                case HiveSQLParser.KW_REBUILD:
                case HiveSQLParser.KW_RECORDREADER:
                case HiveSQLParser.KW_RECORDWRITER:
                case HiveSQLParser.KW_RELOAD:
                case HiveSQLParser.KW_RELY:
                case HiveSQLParser.KW_REMOTE:
                case HiveSQLParser.KW_RENAME:
                case HiveSQLParser.KW_REOPTIMIZATION:
                case HiveSQLParser.KW_REPAIR:
                case HiveSQLParser.KW_REPL:
                case HiveSQLParser.KW_REPLACE:
                case HiveSQLParser.KW_REPLICATION:
                case HiveSQLParser.KW_RESOURCE:
                case HiveSQLParser.KW_RESPECT:
                case HiveSQLParser.KW_RESTRICT:
                case HiveSQLParser.KW_REWRITE:
                case HiveSQLParser.KW_ROLE:
                case HiveSQLParser.KW_ROLES:
                case HiveSQLParser.KW_SCHEDULED:
                case HiveSQLParser.KW_SCHEDULING_POLICY:
                case HiveSQLParser.KW_SCHEMA:
                case HiveSQLParser.KW_SCHEMAS:
                case HiveSQLParser.KW_SECOND:
                case HiveSQLParser.KW_SEMI:
                case HiveSQLParser.KW_SERDE:
                case HiveSQLParser.KW_SERDEPROPERTIES:
                case HiveSQLParser.KW_SERVER:
                case HiveSQLParser.KW_SETS:
                case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
                case HiveSQLParser.KW_SHARED:
                case HiveSQLParser.KW_SHOW:
                case HiveSQLParser.KW_SHOW_DATABASE:
                case HiveSQLParser.KW_SKEWED:
                case HiveSQLParser.KW_SMALLINT:
                case HiveSQLParser.KW_SNAPSHOT:
                case HiveSQLParser.KW_SORT:
                case HiveSQLParser.KW_SORTED:
                case HiveSQLParser.KW_SPEC:
                case HiveSQLParser.KW_SSL:
                case HiveSQLParser.KW_STATISTICS:
                case HiveSQLParser.KW_STATUS:
                case HiveSQLParser.KW_STORED:
                case HiveSQLParser.KW_STREAMTABLE:
                case HiveSQLParser.KW_STRING:
                case HiveSQLParser.KW_STRUCT:
                case HiveSQLParser.KW_SUMMARY:
                case HiveSQLParser.KW_SYSTEM_TIME:
                case HiveSQLParser.KW_SYSTEM_VERSION:
                case HiveSQLParser.KW_TABLES:
                case HiveSQLParser.KW_TBLPROPERTIES:
                case HiveSQLParser.KW_TEMPORARY:
                case HiveSQLParser.KW_TERMINATED:
                case HiveSQLParser.KW_TIMESTAMP:
                case HiveSQLParser.KW_TIMESTAMPLOCALTZ:
                case HiveSQLParser.KW_TIMESTAMPTZ:
                case HiveSQLParser.KW_TINYINT:
                case HiveSQLParser.KW_TOUCH:
                case HiveSQLParser.KW_TRANSACTION:
                case HiveSQLParser.KW_TRANSACTIONAL:
                case HiveSQLParser.KW_TRANSACTIONS:
                case HiveSQLParser.KW_TRIM:
                case HiveSQLParser.KW_TRUE:
                case HiveSQLParser.KW_TYPE:
                case HiveSQLParser.KW_UNARCHIVE:
                case HiveSQLParser.KW_UNDO:
                case HiveSQLParser.KW_UNIONTYPE:
                case HiveSQLParser.KW_UNKNOWN:
                case HiveSQLParser.KW_UNLOCK:
                case HiveSQLParser.KW_UNMANAGED:
                case HiveSQLParser.KW_UNSET:
                case HiveSQLParser.KW_UNSIGNED:
                case HiveSQLParser.KW_URI:
                case HiveSQLParser.KW_URL:
                case HiveSQLParser.KW_USE:
                case HiveSQLParser.KW_UTC:
                case HiveSQLParser.KW_UTCTIMESTAMP:
                case HiveSQLParser.KW_VALIDATE:
                case HiveSQLParser.KW_VALUE_TYPE:
                case HiveSQLParser.KW_VECTORIZATION:
                case HiveSQLParser.KW_VIEW:
                case HiveSQLParser.KW_VIEWS:
                case HiveSQLParser.KW_WAIT:
                case HiveSQLParser.KW_WEEK:
                case HiveSQLParser.KW_WHILE:
                case HiveSQLParser.KW_WITHIN:
                case HiveSQLParser.KW_WORK:
                case HiveSQLParser.KW_WORKLOAD:
                case HiveSQLParser.KW_WRITE:
                case HiveSQLParser.KW_YEAR:
                case HiveSQLParser.KW_ZONE:
                case HiveSQLParser.LPAREN:
                case HiveSQLParser.PLUS:
                case HiveSQLParser.MINUS:
                case HiveSQLParser.STAR:
                case HiveSQLParser.TILDE:
                case HiveSQLParser.QUESTION:
                case HiveSQLParser.StringLiteral:
                case HiveSQLParser.IntegralLiteral:
                case HiveSQLParser.NumberLiteral:
                case HiveSQLParser.Number:
                case HiveSQLParser.Identifier:
                case HiveSQLParser.CharSetName:
                    {
                    this.state = 4114;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 7 || _la === 92) {
                        {
                        this.state = 4113;
                        this.all_distinct();
                        }
                    }

                    this.state = 4116;
                    this.selectList();
                    }
                    break;
                case HiveSQLParser.KW_TRANSFORM:
                    {
                    this.state = 4117;
                    this.match(HiveSQLParser.KW_TRANSFORM);
                    this.state = 4118;
                    this.selectTrfmClause();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case HiveSQLParser.KW_MAP:
            case HiveSQLParser.KW_REDUCE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4121;
                this.trfmClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public all_distinct(): All_distinctContext {
        let localContext = new All_distinctContext(this.context, this.state);
        this.enterRule(localContext, 676, HiveSQLParser.RULE_all_distinct);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4124;
            _la = this.tokenStream.LA(1);
            if(!(_la === 7 || _la === 92)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectList(): SelectListContext {
        let localContext = new SelectListContext(this.context, this.state);
        this.enterRule(localContext, 678, HiveSQLParser.RULE_selectList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4126;
            this.selectItem();
            this.state = 4131;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 485, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4127;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 4128;
                    this.selectItem();
                    }
                    }
                }
                this.state = 4133;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 485, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectTrfmClause(): SelectTrfmClauseContext {
        let localContext = new SelectTrfmClauseContext(this.context, this.state);
        this.enterRule(localContext, 680, HiveSQLParser.RULE_selectTrfmClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4134;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4135;
            this.selectExpressionList();
            this.state = 4136;
            this.match(HiveSQLParser.RPAREN);
            this.state = 4137;
            this.rowFormat();
            this.state = 4138;
            this.recordWriter();
            this.state = 4139;
            this.match(HiveSQLParser.KW_USING);
            this.state = 4140;
            this.match(HiveSQLParser.StringLiteral);
            this.state = 4153;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 4141;
                this.match(HiveSQLParser.KW_AS);
                this.state = 4151;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 487, this.context) ) {
                case 1:
                    {
                    this.state = 4142;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 4145;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 486, this.context) ) {
                    case 1:
                        {
                        this.state = 4143;
                        this.aliasList();
                        }
                        break;
                    case 2:
                        {
                        this.state = 4144;
                        this.columnNameTypeList();
                        }
                        break;
                    }
                    this.state = 4147;
                    this.match(HiveSQLParser.RPAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 4149;
                    this.aliasList();
                    }
                    break;
                case 3:
                    {
                    this.state = 4150;
                    this.columnNameTypeList();
                    }
                    break;
                }
                }
            }

            this.state = 4155;
            this.rowFormat();
            this.state = 4156;
            this.recordReader();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItem(): SelectItemContext {
        let localContext = new SelectItemContext(this.context, this.state);
        this.enterRule(localContext, 682, HiveSQLParser.RULE_selectItem);
        let _la: number;
        try {
            this.state = 4178;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 492, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4158;
                this.tableAllColumns();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 4159;
                this.expression();
                this.state = 4176;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 491, this.context) ) {
                case 1:
                    {
                    this.state = 4161;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 4160;
                        this.match(HiveSQLParser.KW_AS);
                        }
                    }

                    this.state = 4163;
                    this.id_();
                    }
                    break;
                case 2:
                    {
                    this.state = 4164;
                    this.match(HiveSQLParser.KW_AS);
                    this.state = 4165;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 4166;
                    this.id_();
                    this.state = 4171;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 385) {
                        {
                        {
                        this.state = 4167;
                        this.match(HiveSQLParser.COMMA);
                        this.state = 4168;
                        this.id_();
                        }
                        }
                        this.state = 4173;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 4174;
                    this.match(HiveSQLParser.RPAREN);
                    }
                    break;
                }
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trfmClause(): TrfmClauseContext {
        let localContext = new TrfmClauseContext(this.context, this.state);
        this.enterRule(localContext, 684, HiveSQLParser.RULE_trfmClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4180;
            _la = this.tokenStream.LA(1);
            if(!(_la === 191 || _la === 259)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4181;
            this.selectExpressionList();
            this.state = 4182;
            this.rowFormat();
            this.state = 4183;
            this.recordWriter();
            this.state = 4184;
            this.match(HiveSQLParser.KW_USING);
            this.state = 4185;
            this.match(HiveSQLParser.StringLiteral);
            this.state = 4198;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 4186;
                this.match(HiveSQLParser.KW_AS);
                this.state = 4196;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 494, this.context) ) {
                case 1:
                    {
                    this.state = 4187;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 4190;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 493, this.context) ) {
                    case 1:
                        {
                        this.state = 4188;
                        this.aliasList();
                        }
                        break;
                    case 2:
                        {
                        this.state = 4189;
                        this.columnNameTypeList();
                        }
                        break;
                    }
                    this.state = 4192;
                    this.match(HiveSQLParser.RPAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 4194;
                    this.aliasList();
                    }
                    break;
                case 3:
                    {
                    this.state = 4195;
                    this.columnNameTypeList();
                    }
                    break;
                }
                }
            }

            this.state = 4200;
            this.rowFormat();
            this.state = 4201;
            this.recordReader();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectExpression(): SelectExpressionContext {
        let localContext = new SelectExpressionContext(this.context, this.state);
        this.enterRule(localContext, 686, HiveSQLParser.RULE_selectExpression);
        try {
            this.state = 4205;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 496, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4203;
                this.tableAllColumns();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4204;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectExpressionList(): SelectExpressionListContext {
        let localContext = new SelectExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 688, HiveSQLParser.RULE_selectExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4207;
            this.selectExpression();
            this.state = 4212;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4208;
                this.match(HiveSQLParser.COMMA);
                this.state = 4209;
                this.selectExpression();
                }
                }
                this.state = 4214;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_clause(): Window_clauseContext {
        let localContext = new Window_clauseContext(this.context, this.state);
        this.enterRule(localContext, 690, HiveSQLParser.RULE_window_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4215;
            this.match(HiveSQLParser.KW_WINDOW);
            this.state = 4216;
            this.window_defn();
            this.state = 4221;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4217;
                this.match(HiveSQLParser.COMMA);
                this.state = 4218;
                this.window_defn();
                }
                }
                this.state = 4223;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_defn(): Window_defnContext {
        let localContext = new Window_defnContext(this.context, this.state);
        this.enterRule(localContext, 692, HiveSQLParser.RULE_window_defn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4224;
            this.id_();
            this.state = 4225;
            this.match(HiveSQLParser.KW_AS);
            this.state = 4226;
            this.window_specification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification(): Window_specificationContext {
        let localContext = new Window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 694, HiveSQLParser.RULE_window_specification);
        let _la: number;
        try {
            this.state = 4240;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4228;
                this.id_();
                }
                break;
            case HiveSQLParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4229;
                this.match(HiveSQLParser.LPAREN);
                this.state = 4231;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 499, this.context) ) {
                case 1:
                    {
                    this.state = 4230;
                    this.id_();
                    }
                    break;
                }
                this.state = 4234;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 41 || _la === 93 || _la === 220 || _la === 228 || _la === 304) {
                    {
                    this.state = 4233;
                    this.partitioningSpec();
                    }
                }

                this.state = 4237;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 251 || _la === 283) {
                    {
                    this.state = 4236;
                    this.window_frame();
                    }
                }

                this.state = 4239;
                this.match(HiveSQLParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame(): Window_frameContext {
        let localContext = new Window_frameContext(this.context, this.state);
        this.enterRule(localContext, 696, HiveSQLParser.RULE_window_frame);
        try {
            this.state = 4244;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ROWS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4242;
                this.window_range_expression();
                }
                break;
            case HiveSQLParser.KW_RANGE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4243;
                this.window_value_expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_range_expression(): Window_range_expressionContext {
        let localContext = new Window_range_expressionContext(this.context, this.state);
        this.enterRule(localContext, 698, HiveSQLParser.RULE_window_range_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4246;
            this.match(HiveSQLParser.KW_ROWS);
            this.state = 4253;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_CURRENT:
            case HiveSQLParser.KW_UNBOUNDED:
            case HiveSQLParser.Number:
                {
                this.state = 4247;
                this.window_frame_start_boundary();
                }
                break;
            case HiveSQLParser.KW_BETWEEN:
                {
                this.state = 4248;
                this.match(HiveSQLParser.KW_BETWEEN);
                this.state = 4249;
                this.window_frame_boundary();
                this.state = 4250;
                this.match(HiveSQLParser.KW_AND);
                this.state = 4251;
                this.window_frame_boundary();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_value_expression(): Window_value_expressionContext {
        let localContext = new Window_value_expressionContext(this.context, this.state);
        this.enterRule(localContext, 700, HiveSQLParser.RULE_window_value_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4255;
            this.match(HiveSQLParser.KW_RANGE);
            this.state = 4262;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_CURRENT:
            case HiveSQLParser.KW_UNBOUNDED:
            case HiveSQLParser.Number:
                {
                this.state = 4256;
                this.window_frame_start_boundary();
                }
                break;
            case HiveSQLParser.KW_BETWEEN:
                {
                this.state = 4257;
                this.match(HiveSQLParser.KW_BETWEEN);
                this.state = 4258;
                this.window_frame_boundary();
                this.state = 4259;
                this.match(HiveSQLParser.KW_AND);
                this.state = 4260;
                this.window_frame_boundary();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_start_boundary(): Window_frame_start_boundaryContext {
        let localContext = new Window_frame_start_boundaryContext(this.context, this.state);
        this.enterRule(localContext, 702, HiveSQLParser.RULE_window_frame_start_boundary);
        try {
            this.state = 4270;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_UNBOUNDED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4264;
                this.match(HiveSQLParser.KW_UNBOUNDED);
                this.state = 4265;
                this.match(HiveSQLParser.KW_PRECEDING);
                }
                break;
            case HiveSQLParser.KW_CURRENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4266;
                this.match(HiveSQLParser.KW_CURRENT);
                this.state = 4267;
                this.match(HiveSQLParser.KW_ROW);
                }
                break;
            case HiveSQLParser.Number:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4268;
                this.match(HiveSQLParser.Number);
                this.state = 4269;
                this.match(HiveSQLParser.KW_PRECEDING);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_boundary(): Window_frame_boundaryContext {
        let localContext = new Window_frame_boundaryContext(this.context, this.state);
        this.enterRule(localContext, 704, HiveSQLParser.RULE_window_frame_boundary);
        let _la: number;
        try {
            this.state = 4276;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_UNBOUNDED:
            case HiveSQLParser.Number:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4272;
                _la = this.tokenStream.LA(1);
                if(!(_la === 344 || _la === 419)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4273;
                _la = this.tokenStream.LA(1);
                if(!(_la === 128 || _la === 238)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case HiveSQLParser.KW_CURRENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4274;
                this.match(HiveSQLParser.KW_CURRENT);
                this.state = 4275;
                this.match(HiveSQLParser.KW_ROW);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 706, HiveSQLParser.RULE_groupByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4278;
            this.match(HiveSQLParser.KW_GROUP);
            this.state = 4279;
            this.match(HiveSQLParser.KW_BY);
            this.state = 4280;
            this.groupby_expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupby_expression(): Groupby_expressionContext {
        let localContext = new Groupby_expressionContext(this.context, this.state);
        this.enterRule(localContext, 708, HiveSQLParser.RULE_groupby_expression);
        try {
            this.state = 4285;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 508, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4282;
                this.rollupStandard();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4283;
                this.rollupOldSyntax();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4284;
                this.groupByEmpty();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByEmpty(): GroupByEmptyContext {
        let localContext = new GroupByEmptyContext(this.context, this.state);
        this.enterRule(localContext, 710, HiveSQLParser.RULE_groupByEmpty);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4287;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4288;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollupStandard(): RollupStandardContext {
        let localContext = new RollupStandardContext(this.context, this.state);
        this.enterRule(localContext, 712, HiveSQLParser.RULE_rollupStandard);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4292;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ROLLUP:
                {
                this.state = 4290;
                localContext._rollup = this.match(HiveSQLParser.KW_ROLLUP);
                }
                break;
            case HiveSQLParser.KW_CUBE:
                {
                this.state = 4291;
                localContext._cube = this.match(HiveSQLParser.KW_CUBE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4294;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4295;
            this.expression();
            this.state = 4300;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4296;
                this.match(HiveSQLParser.COMMA);
                this.state = 4297;
                this.expression();
                }
                }
                this.state = 4302;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4303;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollupOldSyntax(): RollupOldSyntaxContext {
        let localContext = new RollupOldSyntaxContext(this.context, this.state);
        this.enterRule(localContext, 714, HiveSQLParser.RULE_rollupOldSyntax);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4305;
            localContext._expr = this.expressionsNotInParenthesis();
            this.state = 4310;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 511, this.context) ) {
            case 1:
                {
                this.state = 4306;
                localContext._rollup = this.match(HiveSQLParser.KW_WITH);
                this.state = 4307;
                this.match(HiveSQLParser.KW_ROLLUP);
                }
                break;
            case 2:
                {
                this.state = 4308;
                localContext._cube = this.match(HiveSQLParser.KW_WITH);
                this.state = 4309;
                this.match(HiveSQLParser.KW_CUBE);
                }
                break;
            }
            this.state = 4325;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 140) {
                {
                this.state = 4312;
                localContext._sets = this.match(HiveSQLParser.KW_GROUPING);
                this.state = 4313;
                this.match(HiveSQLParser.KW_SETS);
                this.state = 4314;
                this.match(HiveSQLParser.LPAREN);
                this.state = 4315;
                this.groupingSetExpression();
                this.state = 4320;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 385) {
                    {
                    {
                    this.state = 4316;
                    this.match(HiveSQLParser.COMMA);
                    this.state = 4317;
                    this.groupingSetExpression();
                    }
                    }
                    this.state = 4322;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4323;
                this.match(HiveSQLParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSetExpression(): GroupingSetExpressionContext {
        let localContext = new GroupingSetExpressionContext(this.context, this.state);
        this.enterRule(localContext, 716, HiveSQLParser.RULE_groupingSetExpression);
        try {
            this.state = 4329;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 514, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4327;
                this.groupingSetExpressionMultiple();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4328;
                this.groupingExpressionSingle();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSetExpressionMultiple(): GroupingSetExpressionMultipleContext {
        let localContext = new GroupingSetExpressionMultipleContext(this.context, this.state);
        this.enterRule(localContext, 718, HiveSQLParser.RULE_groupingSetExpressionMultiple);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4331;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4333;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3722282366) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3315298239) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 4225619941) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 531889387) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3404527907) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4286435581) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815314285) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 1035682279) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750143) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 4019565487) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 71247831) !== 0) || ((((_la - 402)) & ~0x1F) === 0 && ((1 << (_la - 402)) & 971843) !== 0)) {
                {
                this.state = 4332;
                this.expression();
                }
            }

            this.state = 4339;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4335;
                this.match(HiveSQLParser.COMMA);
                this.state = 4336;
                this.expression();
                }
                }
                this.state = 4341;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4342;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingExpressionSingle(): GroupingExpressionSingleContext {
        let localContext = new GroupingExpressionSingleContext(this.context, this.state);
        this.enterRule(localContext, 720, HiveSQLParser.RULE_groupingExpressionSingle);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4344;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 722, HiveSQLParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4346;
            this.match(HiveSQLParser.KW_HAVING);
            this.state = 4347;
            this.havingCondition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifyClause(): QualifyClauseContext {
        let localContext = new QualifyClauseContext(this.context, this.state);
        this.enterRule(localContext, 724, HiveSQLParser.RULE_qualifyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4349;
            this.match(HiveSQLParser.KW_QUALIFY);
            this.state = 4350;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingCondition(): HavingConditionContext {
        let localContext = new HavingConditionContext(this.context, this.state);
        this.enterRule(localContext, 726, HiveSQLParser.RULE_havingCondition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4352;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext {
        let localContext = new ExpressionsInParenthesisContext(this.context, this.state);
        this.enterRule(localContext, 728, HiveSQLParser.RULE_expressionsInParenthesis);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4354;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4355;
            this.expressionsNotInParenthesis();
            this.state = 4356;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
        let localContext = new ExpressionsNotInParenthesisContext(this.context, this.state);
        this.enterRule(localContext, 730, HiveSQLParser.RULE_expressionsNotInParenthesis);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4358;
            localContext._first = this.expressionOrDefault();
            this.state = 4360;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 385) {
                {
                this.state = 4359;
                localContext._more = this.expressionPart();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionPart(): ExpressionPartContext {
        let localContext = new ExpressionPartContext(this.context, this.state);
        this.enterRule(localContext, 732, HiveSQLParser.RULE_expressionPart);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4364;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4362;
                this.match(HiveSQLParser.COMMA);
                this.state = 4363;
                this.expressionOrDefault();
                }
                }
                this.state = 4366;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 385);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionOrDefault(): ExpressionOrDefaultContext {
        let localContext = new ExpressionOrDefaultContext(this.context, this.state);
        this.enterRule(localContext, 734, HiveSQLParser.RULE_expressionOrDefault);
        try {
            this.state = 4370;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 519, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4368;
                this.defaultValue();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4369;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public firstExpressionsWithAlias(): FirstExpressionsWithAliasContext {
        let localContext = new FirstExpressionsWithAliasContext(this.context, this.state);
        this.enterRule(localContext, 736, HiveSQLParser.RULE_firstExpressionsWithAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4372;
            localContext._first = this.expression();
            this.state = 4374;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 4373;
                this.match(HiveSQLParser.KW_AS);
                }
            }

            this.state = 4377;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3236739107) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4152217853) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815305069) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 968573415) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750079) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 1004889323) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4138967) !== 0) || _la === 420) {
                {
                this.state = 4376;
                localContext._colAlias = this.id_();
                }
            }

            this.state = 4383;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4379;
                this.match(HiveSQLParser.COMMA);
                this.state = 4380;
                this.expressionWithAlias();
                }
                }
                this.state = 4385;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionWithAlias(): ExpressionWithAliasContext {
        let localContext = new ExpressionWithAliasContext(this.context, this.state);
        this.enterRule(localContext, 738, HiveSQLParser.RULE_expressionWithAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4386;
            this.expression();
            this.state = 4388;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 4387;
                this.match(HiveSQLParser.KW_AS);
                }
            }

            this.state = 4391;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3236739107) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4152217853) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815305069) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 968573415) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750079) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 1004889323) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4138967) !== 0) || _la === 420) {
                {
                this.state = 4390;
                localContext._alias = this.id_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressions(): ExpressionsContext {
        let localContext = new ExpressionsContext(this.context, this.state);
        this.enterRule(localContext, 740, HiveSQLParser.RULE_expressions);
        try {
            this.state = 4395;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 525, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4393;
                this.expressionsInParenthesis();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4394;
                this.expressionsNotInParenthesis();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnRefOrderInParenthesis(): ColumnRefOrderInParenthesisContext {
        let localContext = new ColumnRefOrderInParenthesisContext(this.context, this.state);
        this.enterRule(localContext, 742, HiveSQLParser.RULE_columnRefOrderInParenthesis);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4397;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4398;
            this.columnRefOrder();
            this.state = 4403;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4399;
                this.match(HiveSQLParser.COMMA);
                this.state = 4400;
                this.columnRefOrder();
                }
                }
                this.state = 4405;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4406;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnRefOrderNotInParenthesis(): ColumnRefOrderNotInParenthesisContext {
        let localContext = new ColumnRefOrderNotInParenthesisContext(this.context, this.state);
        this.enterRule(localContext, 744, HiveSQLParser.RULE_columnRefOrderNotInParenthesis);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4408;
            this.columnRefOrder();
            this.state = 4413;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4409;
                this.match(HiveSQLParser.COMMA);
                this.state = 4410;
                this.columnRefOrder();
                }
                }
                this.state = 4415;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByClause(): OrderByClauseContext {
        let localContext = new OrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 746, HiveSQLParser.RULE_orderByClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4416;
            this.match(HiveSQLParser.KW_ORDER);
            this.state = 4417;
            this.match(HiveSQLParser.KW_BY);
            this.state = 4418;
            this.columnRefOrder();
            this.state = 4423;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4419;
                this.match(HiveSQLParser.COMMA);
                this.state = 4420;
                this.columnRefOrder();
                }
                }
                this.state = 4425;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterByClause(): ClusterByClauseContext {
        let localContext = new ClusterByClauseContext(this.context, this.state);
        this.enterRule(localContext, 748, HiveSQLParser.RULE_clusterByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4426;
            this.match(HiveSQLParser.KW_CLUSTER);
            this.state = 4427;
            this.match(HiveSQLParser.KW_BY);
            this.state = 4428;
            this.expressions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionByClause(): PartitionByClauseContext {
        let localContext = new PartitionByClauseContext(this.context, this.state);
        this.enterRule(localContext, 750, HiveSQLParser.RULE_partitionByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4430;
            this.match(HiveSQLParser.KW_PARTITION);
            this.state = 4431;
            this.match(HiveSQLParser.KW_BY);
            this.state = 4432;
            this.expressions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distributeByClause(): DistributeByClauseContext {
        let localContext = new DistributeByClauseContext(this.context, this.state);
        this.enterRule(localContext, 752, HiveSQLParser.RULE_distributeByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4434;
            this.match(HiveSQLParser.KW_DISTRIBUTE);
            this.state = 4435;
            this.match(HiveSQLParser.KW_BY);
            this.state = 4436;
            this.expressions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortByClause(): SortByClauseContext {
        let localContext = new SortByClauseContext(this.context, this.state);
        this.enterRule(localContext, 754, HiveSQLParser.RULE_sortByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4438;
            this.match(HiveSQLParser.KW_SORT);
            this.state = 4439;
            this.match(HiveSQLParser.KW_BY);
            this.state = 4442;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 529, this.context) ) {
            case 1:
                {
                this.state = 4440;
                this.columnRefOrderInParenthesis();
                }
                break;
            case 2:
                {
                this.state = 4441;
                this.columnRefOrderNotInParenthesis();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimFunction(): TrimFunctionContext {
        let localContext = new TrimFunctionContext(this.context, this.state);
        this.enterRule(localContext, 756, HiveSQLParser.RULE_trimFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4444;
            this.match(HiveSQLParser.KW_TRIM);
            this.state = 4445;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4449;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_LEADING:
                {
                this.state = 4446;
                localContext._leading = this.match(HiveSQLParser.KW_LEADING);
                }
                break;
            case HiveSQLParser.KW_TRAILING:
                {
                this.state = 4447;
                localContext._trailing = this.match(HiveSQLParser.KW_TRAILING);
                }
                break;
            case HiveSQLParser.KW_BOTH:
                {
                this.state = 4448;
                this.match(HiveSQLParser.KW_BOTH);
                }
                break;
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ARRAY:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BIGINT:
            case HiveSQLParser.KW_BINARY:
            case HiveSQLParser.KW_BOOLEAN:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CASE:
            case HiveSQLParser.KW_CAST:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_CURRENT_DATE:
            case HiveSQLParser.KW_CURRENT_TIMESTAMP:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATE:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOUBLE:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXISTS:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_EXTRACT:
            case HiveSQLParser.KW_FALSE:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FLOAT:
            case HiveSQLParser.KW_FLOOR:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FROM:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_GROUPING:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IF:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_INT:
            case HiveSQLParser.KW_INTERVAL:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAP:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOT:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULL:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REAL:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SMALLINT:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMP:
            case HiveSQLParser.KW_TIMESTAMPLOCALTZ:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TRUE:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.LPAREN:
            case HiveSQLParser.PLUS:
            case HiveSQLParser.MINUS:
            case HiveSQLParser.STAR:
            case HiveSQLParser.TILDE:
            case HiveSQLParser.QUESTION:
            case HiveSQLParser.StringLiteral:
            case HiveSQLParser.IntegralLiteral:
            case HiveSQLParser.NumberLiteral:
            case HiveSQLParser.Number:
            case HiveSQLParser.Identifier:
            case HiveSQLParser.CharSetName:
                break;
            default:
                break;
            }
            this.state = 4452;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3722282366) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3315298239) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 4225619941) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 531889387) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3404527907) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4286435581) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815314285) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 1035682279) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750143) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 4019565487) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 71247831) !== 0) || ((((_la - 402)) & ~0x1F) === 0 && ((1 << (_la - 402)) & 971847) !== 0)) {
                {
                this.state = 4451;
                localContext._trim_characters = this.selectExpression();
                }
            }

            this.state = 4454;
            this.match(HiveSQLParser.KW_FROM);
            this.state = 4455;
            localContext._str = this.selectExpression();
            this.state = 4456;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_(): Function_Context {
        let localContext = new Function_Context(this.context, this.state);
        this.enterRule(localContext, 758, HiveSQLParser.RULE_function_);
        let _la: number;
        try {
            this.state = 4498;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 538, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4458;
                this.trimFunction();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4459;
                this.functionName();
                this.state = 4460;
                this.match(HiveSQLParser.LPAREN);
                this.state = 4475;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 535, this.context) ) {
                case 1:
                    {
                    this.state = 4461;
                    localContext._star = this.match(HiveSQLParser.STAR);
                    }
                    break;
                case 2:
                    {
                    this.state = 4463;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 7 || _la === 92) {
                        {
                        this.state = 4462;
                        localContext._dist = this.all_distinct();
                        }
                    }

                    this.state = 4473;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 534, this.context) ) {
                    case 1:
                        {
                        this.state = 4465;
                        this.selectExpression();
                        this.state = 4470;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 385) {
                            {
                            {
                            this.state = 4466;
                            this.match(HiveSQLParser.COMMA);
                            this.state = 4467;
                            this.selectExpression();
                            }
                            }
                            this.state = 4472;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                        break;
                    }
                    }
                    break;
                }
                this.state = 4496;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 537, this.context) ) {
                case 1:
                    {
                    this.state = 4477;
                    this.match(HiveSQLParser.RPAREN);
                    this.state = 4478;
                    localContext._within = this.match(HiveSQLParser.KW_WITHIN);
                    this.state = 4479;
                    this.match(HiveSQLParser.KW_GROUP);
                    this.state = 4480;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 4481;
                    localContext._ordBy = this.orderByClause();
                    this.state = 4482;
                    this.match(HiveSQLParser.RPAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 4484;
                    this.match(HiveSQLParser.RPAREN);
                    this.state = 4486;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 147 || _la === 272) {
                        {
                        this.state = 4485;
                        localContext._nt = this.null_treatment();
                        }
                    }

                    this.state = 4488;
                    this.match(HiveSQLParser.KW_OVER);
                    this.state = 4489;
                    localContext._ws = this.window_specification();
                    }
                    break;
                case 3:
                    {
                    this.state = 4490;
                    localContext._nt = this.null_treatment();
                    this.state = 4491;
                    this.match(HiveSQLParser.RPAREN);
                    this.state = 4492;
                    this.match(HiveSQLParser.KW_OVER);
                    this.state = 4493;
                    localContext._ws = this.window_specification();
                    }
                    break;
                case 4:
                    {
                    this.state = 4495;
                    this.match(HiveSQLParser.RPAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public null_treatment(): Null_treatmentContext {
        let localContext = new Null_treatmentContext(this.context, this.state);
        this.enterRule(localContext, 760, HiveSQLParser.RULE_null_treatment);
        try {
            this.state = 4504;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_RESPECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4500;
                this.match(HiveSQLParser.KW_RESPECT);
                this.state = 4501;
                this.match(HiveSQLParser.KW_NULLS);
                }
                break;
            case HiveSQLParser.KW_IGNORE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4502;
                this.match(HiveSQLParser.KW_IGNORE);
                this.state = 4503;
                this.match(HiveSQLParser.KW_NULLS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionName(): FunctionNameContext {
        let localContext = new FunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 762, HiveSQLParser.RULE_functionName);
        try {
            this.state = 4508;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4506;
                this.functionIdentifier();
                }
                break;
            case HiveSQLParser.KW_ARRAY:
            case HiveSQLParser.KW_BIGINT:
            case HiveSQLParser.KW_BINARY:
            case HiveSQLParser.KW_BOOLEAN:
            case HiveSQLParser.KW_CURRENT_DATE:
            case HiveSQLParser.KW_CURRENT_TIMESTAMP:
            case HiveSQLParser.KW_DATE:
            case HiveSQLParser.KW_DOUBLE:
            case HiveSQLParser.KW_FLOAT:
            case HiveSQLParser.KW_GROUPING:
            case HiveSQLParser.KW_IF:
            case HiveSQLParser.KW_INT:
            case HiveSQLParser.KW_MAP:
            case HiveSQLParser.KW_REAL:
            case HiveSQLParser.KW_SMALLINT:
            case HiveSQLParser.KW_TIMESTAMP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4507;
                this.sql11ReservedKeywordsUsedAsFunctionName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public castExpression(): CastExpressionContext {
        let localContext = new CastExpressionContext(this.context, this.state);
        this.enterRule(localContext, 764, HiveSQLParser.RULE_castExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4510;
            this.match(HiveSQLParser.KW_CAST);
            this.state = 4511;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4512;
            this.expression();
            this.state = 4513;
            this.match(HiveSQLParser.KW_AS);
            this.state = 4514;
            localContext._toType = this.primitiveType();
            this.state = 4517;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 132) {
                {
                this.state = 4515;
                localContext._fmt = this.match(HiveSQLParser.KW_FORMAT);
                this.state = 4516;
                this.match(HiveSQLParser.StringLiteral);
                }
            }

            this.state = 4519;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseExpression(): CaseExpressionContext {
        let localContext = new CaseExpressionContext(this.context, this.state);
        this.enterRule(localContext, 766, HiveSQLParser.RULE_caseExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4521;
            this.match(HiveSQLParser.KW_CASE);
            this.state = 4522;
            this.expression();
            this.state = 4528;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4523;
                this.match(HiveSQLParser.KW_WHEN);
                this.state = 4524;
                this.expression();
                this.state = 4525;
                this.match(HiveSQLParser.KW_THEN);
                this.state = 4526;
                this.expression();
                }
                }
                this.state = 4530;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 372);
            this.state = 4534;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 101) {
                {
                this.state = 4532;
                this.match(HiveSQLParser.KW_ELSE);
                this.state = 4533;
                this.expression();
                }
            }

            this.state = 4536;
            this.match(HiveSQLParser.KW_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenExpression(): WhenExpressionContext {
        let localContext = new WhenExpressionContext(this.context, this.state);
        this.enterRule(localContext, 768, HiveSQLParser.RULE_whenExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4538;
            this.match(HiveSQLParser.KW_CASE);
            this.state = 4544;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4539;
                this.match(HiveSQLParser.KW_WHEN);
                this.state = 4540;
                this.expression();
                this.state = 4541;
                this.match(HiveSQLParser.KW_THEN);
                this.state = 4542;
                this.expression();
                }
                }
                this.state = 4546;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 372);
            this.state = 4550;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 101) {
                {
                this.state = 4548;
                this.match(HiveSQLParser.KW_ELSE);
                this.state = 4549;
                this.expression();
                }
            }

            this.state = 4552;
            this.match(HiveSQLParser.KW_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floorExpression(): FloorExpressionContext {
        let localContext = new FloorExpressionContext(this.context, this.state);
        this.enterRule(localContext, 770, HiveSQLParser.RULE_floorExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4554;
            this.match(HiveSQLParser.KW_FLOOR);
            this.state = 4555;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4556;
            this.expression();
            this.state = 4559;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 331) {
                {
                this.state = 4557;
                this.match(HiveSQLParser.KW_TO);
                this.state = 4558;
                localContext._floorUnit = this.floorDateQualifiers();
                }
            }

            this.state = 4561;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floorDateQualifiers(): FloorDateQualifiersContext {
        let localContext = new FloorDateQualifiersContext(this.context, this.state);
        this.enterRule(localContext, 772, HiveSQLParser.RULE_floorDateQualifiers);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4563;
            _la = this.tokenStream.LA(1);
            if(!(_la === 73 || _la === 144 || _la === 199 || _la === 200 || _la === 248 || _la === 288 || _la === 371 || _la === 381)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extractExpression(): ExtractExpressionContext {
        let localContext = new ExtractExpressionContext(this.context, this.state);
        this.enterRule(localContext, 774, HiveSQLParser.RULE_extractExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4565;
            this.match(HiveSQLParser.KW_EXTRACT);
            this.state = 4566;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4567;
            localContext._timeUnit = this.timeQualifiers();
            this.state = 4568;
            this.match(HiveSQLParser.KW_FROM);
            this.state = 4569;
            this.expression();
            this.state = 4570;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeQualifiers(): TimeQualifiersContext {
        let localContext = new TimeQualifiersContext(this.context, this.state);
        this.enterRule(localContext, 776, HiveSQLParser.RULE_timeQualifiers);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4572;
            _la = this.tokenStream.LA(1);
            if(!(_la === 73 || _la === 97 || _la === 144 || _la === 199 || _la === 200 || _la === 248 || _la === 288 || _la === 371 || _la === 381)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constant(): ConstantContext {
        let localContext = new ConstantContext(this.context, this.state);
        this.enterRule(localContext, 778, HiveSQLParser.RULE_constant);
        try {
            this.state = 4587;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 547, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4574;
                this.intervalLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4575;
                this.match(HiveSQLParser.Number);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4576;
                this.dateLiteral();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4577;
                this.timestampLiteral();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4578;
                this.timestampLocalTZLiteral();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4579;
                this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4580;
                this.stringLiteralSequence();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4581;
                this.match(HiveSQLParser.IntegralLiteral);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4582;
                this.match(HiveSQLParser.NumberLiteral);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4583;
                this.charSetStringLiteral();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4584;
                this.booleanValue();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4585;
                this.match(HiveSQLParser.KW_NULL);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4586;
                this.prepareStmtParam();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prepareStmtParam(): PrepareStmtParamContext {
        let localContext = new PrepareStmtParamContext(this.context, this.state);
        this.enterRule(localContext, 780, HiveSQLParser.RULE_prepareStmtParam);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4589;
            localContext._p = this.parameterIdx();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public parameterIdx(): ParameterIdxContext {
        let localContext = new ParameterIdxContext(this.context, this.state);
        this.enterRule(localContext, 782, HiveSQLParser.RULE_parameterIdx);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4591;
            this.match(HiveSQLParser.QUESTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLiteralSequence(): StringLiteralSequenceContext {
        let localContext = new StringLiteralSequenceContext(this.context, this.state);
        this.enterRule(localContext, 784, HiveSQLParser.RULE_stringLiteralSequence);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4593;
            this.match(HiveSQLParser.StringLiteral);
            this.state = 4595;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4594;
                this.match(HiveSQLParser.StringLiteral);
                }
                }
                this.state = 4597;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 414);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public charSetStringLiteral(): CharSetStringLiteralContext {
        let localContext = new CharSetStringLiteralContext(this.context, this.state);
        this.enterRule(localContext, 786, HiveSQLParser.RULE_charSetStringLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4599;
            localContext._csName = this.match(HiveSQLParser.CharSetName);
            this.state = 4600;
            localContext._csLiteral = this.match(HiveSQLParser.CharSetLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateLiteral(): DateLiteralContext {
        let localContext = new DateLiteralContext(this.context, this.state);
        this.enterRule(localContext, 788, HiveSQLParser.RULE_dateLiteral);
        try {
            this.state = 4605;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_DATE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4602;
                this.match(HiveSQLParser.KW_DATE);
                this.state = 4603;
                this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case HiveSQLParser.KW_CURRENT_DATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4604;
                this.match(HiveSQLParser.KW_CURRENT_DATE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timestampLiteral(): TimestampLiteralContext {
        let localContext = new TimestampLiteralContext(this.context, this.state);
        this.enterRule(localContext, 790, HiveSQLParser.RULE_timestampLiteral);
        try {
            this.state = 4610;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_TIMESTAMP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4607;
                this.match(HiveSQLParser.KW_TIMESTAMP);
                this.state = 4608;
                this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case HiveSQLParser.KW_CURRENT_TIMESTAMP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4609;
                this.match(HiveSQLParser.KW_CURRENT_TIMESTAMP);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timestampLocalTZLiteral(): TimestampLocalTZLiteralContext {
        let localContext = new TimestampLocalTZLiteralContext(this.context, this.state);
        this.enterRule(localContext, 792, HiveSQLParser.RULE_timestampLocalTZLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4612;
            this.match(HiveSQLParser.KW_TIMESTAMPLOCALTZ);
            this.state = 4613;
            this.match(HiveSQLParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalValue(): IntervalValueContext {
        let localContext = new IntervalValueContext(this.context, this.state);
        this.enterRule(localContext, 794, HiveSQLParser.RULE_intervalValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4615;
            _la = this.tokenStream.LA(1);
            if(!(_la === 414 || _la === 419)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalLiteral(): IntervalLiteralContext {
        let localContext = new IntervalLiteralContext(this.context, this.state);
        this.enterRule(localContext, 796, HiveSQLParser.RULE_intervalLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4617;
            localContext._value = this.intervalValue();
            this.state = 4618;
            localContext._qualifiers = this.intervalQualifiers();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalExpression(): IntervalExpressionContext {
        let localContext = new IntervalExpressionContext(this.context, this.state);
        this.enterRule(localContext, 798, HiveSQLParser.RULE_intervalExpression);
        try {
            this.state = 4635;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.LPAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4620;
                this.match(HiveSQLParser.LPAREN);
                this.state = 4621;
                localContext._value = this.intervalValue();
                this.state = 4622;
                this.match(HiveSQLParser.RPAREN);
                this.state = 4623;
                localContext._qualifiers = this.intervalQualifiers();
                }
                break;
            case HiveSQLParser.KW_INTERVAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4625;
                this.match(HiveSQLParser.KW_INTERVAL);
                this.state = 4631;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.StringLiteral:
                case HiveSQLParser.Number:
                    {
                    this.state = 4626;
                    localContext._value = this.intervalValue();
                    }
                    break;
                case HiveSQLParser.LPAREN:
                    {
                    this.state = 4627;
                    this.match(HiveSQLParser.LPAREN);
                    this.state = 4628;
                    localContext._expr = this.expression();
                    this.state = 4629;
                    this.match(HiveSQLParser.RPAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4633;
                localContext._qualifiers = this.intervalQualifiers();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalQualifiers(): IntervalQualifiersContext {
        let localContext = new IntervalQualifiersContext(this.context, this.state);
        this.enterRule(localContext, 800, HiveSQLParser.RULE_intervalQualifiers);
        try {
            this.state = 4649;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 553, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4637;
                this.match(HiveSQLParser.KW_YEAR);
                this.state = 4638;
                this.match(HiveSQLParser.KW_TO);
                this.state = 4639;
                this.match(HiveSQLParser.KW_MONTH);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4640;
                this.match(HiveSQLParser.KW_DAY);
                this.state = 4641;
                this.match(HiveSQLParser.KW_TO);
                this.state = 4642;
                this.match(HiveSQLParser.KW_SECOND);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4643;
                this.match(HiveSQLParser.KW_YEAR);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4644;
                this.match(HiveSQLParser.KW_MONTH);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4645;
                this.match(HiveSQLParser.KW_DAY);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4646;
                this.match(HiveSQLParser.KW_HOUR);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4647;
                this.match(HiveSQLParser.KW_MINUTE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4648;
                this.match(HiveSQLParser.KW_SECOND);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 802, HiveSQLParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4651;
            this.precedenceOrExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomExpression(): AtomExpressionContext {
        let localContext = new AtomExpressionContext(this.context, this.state);
        this.enterRule(localContext, 804, HiveSQLParser.RULE_atomExpression);
        try {
            this.state = 4664;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 554, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4653;
                this.constant();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4654;
                this.intervalExpression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4655;
                this.castExpression();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4656;
                this.extractExpression();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4657;
                this.floorExpression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4658;
                this.caseExpression();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4659;
                this.whenExpression();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4660;
                this.subQueryExpression();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4661;
                this.function_();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4662;
                this.tableOrColumn();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4663;
                this.expressionsInParenthesis();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceFieldExpression(): PrecedenceFieldExpressionContext {
        let localContext = new PrecedenceFieldExpressionContext(this.context, this.state);
        this.enterRule(localContext, 806, HiveSQLParser.RULE_precedenceFieldExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4666;
            this.atomExpression();
            this.state = 4675;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 383 || _la === 389) {
                {
                this.state = 4673;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.LSQUARE:
                    {
                    this.state = 4667;
                    this.match(HiveSQLParser.LSQUARE);
                    this.state = 4668;
                    this.expression();
                    this.state = 4669;
                    this.match(HiveSQLParser.RSQUARE);
                    }
                    break;
                case HiveSQLParser.DOT:
                    {
                    this.state = 4671;
                    this.match(HiveSQLParser.DOT);
                    this.state = 4672;
                    this.id_();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 4677;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceUnaryOperator(): PrecedenceUnaryOperatorContext {
        let localContext = new PrecedenceUnaryOperatorContext(this.context, this.state);
        this.enterRule(localContext, 808, HiveSQLParser.RULE_precedenceUnaryOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4678;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 402)) & ~0x1F) === 0 && ((1 << (_la - 402)) & 67) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceUnaryPrefixExpression(): PrecedenceUnaryPrefixExpressionContext {
        let localContext = new PrecedenceUnaryPrefixExpressionContext(this.context, this.state);
        this.enterRule(localContext, 810, HiveSQLParser.RULE_precedenceUnaryPrefixExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4683;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 402)) & ~0x1F) === 0 && ((1 << (_la - 402)) & 67) !== 0)) {
                {
                {
                this.state = 4680;
                this.precedenceUnaryOperator();
                }
                }
                this.state = 4685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4686;
            this.precedenceFieldExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceBitwiseXorOperator(): PrecedenceBitwiseXorOperatorContext {
        let localContext = new PrecedenceBitwiseXorOperatorContext(this.context, this.state);
        this.enterRule(localContext, 812, HiveSQLParser.RULE_precedenceBitwiseXorOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4688;
            this.match(HiveSQLParser.BITWISEXOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceBitwiseXorExpression(): PrecedenceBitwiseXorExpressionContext {
        let localContext = new PrecedenceBitwiseXorExpressionContext(this.context, this.state);
        this.enterRule(localContext, 814, HiveSQLParser.RULE_precedenceBitwiseXorExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4690;
            this.precedenceUnaryPrefixExpression();
            this.state = 4696;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 411) {
                {
                {
                this.state = 4691;
                this.precedenceBitwiseXorOperator();
                this.state = 4692;
                this.precedenceUnaryPrefixExpression();
                }
                }
                this.state = 4698;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceStarOperator(): PrecedenceStarOperatorContext {
        let localContext = new PrecedenceStarOperatorContext(this.context, this.state);
        this.enterRule(localContext, 816, HiveSQLParser.RULE_precedenceStarOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4699;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & 57) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceStarExpression(): PrecedenceStarExpressionContext {
        let localContext = new PrecedenceStarExpressionContext(this.context, this.state);
        this.enterRule(localContext, 818, HiveSQLParser.RULE_precedenceStarExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4701;
            this.precedenceBitwiseXorExpression();
            this.state = 4707;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 401)) & ~0x1F) === 0 && ((1 << (_la - 401)) & 57) !== 0)) {
                {
                {
                this.state = 4702;
                this.precedenceStarOperator();
                this.state = 4703;
                this.precedenceBitwiseXorExpression();
                }
                }
                this.state = 4709;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedencePlusOperator(): PrecedencePlusOperatorContext {
        let localContext = new PrecedencePlusOperatorContext(this.context, this.state);
        this.enterRule(localContext, 820, HiveSQLParser.RULE_precedencePlusOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4710;
            _la = this.tokenStream.LA(1);
            if(!(_la === 402 || _la === 403)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedencePlusExpression(): PrecedencePlusExpressionContext {
        let localContext = new PrecedencePlusExpressionContext(this.context, this.state);
        this.enterRule(localContext, 822, HiveSQLParser.RULE_precedencePlusExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4712;
            this.precedenceStarExpression();
            this.state = 4718;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 402 || _la === 403) {
                {
                {
                this.state = 4713;
                this.precedencePlusOperator();
                this.state = 4714;
                this.precedenceStarExpression();
                }
                }
                this.state = 4720;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceConcatenateOperator(): PrecedenceConcatenateOperatorContext {
        let localContext = new PrecedenceConcatenateOperatorContext(this.context, this.state);
        this.enterRule(localContext, 824, HiveSQLParser.RULE_precedenceConcatenateOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4721;
            this.match(HiveSQLParser.CONCATENATE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceConcatenateExpression(): PrecedenceConcatenateExpressionContext {
        let localContext = new PrecedenceConcatenateExpressionContext(this.context, this.state);
        this.enterRule(localContext, 826, HiveSQLParser.RULE_precedenceConcatenateExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4723;
            this.precedencePlusExpression();
            this.state = 4729;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 410) {
                {
                {
                this.state = 4724;
                this.precedenceConcatenateOperator();
                this.state = 4725;
                localContext._plus = this.precedencePlusExpression();
                }
                }
                this.state = 4731;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceAmpersandOperator(): PrecedenceAmpersandOperatorContext {
        let localContext = new PrecedenceAmpersandOperatorContext(this.context, this.state);
        this.enterRule(localContext, 828, HiveSQLParser.RULE_precedenceAmpersandOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4732;
            this.match(HiveSQLParser.AMPERSAND);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceAmpersandExpression(): PrecedenceAmpersandExpressionContext {
        let localContext = new PrecedenceAmpersandExpressionContext(this.context, this.state);
        this.enterRule(localContext, 830, HiveSQLParser.RULE_precedenceAmpersandExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4734;
            this.precedenceConcatenateExpression();
            this.state = 4740;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 407) {
                {
                {
                this.state = 4735;
                this.precedenceAmpersandOperator();
                this.state = 4736;
                this.precedenceConcatenateExpression();
                }
                }
                this.state = 4742;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceBitwiseOrOperator(): PrecedenceBitwiseOrOperatorContext {
        let localContext = new PrecedenceBitwiseOrOperatorContext(this.context, this.state);
        this.enterRule(localContext, 832, HiveSQLParser.RULE_precedenceBitwiseOrOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4743;
            this.match(HiveSQLParser.BITWISEOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext {
        let localContext = new PrecedenceBitwiseOrExpressionContext(this.context, this.state);
        this.enterRule(localContext, 834, HiveSQLParser.RULE_precedenceBitwiseOrExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4745;
            this.precedenceAmpersandExpression();
            this.state = 4751;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 409) {
                {
                {
                this.state = 4746;
                this.precedenceBitwiseOrOperator();
                this.state = 4747;
                this.precedenceAmpersandExpression();
                }
                }
                this.state = 4753;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceRegexpOperator(): PrecedenceRegexpOperatorContext {
        let localContext = new PrecedenceRegexpOperatorContext(this.context, this.state);
        this.enterRule(localContext, 836, HiveSQLParser.RULE_precedenceRegexpOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4754;
            _la = this.tokenStream.LA(1);
            if(!(_la === 177 || _la === 261 || _la === 277)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarOperator(): PrecedenceSimilarOperatorContext {
        let localContext = new PrecedenceSimilarOperatorContext(this.context, this.state);
        this.enterRule(localContext, 838, HiveSQLParser.RULE_precedenceSimilarOperator);
        try {
            this.state = 4761;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_LIKE:
            case HiveSQLParser.KW_REGEXP:
            case HiveSQLParser.KW_RLIKE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4756;
                this.precedenceRegexpOperator();
                }
                break;
            case HiveSQLParser.LESSTHANOREQUALTO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4757;
                this.match(HiveSQLParser.LESSTHANOREQUALTO);
                }
                break;
            case HiveSQLParser.LESSTHAN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4758;
                this.match(HiveSQLParser.LESSTHAN);
                }
                break;
            case HiveSQLParser.GREATERTHANOREQUALTO:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4759;
                this.match(HiveSQLParser.GREATERTHANOREQUALTO);
                }
                break;
            case HiveSQLParser.GREATERTHAN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4760;
                this.match(HiveSQLParser.GREATERTHAN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subQueryExpression(): SubQueryExpressionContext {
        let localContext = new SubQueryExpressionContext(this.context, this.state);
        this.enterRule(localContext, 840, HiveSQLParser.RULE_subQueryExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4763;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4764;
            this.selectStatement();
            this.state = 4765;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpression(): PrecedenceSimilarExpressionContext {
        let localContext = new PrecedenceSimilarExpressionContext(this.context, this.state);
        this.enterRule(localContext, 842, HiveSQLParser.RULE_precedenceSimilarExpression);
        try {
            this.state = 4770;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ARRAY:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BIGINT:
            case HiveSQLParser.KW_BINARY:
            case HiveSQLParser.KW_BOOLEAN:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CASE:
            case HiveSQLParser.KW_CAST:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_CURRENT_DATE:
            case HiveSQLParser.KW_CURRENT_TIMESTAMP:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATE:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOUBLE:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_EXTRACT:
            case HiveSQLParser.KW_FALSE:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FLOAT:
            case HiveSQLParser.KW_FLOOR:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_GROUPING:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IF:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_INT:
            case HiveSQLParser.KW_INTERVAL:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAP:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULL:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REAL:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SMALLINT:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMP:
            case HiveSQLParser.KW_TIMESTAMPLOCALTZ:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TRUE:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
            case HiveSQLParser.LPAREN:
            case HiveSQLParser.PLUS:
            case HiveSQLParser.MINUS:
            case HiveSQLParser.TILDE:
            case HiveSQLParser.QUESTION:
            case HiveSQLParser.StringLiteral:
            case HiveSQLParser.IntegralLiteral:
            case HiveSQLParser.NumberLiteral:
            case HiveSQLParser.Number:
            case HiveSQLParser.Identifier:
            case HiveSQLParser.CharSetName:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4767;
                this.precedenceSimilarExpressionMain();
                }
                break;
            case HiveSQLParser.KW_EXISTS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4768;
                this.match(HiveSQLParser.KW_EXISTS);
                this.state = 4769;
                this.subQueryExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionMain(): PrecedenceSimilarExpressionMainContext {
        let localContext = new PrecedenceSimilarExpressionMainContext(this.context, this.state);
        this.enterRule(localContext, 844, HiveSQLParser.RULE_precedenceSimilarExpressionMain);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4772;
            localContext._a = this.precedenceBitwiseOrExpression();
            this.state = 4774;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 566, this.context) ) {
            case 1:
                {
                this.state = 4773;
                localContext._part = this.precedenceSimilarExpressionPart();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionPart(): PrecedenceSimilarExpressionPartContext {
        let localContext = new PrecedenceSimilarExpressionPartContext(this.context, this.state);
        this.enterRule(localContext, 846, HiveSQLParser.RULE_precedenceSimilarExpressionPart);
        try {
            this.state = 4782;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 567, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4776;
                this.precedenceSimilarOperator();
                this.state = 4777;
                localContext._equalExpr = this.precedenceBitwiseOrExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4779;
                this.precedenceSimilarExpressionAtom();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4780;
                this.match(HiveSQLParser.KW_NOT);
                this.state = 4781;
                this.precedenceSimilarExpressionPartNot();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext {
        let localContext = new PrecedenceSimilarExpressionAtomContext(this.context, this.state);
        this.enterRule(localContext, 848, HiveSQLParser.RULE_precedenceSimilarExpressionAtom);
        let _la: number;
        try {
            this.state = 4795;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_IN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4784;
                this.match(HiveSQLParser.KW_IN);
                this.state = 4785;
                this.precedenceSimilarExpressionIn();
                }
                break;
            case HiveSQLParser.KW_BETWEEN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4786;
                this.match(HiveSQLParser.KW_BETWEEN);
                this.state = 4787;
                localContext._min = this.precedenceBitwiseOrExpression();
                this.state = 4788;
                this.match(HiveSQLParser.KW_AND);
                this.state = 4789;
                localContext._max = this.precedenceBitwiseOrExpression();
                }
                break;
            case HiveSQLParser.KW_LIKE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4791;
                this.match(HiveSQLParser.KW_LIKE);
                this.state = 4792;
                _la = this.tokenStream.LA(1);
                if(!(_la === 7 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4793;
                localContext._expr = this.expressionsInParenthesis();
                }
                break;
            case HiveSQLParser.EQUAL:
            case HiveSQLParser.NOTEQUAL:
            case HiveSQLParser.LESSTHANOREQUALTO:
            case HiveSQLParser.LESSTHAN:
            case HiveSQLParser.GREATERTHANOREQUALTO:
            case HiveSQLParser.GREATERTHAN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4794;
                this.precedenceSimilarExpressionQuantifierPredicate();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionQuantifierPredicate(): PrecedenceSimilarExpressionQuantifierPredicateContext {
        let localContext = new PrecedenceSimilarExpressionQuantifierPredicateContext(this.context, this.state);
        this.enterRule(localContext, 850, HiveSQLParser.RULE_precedenceSimilarExpressionQuantifierPredicate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4797;
            this.subQuerySelectorOperator();
            this.state = 4798;
            this.quantifierType();
            this.state = 4799;
            this.subQueryExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quantifierType(): QuantifierTypeContext {
        let localContext = new QuantifierTypeContext(this.context, this.state);
        this.enterRule(localContext, 852, HiveSQLParser.RULE_quantifierType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4801;
            _la = this.tokenStream.LA(1);
            if(!(_la === 7 || _la === 13 || _la === 303)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionIn(): PrecedenceSimilarExpressionInContext {
        let localContext = new PrecedenceSimilarExpressionInContext(this.context, this.state);
        this.enterRule(localContext, 854, HiveSQLParser.RULE_precedenceSimilarExpressionIn);
        try {
            this.state = 4805;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 569, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4803;
                this.subQueryExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4804;
                localContext._expr = this.expressionsInParenthesis();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionPartNot(): PrecedenceSimilarExpressionPartNotContext {
        let localContext = new PrecedenceSimilarExpressionPartNotContext(this.context, this.state);
        this.enterRule(localContext, 856, HiveSQLParser.RULE_precedenceSimilarExpressionPartNot);
        try {
            this.state = 4811;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 570, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4807;
                this.precedenceRegexpOperator();
                this.state = 4808;
                localContext._notExpr = this.precedenceBitwiseOrExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4810;
                this.precedenceSimilarExpressionAtom();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceDistinctOperator(): PrecedenceDistinctOperatorContext {
        let localContext = new PrecedenceDistinctOperatorContext(this.context, this.state);
        this.enterRule(localContext, 858, HiveSQLParser.RULE_precedenceDistinctOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4813;
            this.match(HiveSQLParser.KW_IS);
            this.state = 4814;
            this.match(HiveSQLParser.KW_DISTINCT);
            this.state = 4815;
            this.match(HiveSQLParser.KW_FROM);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceEqualOperator(): PrecedenceEqualOperatorContext {
        let localContext = new PrecedenceEqualOperatorContext(this.context, this.state);
        this.enterRule(localContext, 860, HiveSQLParser.RULE_precedenceEqualOperator);
        try {
            this.state = 4824;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.EQUAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4817;
                this.match(HiveSQLParser.EQUAL);
                }
                break;
            case HiveSQLParser.EQUAL_NS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4818;
                this.match(HiveSQLParser.EQUAL_NS);
                }
                break;
            case HiveSQLParser.NOTEQUAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4819;
                this.match(HiveSQLParser.NOTEQUAL);
                }
                break;
            case HiveSQLParser.KW_IS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4820;
                this.match(HiveSQLParser.KW_IS);
                this.state = 4821;
                this.match(HiveSQLParser.KW_NOT);
                this.state = 4822;
                this.match(HiveSQLParser.KW_DISTINCT);
                this.state = 4823;
                this.match(HiveSQLParser.KW_FROM);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceEqualExpression(): PrecedenceEqualExpressionContext {
        let localContext = new PrecedenceEqualExpressionContext(this.context, this.state);
        this.enterRule(localContext, 862, HiveSQLParser.RULE_precedenceEqualExpression);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4826;
            this.precedenceSimilarExpression();
            this.state = 4835;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 573, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 4833;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 572, this.context) ) {
                    case 1:
                        {
                        this.state = 4827;
                        localContext._precedenceEqualOperator = this.precedenceEqualOperator();
                        localContext._equal.push(localContext._precedenceEqualOperator!);
                        this.state = 4828;
                        localContext._precedenceSimilarExpression = this.precedenceSimilarExpression();
                        localContext._p.push(localContext._precedenceSimilarExpression!);
                        }
                        break;
                    case 2:
                        {
                        this.state = 4830;
                        localContext._precedenceDistinctOperator = this.precedenceDistinctOperator();
                        localContext._dist.push(localContext._precedenceDistinctOperator!);
                        this.state = 4831;
                        localContext._precedenceSimilarExpression = this.precedenceSimilarExpression();
                        localContext._p.push(localContext._precedenceSimilarExpression!);
                        }
                        break;
                    }
                    }
                }
                this.state = 4837;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 573, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isCondition(): IsConditionContext {
        let localContext = new IsConditionContext(this.context, this.state);
        this.enterRule(localContext, 864, HiveSQLParser.RULE_isCondition);
        try {
            this.state = 4850;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 574, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4838;
                this.match(HiveSQLParser.KW_NULL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4839;
                this.match(HiveSQLParser.KW_TRUE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4840;
                this.match(HiveSQLParser.KW_FALSE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4841;
                this.match(HiveSQLParser.KW_UNKNOWN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4842;
                this.match(HiveSQLParser.KW_NOT);
                this.state = 4843;
                this.match(HiveSQLParser.KW_NULL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4844;
                this.match(HiveSQLParser.KW_NOT);
                this.state = 4845;
                this.match(HiveSQLParser.KW_TRUE);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4846;
                this.match(HiveSQLParser.KW_NOT);
                this.state = 4847;
                this.match(HiveSQLParser.KW_FALSE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4848;
                this.match(HiveSQLParser.KW_NOT);
                this.state = 4849;
                this.match(HiveSQLParser.KW_UNKNOWN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceUnarySuffixExpression(): PrecedenceUnarySuffixExpressionContext {
        let localContext = new PrecedenceUnarySuffixExpressionContext(this.context, this.state);
        this.enterRule(localContext, 866, HiveSQLParser.RULE_precedenceUnarySuffixExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4852;
            this.precedenceEqualExpression();
            this.state = 4855;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 161) {
                {
                this.state = 4853;
                localContext._a = this.match(HiveSQLParser.KW_IS);
                this.state = 4854;
                this.isCondition();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceNotOperator(): PrecedenceNotOperatorContext {
        let localContext = new PrecedenceNotOperatorContext(this.context, this.state);
        this.enterRule(localContext, 868, HiveSQLParser.RULE_precedenceNotOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4857;
            this.match(HiveSQLParser.KW_NOT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceNotExpression(): PrecedenceNotExpressionContext {
        let localContext = new PrecedenceNotExpressionContext(this.context, this.state);
        this.enterRule(localContext, 870, HiveSQLParser.RULE_precedenceNotExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4862;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 207) {
                {
                {
                this.state = 4859;
                this.precedenceNotOperator();
                }
                }
                this.state = 4864;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4865;
            this.precedenceUnarySuffixExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceAndOperator(): PrecedenceAndOperatorContext {
        let localContext = new PrecedenceAndOperatorContext(this.context, this.state);
        this.enterRule(localContext, 872, HiveSQLParser.RULE_precedenceAndOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4867;
            this.match(HiveSQLParser.KW_AND);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceAndExpression(): PrecedenceAndExpressionContext {
        let localContext = new PrecedenceAndExpressionContext(this.context, this.state);
        this.enterRule(localContext, 874, HiveSQLParser.RULE_precedenceAndExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4869;
            this.precedenceNotExpression();
            this.state = 4875;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 11) {
                {
                {
                this.state = 4870;
                this.precedenceAndOperator();
                this.state = 4871;
                this.precedenceNotExpression();
                }
                }
                this.state = 4877;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceOrOperator(): PrecedenceOrOperatorContext {
        let localContext = new PrecedenceOrOperatorContext(this.context, this.state);
        this.enterRule(localContext, 876, HiveSQLParser.RULE_precedenceOrOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4878;
            this.match(HiveSQLParser.KW_OR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceOrExpression(): PrecedenceOrExpressionContext {
        let localContext = new PrecedenceOrExpressionContext(this.context, this.state);
        this.enterRule(localContext, 878, HiveSQLParser.RULE_precedenceOrExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4880;
            this.precedenceAndExpression();
            this.state = 4886;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 219) {
                {
                {
                this.state = 4881;
                this.precedenceOrOperator();
                this.state = 4882;
                this.precedenceAndExpression();
                }
                }
                this.state = 4888;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 880, HiveSQLParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4889;
            _la = this.tokenStream.LA(1);
            if(!(_la === 120 || _la === 340)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValueTok(): BooleanValueTokContext {
        let localContext = new BooleanValueTokContext(this.context, this.state);
        this.enterRule(localContext, 882, HiveSQLParser.RULE_booleanValueTok);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4891;
            _la = this.tokenStream.LA(1);
            if(!(_la === 120 || _la === 340)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableOrPartition(): TableOrPartitionContext {
        let localContext = new TableOrPartitionContext(this.context, this.state);
        this.enterRule(localContext, 884, HiveSQLParser.RULE_tableOrPartition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4893;
            this.tableName();
            this.state = 4895;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 228) {
                {
                this.state = 4894;
                this.partitionSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpec(): PartitionSpecContext {
        let localContext = new PartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 886, HiveSQLParser.RULE_partitionSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4897;
            this.match(HiveSQLParser.KW_PARTITION);
            this.state = 4898;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4899;
            this.partitionVal();
            this.state = 4904;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4900;
                this.match(HiveSQLParser.COMMA);
                this.state = 4901;
                this.partitionVal();
                }
                }
                this.state = 4906;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4907;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionVal(): PartitionValContext {
        let localContext = new PartitionValContext(this.context, this.state);
        this.enterRule(localContext, 888, HiveSQLParser.RULE_partitionVal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4909;
            this.id_();
            this.state = 4912;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 394) {
                {
                this.state = 4910;
                this.match(HiveSQLParser.EQUAL);
                this.state = 4911;
                this.constant();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSelectorSpec(): PartitionSelectorSpecContext {
        let localContext = new PartitionSelectorSpecContext(this.context, this.state);
        this.enterRule(localContext, 890, HiveSQLParser.RULE_partitionSelectorSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4914;
            this.match(HiveSQLParser.LPAREN);
            this.state = 4915;
            this.partitionSelectorVal();
            this.state = 4920;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4916;
                this.match(HiveSQLParser.COMMA);
                this.state = 4917;
                this.partitionSelectorVal();
                }
                }
                this.state = 4922;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4923;
            this.match(HiveSQLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSelectorVal(): PartitionSelectorValContext {
        let localContext = new PartitionSelectorValContext(this.context, this.state);
        this.enterRule(localContext, 892, HiveSQLParser.RULE_partitionSelectorVal);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4925;
            this.id_();
            this.state = 4926;
            this.partitionSelectorOperator();
            this.state = 4927;
            this.constant();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSelectorOperator(): PartitionSelectorOperatorContext {
        let localContext = new PartitionSelectorOperatorContext(this.context, this.state);
        this.enterRule(localContext, 894, HiveSQLParser.RULE_partitionSelectorOperator);
        try {
            this.state = 4931;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_LIKE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4929;
                this.match(HiveSQLParser.KW_LIKE);
                }
                break;
            case HiveSQLParser.EQUAL:
            case HiveSQLParser.NOTEQUAL:
            case HiveSQLParser.LESSTHANOREQUALTO:
            case HiveSQLParser.LESSTHAN:
            case HiveSQLParser.GREATERTHANOREQUALTO:
            case HiveSQLParser.GREATERTHAN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4930;
                this.subQuerySelectorOperator();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subQuerySelectorOperator(): SubQuerySelectorOperatorContext {
        let localContext = new SubQuerySelectorOperatorContext(this.context, this.state);
        this.enterRule(localContext, 896, HiveSQLParser.RULE_subQuerySelectorOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4933;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 394)) & ~0x1F) === 0 && ((1 << (_la - 394)) & 125) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sysFuncNames(): SysFuncNamesContext {
        let localContext = new SysFuncNamesContext(this.context, this.state);
        this.enterRule(localContext, 898, HiveSQLParser.RULE_sysFuncNames);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4935;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 11)) & ~0x1F) === 0 && ((1 << (_la - 11)) & 17023009) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3221225473) !== 0) || ((((_la - 146)) & ~0x1F) === 0 && ((1 << (_la - 146)) & 2147485705) !== 0) || ((((_la - 191)) & ~0x1F) === 0 && ((1 << (_la - 191)) & 268500993) !== 0) || ((((_la - 255)) & ~0x1F) === 0 && ((1 << (_la - 255)) & 4194369) !== 0) || ((((_la - 301)) & ~0x1F) === 0 && ((1 << (_la - 301)) & 536883201) !== 0) || _la === 347 || _la === 372 || ((((_la - 394)) & ~0x1F) === 0 && ((1 << (_la - 394)) & 196607) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descFuncNames(): DescFuncNamesContext {
        let localContext = new DescFuncNamesContext(this.context, this.state);
        this.enterRule(localContext, 900, HiveSQLParser.RULE_descFuncNames);
        try {
            this.state = 4940;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 584, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4937;
                this.sysFuncNames();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4938;
                this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4939;
                this.functionIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_(): Id_Context {
        let localContext = new Id_Context(this.context, this.state);
        this.enterRule(localContext, 902, HiveSQLParser.RULE_id_);
        try {
            this.state = 4944;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4942;
                this.match(HiveSQLParser.Identifier);
                }
                break;
            case HiveSQLParser.KW_ABORT:
            case HiveSQLParser.KW_ACTIVATE:
            case HiveSQLParser.KW_ACTIVE:
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_ADMIN:
            case HiveSQLParser.KW_AFTER:
            case HiveSQLParser.KW_ALLOC_FRACTION:
            case HiveSQLParser.KW_ANALYZE:
            case HiveSQLParser.KW_ARCHIVE:
            case HiveSQLParser.KW_ASC:
            case HiveSQLParser.KW_AST:
            case HiveSQLParser.KW_AT:
            case HiveSQLParser.KW_AUTOCOMMIT:
            case HiveSQLParser.KW_BATCH:
            case HiveSQLParser.KW_BEFORE:
            case HiveSQLParser.KW_BUCKET:
            case HiveSQLParser.KW_BUCKETS:
            case HiveSQLParser.KW_CACHE:
            case HiveSQLParser.KW_CASCADE:
            case HiveSQLParser.KW_CBO:
            case HiveSQLParser.KW_CHANGE:
            case HiveSQLParser.KW_CHECK:
            case HiveSQLParser.KW_CLUSTER:
            case HiveSQLParser.KW_CLUSTERED:
            case HiveSQLParser.KW_CLUSTERSTATUS:
            case HiveSQLParser.KW_COLLECTION:
            case HiveSQLParser.KW_COLUMNS:
            case HiveSQLParser.KW_COMMENT:
            case HiveSQLParser.KW_COMPACT:
            case HiveSQLParser.KW_COMPACTIONS:
            case HiveSQLParser.KW_COMPUTE:
            case HiveSQLParser.KW_CONCATENATE:
            case HiveSQLParser.KW_CONTINUE:
            case HiveSQLParser.KW_COST:
            case HiveSQLParser.KW_CRON:
            case HiveSQLParser.KW_DATA:
            case HiveSQLParser.KW_DATABASES:
            case HiveSQLParser.KW_DATETIME:
            case HiveSQLParser.KW_DAY:
            case HiveSQLParser.KW_DAYOFWEEK:
            case HiveSQLParser.KW_DBPROPERTIES:
            case HiveSQLParser.KW_DCPROPERTIES:
            case HiveSQLParser.KW_DEBUG:
            case HiveSQLParser.KW_DEFAULT:
            case HiveSQLParser.KW_DEFERRED:
            case HiveSQLParser.KW_DEFINED:
            case HiveSQLParser.KW_DELIMITED:
            case HiveSQLParser.KW_DEPENDENCY:
            case HiveSQLParser.KW_DESC:
            case HiveSQLParser.KW_DETAIL:
            case HiveSQLParser.KW_DIRECTORIES:
            case HiveSQLParser.KW_DIRECTORY:
            case HiveSQLParser.KW_DISABLE:
            case HiveSQLParser.KW_DISTRIBUTE:
            case HiveSQLParser.KW_DISTRIBUTED:
            case HiveSQLParser.KW_DO:
            case HiveSQLParser.KW_DOW:
            case HiveSQLParser.KW_DUMP:
            case HiveSQLParser.KW_ELEM_TYPE:
            case HiveSQLParser.KW_ENABLE:
            case HiveSQLParser.KW_ENFORCED:
            case HiveSQLParser.KW_ESCAPED:
            case HiveSQLParser.KW_EVERY:
            case HiveSQLParser.KW_EXCLUSIVE:
            case HiveSQLParser.KW_EXECUTE:
            case HiveSQLParser.KW_EXECUTED:
            case HiveSQLParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSQLParser.KW_EXPLAIN:
            case HiveSQLParser.KW_EXPORT:
            case HiveSQLParser.KW_EXPRESSION:
            case HiveSQLParser.KW_FIELDS:
            case HiveSQLParser.KW_FILE:
            case HiveSQLParser.KW_FILEFORMAT:
            case HiveSQLParser.KW_FIRST:
            case HiveSQLParser.KW_FORMAT:
            case HiveSQLParser.KW_FORMATTED:
            case HiveSQLParser.KW_FUNCTIONS:
            case HiveSQLParser.KW_HOLD_DDLTIME:
            case HiveSQLParser.KW_HOUR:
            case HiveSQLParser.KW_IDXPROPERTIES:
            case HiveSQLParser.KW_IGNORE:
            case HiveSQLParser.KW_INDEX:
            case HiveSQLParser.KW_INDEXES:
            case HiveSQLParser.KW_INPATH:
            case HiveSQLParser.KW_INPUTDRIVER:
            case HiveSQLParser.KW_INPUTFORMAT:
            case HiveSQLParser.KW_ISOLATION:
            case HiveSQLParser.KW_ITEMS:
            case HiveSQLParser.KW_JAR:
            case HiveSQLParser.KW_JOINCOST:
            case HiveSQLParser.KW_KEY:
            case HiveSQLParser.KW_KEYS:
            case HiveSQLParser.KW_KEY_TYPE:
            case HiveSQLParser.KW_KILL:
            case HiveSQLParser.KW_LAST:
            case HiveSQLParser.KW_LEVEL:
            case HiveSQLParser.KW_LIMIT:
            case HiveSQLParser.KW_LINES:
            case HiveSQLParser.KW_LOAD:
            case HiveSQLParser.KW_LOCATION:
            case HiveSQLParser.KW_LOCK:
            case HiveSQLParser.KW_LOCKS:
            case HiveSQLParser.KW_LOGICAL:
            case HiveSQLParser.KW_LONG:
            case HiveSQLParser.KW_MANAGED:
            case HiveSQLParser.KW_MANAGEDLOCATION:
            case HiveSQLParser.KW_MANAGEMENT:
            case HiveSQLParser.KW_MAPJOIN:
            case HiveSQLParser.KW_MAPPING:
            case HiveSQLParser.KW_MATCHED:
            case HiveSQLParser.KW_MATERIALIZED:
            case HiveSQLParser.KW_METADATA:
            case HiveSQLParser.KW_MINUTE:
            case HiveSQLParser.KW_MONTH:
            case HiveSQLParser.KW_MOVE:
            case HiveSQLParser.KW_MSCK:
            case HiveSQLParser.KW_NORELY:
            case HiveSQLParser.KW_NOSCAN:
            case HiveSQLParser.KW_NOVALIDATE:
            case HiveSQLParser.KW_NO_DROP:
            case HiveSQLParser.KW_NULLS:
            case HiveSQLParser.KW_OFFLINE:
            case HiveSQLParser.KW_OFFSET:
            case HiveSQLParser.KW_OPERATOR:
            case HiveSQLParser.KW_OPTION:
            case HiveSQLParser.KW_OUTPUTDRIVER:
            case HiveSQLParser.KW_OUTPUTFORMAT:
            case HiveSQLParser.KW_OVERWRITE:
            case HiveSQLParser.KW_OWNER:
            case HiveSQLParser.KW_PARTITIONED:
            case HiveSQLParser.KW_PARTITIONS:
            case HiveSQLParser.KW_PATH:
            case HiveSQLParser.KW_PLAN:
            case HiveSQLParser.KW_PLANS:
            case HiveSQLParser.KW_PLUS:
            case HiveSQLParser.KW_POOL:
            case HiveSQLParser.KW_PRINCIPALS:
            case HiveSQLParser.KW_PROTECTION:
            case HiveSQLParser.KW_PURGE:
            case HiveSQLParser.KW_QUARTER:
            case HiveSQLParser.KW_QUERY:
            case HiveSQLParser.KW_QUERY_PARALLELISM:
            case HiveSQLParser.KW_READ:
            case HiveSQLParser.KW_READONLY:
            case HiveSQLParser.KW_REBUILD:
            case HiveSQLParser.KW_RECORDREADER:
            case HiveSQLParser.KW_RECORDWRITER:
            case HiveSQLParser.KW_RELOAD:
            case HiveSQLParser.KW_RELY:
            case HiveSQLParser.KW_REMOTE:
            case HiveSQLParser.KW_RENAME:
            case HiveSQLParser.KW_REOPTIMIZATION:
            case HiveSQLParser.KW_REPAIR:
            case HiveSQLParser.KW_REPL:
            case HiveSQLParser.KW_REPLACE:
            case HiveSQLParser.KW_REPLICATION:
            case HiveSQLParser.KW_RESOURCE:
            case HiveSQLParser.KW_RESPECT:
            case HiveSQLParser.KW_RESTRICT:
            case HiveSQLParser.KW_REWRITE:
            case HiveSQLParser.KW_ROLE:
            case HiveSQLParser.KW_ROLES:
            case HiveSQLParser.KW_SCHEDULED:
            case HiveSQLParser.KW_SCHEDULING_POLICY:
            case HiveSQLParser.KW_SCHEMA:
            case HiveSQLParser.KW_SCHEMAS:
            case HiveSQLParser.KW_SECOND:
            case HiveSQLParser.KW_SEMI:
            case HiveSQLParser.KW_SERDE:
            case HiveSQLParser.KW_SERDEPROPERTIES:
            case HiveSQLParser.KW_SERVER:
            case HiveSQLParser.KW_SETS:
            case HiveSQLParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSQLParser.KW_SHARED:
            case HiveSQLParser.KW_SHOW:
            case HiveSQLParser.KW_SHOW_DATABASE:
            case HiveSQLParser.KW_SKEWED:
            case HiveSQLParser.KW_SNAPSHOT:
            case HiveSQLParser.KW_SORT:
            case HiveSQLParser.KW_SORTED:
            case HiveSQLParser.KW_SPEC:
            case HiveSQLParser.KW_SSL:
            case HiveSQLParser.KW_STATISTICS:
            case HiveSQLParser.KW_STATUS:
            case HiveSQLParser.KW_STORED:
            case HiveSQLParser.KW_STREAMTABLE:
            case HiveSQLParser.KW_STRING:
            case HiveSQLParser.KW_STRUCT:
            case HiveSQLParser.KW_SUMMARY:
            case HiveSQLParser.KW_SYSTEM_TIME:
            case HiveSQLParser.KW_SYSTEM_VERSION:
            case HiveSQLParser.KW_TABLES:
            case HiveSQLParser.KW_TBLPROPERTIES:
            case HiveSQLParser.KW_TEMPORARY:
            case HiveSQLParser.KW_TERMINATED:
            case HiveSQLParser.KW_TIMESTAMPTZ:
            case HiveSQLParser.KW_TINYINT:
            case HiveSQLParser.KW_TOUCH:
            case HiveSQLParser.KW_TRANSACTION:
            case HiveSQLParser.KW_TRANSACTIONAL:
            case HiveSQLParser.KW_TRANSACTIONS:
            case HiveSQLParser.KW_TRIM:
            case HiveSQLParser.KW_TYPE:
            case HiveSQLParser.KW_UNARCHIVE:
            case HiveSQLParser.KW_UNDO:
            case HiveSQLParser.KW_UNIONTYPE:
            case HiveSQLParser.KW_UNKNOWN:
            case HiveSQLParser.KW_UNLOCK:
            case HiveSQLParser.KW_UNMANAGED:
            case HiveSQLParser.KW_UNSET:
            case HiveSQLParser.KW_UNSIGNED:
            case HiveSQLParser.KW_URI:
            case HiveSQLParser.KW_URL:
            case HiveSQLParser.KW_USE:
            case HiveSQLParser.KW_UTC:
            case HiveSQLParser.KW_UTCTIMESTAMP:
            case HiveSQLParser.KW_VALIDATE:
            case HiveSQLParser.KW_VALUE_TYPE:
            case HiveSQLParser.KW_VECTORIZATION:
            case HiveSQLParser.KW_VIEW:
            case HiveSQLParser.KW_VIEWS:
            case HiveSQLParser.KW_WAIT:
            case HiveSQLParser.KW_WEEK:
            case HiveSQLParser.KW_WHILE:
            case HiveSQLParser.KW_WITHIN:
            case HiveSQLParser.KW_WORK:
            case HiveSQLParser.KW_WORKLOAD:
            case HiveSQLParser.KW_WRITE:
            case HiveSQLParser.KW_YEAR:
            case HiveSQLParser.KW_ZONE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4943;
                this.nonReserved();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionIdentifier(): FunctionIdentifierContext {
        let localContext = new FunctionIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 904, HiveSQLParser.RULE_functionIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4946;
            this.id_();
            this.state = 4949;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 383) {
                {
                this.state = 4947;
                this.match(HiveSQLParser.DOT);
                this.state = 4948;
                localContext._fn = this.id_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalIdentifier(): PrincipalIdentifierContext {
        let localContext = new PrincipalIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 906, HiveSQLParser.RULE_principalIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4951;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 908, HiveSQLParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4953;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3236739107) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 4152217853) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 1815305069) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & 968573415) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4156764159) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 987750079) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 1004889323) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4138967) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql11ReservedKeywordsUsedAsFunctionName(): Sql11ReservedKeywordsUsedAsFunctionNameContext {
        let localContext = new Sql11ReservedKeywordsUsedAsFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 910, HiveSQLParser.RULE_sql11ReservedKeywordsUsedAsFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4955;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 469827584) !== 0) || ((((_la - 63)) & ~0x1F) === 0 && ((1 << (_la - 63)) & 259) !== 0) || _la === 96 || _la === 126 || ((((_la - 140)) & ~0x1F) === 0 && ((1 << (_la - 140)) & 131137) !== 0) || _la === 191 || _la === 255 || _la === 301 || _la === 327)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hint(): HintContext {
        let localContext = new HintContext(this.context, this.state);
        this.enterRule(localContext, 912, HiveSQLParser.RULE_hint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4957;
            this.hintList();
            this.state = 4958;
            this.match(HiveSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintList(): HintListContext {
        let localContext = new HintListContext(this.context, this.state);
        this.enterRule(localContext, 914, HiveSQLParser.RULE_hintList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4960;
            this.hintItem();
            this.state = 4965;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4961;
                this.match(HiveSQLParser.COMMA);
                this.state = 4962;
                this.hintItem();
                }
                }
                this.state = 4967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintItem(): HintItemContext {
        let localContext = new HintItemContext(this.context, this.state);
        this.enterRule(localContext, 916, HiveSQLParser.RULE_hintItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4968;
            this.hintName();
            this.state = 4973;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 4969;
                this.match(HiveSQLParser.LPAREN);
                this.state = 4970;
                this.hintArgs();
                this.state = 4971;
                this.match(HiveSQLParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintName(): HintNameContext {
        let localContext = new HintNameContext(this.context, this.state);
        this.enterRule(localContext, 918, HiveSQLParser.RULE_hintName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4975;
            _la = this.tokenStream.LA(1);
            if(!(_la === 192 || _la === 233 || _la === 290 || _la === 312)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintArgs(): HintArgsContext {
        let localContext = new HintArgsContext(this.context, this.state);
        this.enterRule(localContext, 920, HiveSQLParser.RULE_hintArgs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4977;
            this.hintArgName();
            this.state = 4982;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4978;
                this.match(HiveSQLParser.COMMA);
                this.state = 4979;
                this.hintArgName();
                }
                }
                this.state = 4984;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintArgName(): HintArgNameContext {
        let localContext = new HintArgNameContext(this.context, this.state);
        this.enterRule(localContext, 922, HiveSQLParser.RULE_hintArgName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4985;
            _la = this.tokenStream.LA(1);
            if(!(_la === 204 || _la === 419 || _la === 420)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prepareStatement(): PrepareStatementContext {
        let localContext = new PrepareStatementContext(this.context, this.state);
        this.enterRule(localContext, 924, HiveSQLParser.RULE_prepareStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4987;
            this.match(HiveSQLParser.KW_PREPARE);
            this.state = 4988;
            this.id_();
            this.state = 4989;
            this.match(HiveSQLParser.KW_FROM);
            this.state = 4990;
            this.queryStatementExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executeStatement(): ExecuteStatementContext {
        let localContext = new ExecuteStatementContext(this.context, this.state);
        this.enterRule(localContext, 926, HiveSQLParser.RULE_executeStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4992;
            this.match(HiveSQLParser.KW_EXECUTE);
            this.state = 4993;
            this.id_();
            this.state = 4994;
            this.match(HiveSQLParser.KW_USING);
            this.state = 4995;
            this.executeParamList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executeParamList(): ExecuteParamListContext {
        let localContext = new ExecuteParamListContext(this.context, this.state);
        this.enterRule(localContext, 928, HiveSQLParser.RULE_executeParamList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4997;
            this.constant();
            this.state = 5002;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 4998;
                this.match(HiveSQLParser.COMMA);
                this.state = 4999;
                this.constant();
                }
                }
                this.state = 5004;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourcePlanDdlStatements(): ResourcePlanDdlStatementsContext {
        let localContext = new ResourcePlanDdlStatementsContext(this.context, this.state);
        this.enterRule(localContext, 930, HiveSQLParser.RULE_resourcePlanDdlStatements);
        try {
            this.state = 5019;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 591, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5005;
                this.createResourcePlanStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5006;
                this.alterResourcePlanStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5007;
                this.dropResourcePlanStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5008;
                this.globalWmStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5009;
                this.replaceResourcePlanStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5010;
                this.createTriggerStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5011;
                this.alterTriggerStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5012;
                this.dropTriggerStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5013;
                this.createPoolStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 5014;
                this.alterPoolStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 5015;
                this.dropPoolStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 5016;
                this.createMappingStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 5017;
                this.alterMappingStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 5018;
                this.dropMappingStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpAssign(): RpAssignContext {
        let localContext = new RpAssignContext(this.context, this.state);
        this.enterRule(localContext, 932, HiveSQLParser.RULE_rpAssign);
        try {
            this.state = 5028;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_QUERY_PARALLELISM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5021;
                this.match(HiveSQLParser.KW_QUERY_PARALLELISM);
                this.state = 5022;
                this.match(HiveSQLParser.EQUAL);
                this.state = 5023;
                localContext._parallelism = this.match(HiveSQLParser.Number);
                }
                break;
            case HiveSQLParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5024;
                this.match(HiveSQLParser.KW_DEFAULT);
                this.state = 5025;
                this.match(HiveSQLParser.KW_POOL);
                this.state = 5026;
                this.match(HiveSQLParser.EQUAL);
                this.state = 5027;
                this.poolPath();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpAssignList(): RpAssignListContext {
        let localContext = new RpAssignListContext(this.context, this.state);
        this.enterRule(localContext, 934, HiveSQLParser.RULE_rpAssignList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5030;
            this.rpAssign();
            this.state = 5035;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 5031;
                this.match(HiveSQLParser.COMMA);
                this.state = 5032;
                this.rpAssign();
                }
                }
                this.state = 5037;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpUnassign(): RpUnassignContext {
        let localContext = new RpUnassignContext(this.context, this.state);
        this.enterRule(localContext, 936, HiveSQLParser.RULE_rpUnassign);
        try {
            this.state = 5041;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_QUERY_PARALLELISM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5038;
                this.match(HiveSQLParser.KW_QUERY_PARALLELISM);
                }
                break;
            case HiveSQLParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5039;
                this.match(HiveSQLParser.KW_DEFAULT);
                this.state = 5040;
                this.match(HiveSQLParser.KW_POOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpUnassignList(): RpUnassignListContext {
        let localContext = new RpUnassignListContext(this.context, this.state);
        this.enterRule(localContext, 938, HiveSQLParser.RULE_rpUnassignList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5043;
            this.rpUnassign();
            this.state = 5048;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 5044;
                this.match(HiveSQLParser.COMMA);
                this.state = 5045;
                this.rpUnassign();
                }
                }
                this.state = 5050;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createResourcePlanStatement(): CreateResourcePlanStatementContext {
        let localContext = new CreateResourcePlanStatementContext(this.context, this.state);
        this.enterRule(localContext, 940, HiveSQLParser.RULE_createResourcePlanStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5051;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 5052;
            this.match(HiveSQLParser.KW_RESOURCE);
            this.state = 5053;
            this.match(HiveSQLParser.KW_PLAN);
            this.state = 5055;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 5054;
                this.ifNotExists();
                }
            }

            this.state = 5066;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 598, this.context) ) {
            case 1:
                {
                this.state = 5057;
                localContext._name = this.id_();
                this.state = 5058;
                this.match(HiveSQLParser.KW_LIKE);
                this.state = 5059;
                localContext._likeName = this.id_();
                }
                break;
            case 2:
                {
                this.state = 5061;
                localContext._name = this.id_();
                this.state = 5064;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 376) {
                    {
                    this.state = 5062;
                    this.match(HiveSQLParser.KW_WITH);
                    this.state = 5063;
                    this.rpAssignList();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withReplace(): WithReplaceContext {
        let localContext = new WithReplaceContext(this.context, this.state);
        this.enterRule(localContext, 942, HiveSQLParser.RULE_withReplace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5068;
            this.match(HiveSQLParser.KW_WITH);
            this.state = 5069;
            this.match(HiveSQLParser.KW_REPLACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public activate(): ActivateContext {
        let localContext = new ActivateContext(this.context, this.state);
        this.enterRule(localContext, 944, HiveSQLParser.RULE_activate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5071;
            this.match(HiveSQLParser.KW_ACTIVATE);
            this.state = 5073;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 5072;
                this.withReplace();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enable(): EnableContext {
        let localContext = new EnableContext(this.context, this.state);
        this.enterRule(localContext, 946, HiveSQLParser.RULE_enable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5075;
            this.match(HiveSQLParser.KW_ENABLE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public disable(): DisableContext {
        let localContext = new DisableContext(this.context, this.state);
        this.enterRule(localContext, 948, HiveSQLParser.RULE_disable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5077;
            this.match(HiveSQLParser.KW_DISABLE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unmanaged(): UnmanagedContext {
        let localContext = new UnmanagedContext(this.context, this.state);
        this.enterRule(localContext, 950, HiveSQLParser.RULE_unmanaged);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5079;
            this.match(HiveSQLParser.KW_UNMANAGED);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterResourcePlanStatement(): AlterResourcePlanStatementContext {
        let localContext = new AlterResourcePlanStatementContext(this.context, this.state);
        this.enterRule(localContext, 952, HiveSQLParser.RULE_alterResourcePlanStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5081;
            this.match(HiveSQLParser.KW_ALTER);
            this.state = 5082;
            this.match(HiveSQLParser.KW_RESOURCE);
            this.state = 5083;
            this.match(HiveSQLParser.KW_PLAN);
            this.state = 5084;
            localContext._name = this.id_();
            this.state = 5102;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_VALIDATE:
                {
                this.state = 5085;
                this.match(HiveSQLParser.KW_VALIDATE);
                }
                break;
            case HiveSQLParser.KW_DISABLE:
                {
                this.state = 5086;
                this.match(HiveSQLParser.KW_DISABLE);
                }
                break;
            case HiveSQLParser.KW_SET:
                {
                this.state = 5087;
                this.match(HiveSQLParser.KW_SET);
                this.state = 5088;
                this.rpAssignList();
                }
                break;
            case HiveSQLParser.KW_UNSET:
                {
                this.state = 5089;
                this.match(HiveSQLParser.KW_UNSET);
                this.state = 5090;
                this.rpUnassignList();
                }
                break;
            case HiveSQLParser.KW_RENAME:
                {
                this.state = 5091;
                this.match(HiveSQLParser.KW_RENAME);
                this.state = 5092;
                this.match(HiveSQLParser.KW_TO);
                this.state = 5093;
                localContext._newName = this.id_();
                }
                break;
            case HiveSQLParser.KW_ACTIVATE:
                {
                this.state = 5094;
                this.activate();
                this.state = 5096;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102) {
                    {
                    this.state = 5095;
                    this.enable();
                    }
                }

                }
                break;
            case HiveSQLParser.KW_ENABLE:
                {
                this.state = 5098;
                this.enable();
                this.state = 5100;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5099;
                    this.activate();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public globalWmStatement(): GlobalWmStatementContext {
        let localContext = new GlobalWmStatementContext(this.context, this.state);
        this.enterRule(localContext, 954, HiveSQLParser.RULE_globalWmStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5104;
            _la = this.tokenStream.LA(1);
            if(!(_la === 91 || _la === 102)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5105;
            this.match(HiveSQLParser.KW_WORKLOAD);
            this.state = 5106;
            this.match(HiveSQLParser.KW_MANAGEMENT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceResourcePlanStatement(): ReplaceResourcePlanStatementContext {
        let localContext = new ReplaceResourcePlanStatementContext(this.context, this.state);
        this.enterRule(localContext, 956, HiveSQLParser.RULE_replaceResourcePlanStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5108;
            this.match(HiveSQLParser.KW_REPLACE);
            this.state = 5120;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ACTIVE:
                {
                this.state = 5109;
                this.match(HiveSQLParser.KW_ACTIVE);
                this.state = 5110;
                this.match(HiveSQLParser.KW_RESOURCE);
                this.state = 5111;
                this.match(HiveSQLParser.KW_PLAN);
                this.state = 5112;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 5113;
                localContext._src = this.id_();
                }
                break;
            case HiveSQLParser.KW_RESOURCE:
                {
                this.state = 5114;
                this.match(HiveSQLParser.KW_RESOURCE);
                this.state = 5115;
                this.match(HiveSQLParser.KW_PLAN);
                this.state = 5116;
                localContext._dest = this.id_();
                this.state = 5117;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 5118;
                localContext._src = this.id_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropResourcePlanStatement(): DropResourcePlanStatementContext {
        let localContext = new DropResourcePlanStatementContext(this.context, this.state);
        this.enterRule(localContext, 958, HiveSQLParser.RULE_dropResourcePlanStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5122;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 5123;
            this.match(HiveSQLParser.KW_RESOURCE);
            this.state = 5124;
            this.match(HiveSQLParser.KW_PLAN);
            this.state = 5126;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 5125;
                this.ifExists();
                }
            }

            this.state = 5128;
            localContext._name = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public poolPath(): PoolPathContext {
        let localContext = new PoolPathContext(this.context, this.state);
        this.enterRule(localContext, 960, HiveSQLParser.RULE_poolPath);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5130;
            this.id_();
            this.state = 5135;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 383) {
                {
                {
                this.state = 5131;
                this.match(HiveSQLParser.DOT);
                this.state = 5132;
                this.id_();
                }
                }
                this.state = 5137;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerExpression(): TriggerExpressionContext {
        let localContext = new TriggerExpressionContext(this.context, this.state);
        this.enterRule(localContext, 962, HiveSQLParser.RULE_triggerExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5138;
            this.triggerAtomExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerExpressionStandalone(): TriggerExpressionStandaloneContext {
        let localContext = new TriggerExpressionStandaloneContext(this.context, this.state);
        this.enterRule(localContext, 964, HiveSQLParser.RULE_triggerExpressionStandalone);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5140;
            this.triggerExpression();
            this.state = 5141;
            this.match(HiveSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerOrExpression(): TriggerOrExpressionContext {
        let localContext = new TriggerOrExpressionContext(this.context, this.state);
        this.enterRule(localContext, 966, HiveSQLParser.RULE_triggerOrExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5143;
            this.triggerAndExpression();
            this.state = 5148;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 219) {
                {
                {
                this.state = 5144;
                this.match(HiveSQLParser.KW_OR);
                this.state = 5145;
                this.triggerAndExpression();
                }
                }
                this.state = 5150;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerAndExpression(): TriggerAndExpressionContext {
        let localContext = new TriggerAndExpressionContext(this.context, this.state);
        this.enterRule(localContext, 968, HiveSQLParser.RULE_triggerAndExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5151;
            this.triggerAtomExpression();
            this.state = 5156;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 11) {
                {
                {
                this.state = 5152;
                this.match(HiveSQLParser.KW_AND);
                this.state = 5153;
                this.triggerAtomExpression();
                }
                }
                this.state = 5158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerAtomExpression(): TriggerAtomExpressionContext {
        let localContext = new TriggerAtomExpressionContext(this.context, this.state);
        this.enterRule(localContext, 970, HiveSQLParser.RULE_triggerAtomExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5159;
            this.id_();
            this.state = 5160;
            this.comparisionOperator();
            this.state = 5161;
            this.triggerLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerLiteral(): TriggerLiteralContext {
        let localContext = new TriggerLiteralContext(this.context, this.state);
        this.enterRule(localContext, 972, HiveSQLParser.RULE_triggerLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5163;
            _la = this.tokenStream.LA(1);
            if(!(_la === 414 || _la === 419)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisionOperator(): ComparisionOperatorContext {
        let localContext = new ComparisionOperatorContext(this.context, this.state);
        this.enterRule(localContext, 974, HiveSQLParser.RULE_comparisionOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5165;
            this.match(HiveSQLParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerActionExpression(): TriggerActionExpressionContext {
        let localContext = new TriggerActionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 976, HiveSQLParser.RULE_triggerActionExpression);
        try {
            this.state = 5171;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_KILL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5167;
                this.match(HiveSQLParser.KW_KILL);
                }
                break;
            case HiveSQLParser.KW_MOVE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5168;
                this.match(HiveSQLParser.KW_MOVE);
                this.state = 5169;
                this.match(HiveSQLParser.KW_TO);
                this.state = 5170;
                this.poolPath();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerActionExpressionStandalone(): TriggerActionExpressionStandaloneContext {
        let localContext = new TriggerActionExpressionStandaloneContext(this.context, this.state);
        this.enterRule(localContext, 978, HiveSQLParser.RULE_triggerActionExpressionStandalone);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5173;
            this.triggerActionExpression();
            this.state = 5174;
            this.match(HiveSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTriggerStatement(): CreateTriggerStatementContext {
        let localContext = new CreateTriggerStatementContext(this.context, this.state);
        this.enterRule(localContext, 980, HiveSQLParser.RULE_createTriggerStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5176;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 5177;
            this.match(HiveSQLParser.KW_TRIGGER);
            this.state = 5178;
            localContext._rpName = this.id_();
            this.state = 5179;
            this.match(HiveSQLParser.DOT);
            this.state = 5180;
            localContext._triggerName = this.id_();
            this.state = 5181;
            this.match(HiveSQLParser.KW_WHEN);
            this.state = 5182;
            this.triggerExpression();
            this.state = 5183;
            this.match(HiveSQLParser.KW_DO);
            this.state = 5184;
            this.triggerActionExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTriggerStatement(): AlterTriggerStatementContext {
        let localContext = new AlterTriggerStatementContext(this.context, this.state);
        this.enterRule(localContext, 982, HiveSQLParser.RULE_alterTriggerStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5186;
            this.match(HiveSQLParser.KW_ALTER);
            this.state = 5187;
            this.match(HiveSQLParser.KW_TRIGGER);
            this.state = 5188;
            localContext._rpName = this.id_();
            this.state = 5189;
            this.match(HiveSQLParser.DOT);
            this.state = 5190;
            localContext._triggerName = this.id_();
            this.state = 5207;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_WHEN:
                {
                this.state = 5191;
                this.match(HiveSQLParser.KW_WHEN);
                this.state = 5192;
                this.triggerExpression();
                this.state = 5193;
                this.match(HiveSQLParser.KW_DO);
                this.state = 5194;
                this.triggerActionExpression();
                }
                break;
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_DROP:
                {
                this.state = 5200;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_ADD:
                    {
                    this.state = 5196;
                    this.match(HiveSQLParser.KW_ADD);
                    this.state = 5197;
                    this.match(HiveSQLParser.KW_TO);
                    }
                    break;
                case HiveSQLParser.KW_DROP:
                    {
                    this.state = 5198;
                    this.match(HiveSQLParser.KW_DROP);
                    this.state = 5199;
                    this.match(HiveSQLParser.KW_FROM);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5205;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSQLParser.KW_POOL:
                    {
                    this.state = 5202;
                    this.match(HiveSQLParser.KW_POOL);
                    this.state = 5203;
                    localContext._poolName = this.poolPath();
                    }
                    break;
                case HiveSQLParser.KW_UNMANAGED:
                    {
                    this.state = 5204;
                    this.match(HiveSQLParser.KW_UNMANAGED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTriggerStatement(): DropTriggerStatementContext {
        let localContext = new DropTriggerStatementContext(this.context, this.state);
        this.enterRule(localContext, 984, HiveSQLParser.RULE_dropTriggerStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5209;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 5210;
            this.match(HiveSQLParser.KW_TRIGGER);
            this.state = 5211;
            localContext._rpName = this.id_();
            this.state = 5212;
            this.match(HiveSQLParser.DOT);
            this.state = 5213;
            localContext._triggerName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public poolAssign(): PoolAssignContext {
        let localContext = new PoolAssignContext(this.context, this.state);
        this.enterRule(localContext, 986, HiveSQLParser.RULE_poolAssign);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5227;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_ALLOC_FRACTION:
                {
                this.state = 5215;
                this.match(HiveSQLParser.KW_ALLOC_FRACTION);
                this.state = 5216;
                this.match(HiveSQLParser.EQUAL);
                this.state = 5217;
                localContext._allocFraction = this.match(HiveSQLParser.Number);
                }
                break;
            case HiveSQLParser.KW_QUERY_PARALLELISM:
                {
                this.state = 5218;
                this.match(HiveSQLParser.KW_QUERY_PARALLELISM);
                this.state = 5219;
                this.match(HiveSQLParser.EQUAL);
                this.state = 5220;
                localContext._parallelism = this.match(HiveSQLParser.Number);
                }
                break;
            case HiveSQLParser.KW_SCHEDULING_POLICY:
                {
                this.state = 5221;
                this.match(HiveSQLParser.KW_SCHEDULING_POLICY);
                this.state = 5222;
                this.match(HiveSQLParser.EQUAL);
                this.state = 5223;
                localContext._policy = this.match(HiveSQLParser.StringLiteral);
                }
                break;
            case HiveSQLParser.KW_PATH:
                {
                this.state = 5224;
                this.match(HiveSQLParser.KW_PATH);
                this.state = 5225;
                this.match(HiveSQLParser.EQUAL);
                this.state = 5226;
                localContext._path = this.poolPath();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public poolAssignList(): PoolAssignListContext {
        let localContext = new PoolAssignListContext(this.context, this.state);
        this.enterRule(localContext, 988, HiveSQLParser.RULE_poolAssignList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5229;
            this.poolAssign();
            this.state = 5234;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 385) {
                {
                {
                this.state = 5230;
                this.match(HiveSQLParser.COMMA);
                this.state = 5231;
                this.poolAssign();
                }
                }
                this.state = 5236;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createPoolStatement(): CreatePoolStatementContext {
        let localContext = new CreatePoolStatementContext(this.context, this.state);
        this.enterRule(localContext, 990, HiveSQLParser.RULE_createPoolStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5237;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 5238;
            this.match(HiveSQLParser.KW_POOL);
            this.state = 5239;
            localContext._rpName = this.id_();
            this.state = 5240;
            this.match(HiveSQLParser.DOT);
            this.state = 5241;
            this.poolPath();
            this.state = 5242;
            this.match(HiveSQLParser.KW_WITH);
            this.state = 5243;
            this.poolAssignList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterPoolStatement(): AlterPoolStatementContext {
        let localContext = new AlterPoolStatementContext(this.context, this.state);
        this.enterRule(localContext, 992, HiveSQLParser.RULE_alterPoolStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5245;
            this.match(HiveSQLParser.KW_ALTER);
            this.state = 5246;
            this.match(HiveSQLParser.KW_POOL);
            this.state = 5247;
            localContext._rpName = this.id_();
            this.state = 5248;
            this.match(HiveSQLParser.DOT);
            this.state = 5249;
            this.poolPath();
            this.state = 5257;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_SET:
                {
                this.state = 5250;
                this.match(HiveSQLParser.KW_SET);
                this.state = 5251;
                this.poolAssignList();
                }
                break;
            case HiveSQLParser.KW_UNSET:
                {
                this.state = 5252;
                this.match(HiveSQLParser.KW_UNSET);
                this.state = 5253;
                this.match(HiveSQLParser.KW_SCHEDULING_POLICY);
                }
                break;
            case HiveSQLParser.KW_ADD:
            case HiveSQLParser.KW_DROP:
                {
                this.state = 5254;
                _la = this.tokenStream.LA(1);
                if(!(_la === 4 || _la === 98)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5255;
                this.match(HiveSQLParser.KW_TRIGGER);
                this.state = 5256;
                localContext._triggerName = this.id_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropPoolStatement(): DropPoolStatementContext {
        let localContext = new DropPoolStatementContext(this.context, this.state);
        this.enterRule(localContext, 994, HiveSQLParser.RULE_dropPoolStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5259;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 5260;
            this.match(HiveSQLParser.KW_POOL);
            this.state = 5261;
            localContext._rpName = this.id_();
            this.state = 5262;
            this.match(HiveSQLParser.DOT);
            this.state = 5263;
            this.poolPath();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMappingStatement(): CreateMappingStatementContext {
        let localContext = new CreateMappingStatementContext(this.context, this.state);
        this.enterRule(localContext, 996, HiveSQLParser.RULE_createMappingStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5265;
            this.match(HiveSQLParser.KW_CREATE);
            this.state = 5266;
            localContext._mappingType = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 14 || _la === 139 || _la === 359)) {
                localContext._mappingType = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5267;
            this.match(HiveSQLParser.KW_MAPPING);
            this.state = 5268;
            localContext._name = this.match(HiveSQLParser.StringLiteral);
            this.state = 5269;
            this.match(HiveSQLParser.KW_IN);
            this.state = 5270;
            localContext._rpName = this.id_();
            this.state = 5274;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_TO:
                {
                this.state = 5271;
                this.match(HiveSQLParser.KW_TO);
                this.state = 5272;
                localContext._path = this.poolPath();
                }
                break;
            case HiveSQLParser.KW_UNMANAGED:
                {
                this.state = 5273;
                this.unmanaged();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 5279;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 5276;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 5277;
                this.match(HiveSQLParser.KW_ORDER);
                this.state = 5278;
                localContext._order = this.match(HiveSQLParser.Number);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterMappingStatement(): AlterMappingStatementContext {
        let localContext = new AlterMappingStatementContext(this.context, this.state);
        this.enterRule(localContext, 998, HiveSQLParser.RULE_alterMappingStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5281;
            this.match(HiveSQLParser.KW_ALTER);
            this.state = 5282;
            localContext._mappingType = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 14 || _la === 139 || _la === 359)) {
                localContext._mappingType = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5283;
            this.match(HiveSQLParser.KW_MAPPING);
            this.state = 5284;
            localContext._name = this.match(HiveSQLParser.StringLiteral);
            this.state = 5285;
            this.match(HiveSQLParser.KW_IN);
            this.state = 5286;
            localContext._rpName = this.id_();
            this.state = 5290;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSQLParser.KW_TO:
                {
                this.state = 5287;
                this.match(HiveSQLParser.KW_TO);
                this.state = 5288;
                localContext._path = this.poolPath();
                }
                break;
            case HiveSQLParser.KW_UNMANAGED:
                {
                this.state = 5289;
                this.unmanaged();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 5295;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 376) {
                {
                this.state = 5292;
                this.match(HiveSQLParser.KW_WITH);
                this.state = 5293;
                this.match(HiveSQLParser.KW_ORDER);
                this.state = 5294;
                localContext._order = this.match(HiveSQLParser.Number);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropMappingStatement(): DropMappingStatementContext {
        let localContext = new DropMappingStatementContext(this.context, this.state);
        this.enterRule(localContext, 1000, HiveSQLParser.RULE_dropMappingStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5297;
            this.match(HiveSQLParser.KW_DROP);
            this.state = 5298;
            localContext._mappingType = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 14 || _la === 139 || _la === 359)) {
                localContext._mappingType = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5299;
            this.match(HiveSQLParser.KW_MAPPING);
            this.state = 5300;
            localContext._name = this.match(HiveSQLParser.StringLiteral);
            this.state = 5301;
            this.match(HiveSQLParser.KW_IN);
            this.state = 5302;
            localContext._rpName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public static readonly _serializedATN: number[] = [
        4,1,426,5305,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,
        2,500,7,500,1,0,1,0,1,0,1,1,1,1,5,1,1008,8,1,10,1,12,1,1011,9,1,
        1,2,1,2,5,2,1015,8,2,10,2,12,2,1018,9,2,1,2,1,2,1,2,3,2,1023,8,2,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,1032,8,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,3,3,1042,8,3,1,3,3,3,1045,8,3,1,3,1,3,3,3,1049,8,3,1,4,1,
        4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,3,6,1069,8,6,1,6,1,6,1,7,1,7,1,7,3,7,1076,8,7,1,7,1,7,1,7,3,7,
        1081,8,7,1,7,1,7,1,7,1,7,3,7,1087,8,7,1,8,1,8,3,8,1091,8,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1104,8,9,1,10,1,10,3,10,
        1108,8,10,1,10,1,10,3,10,1112,8,10,1,10,1,10,1,10,3,10,1117,8,10,
        1,11,1,11,1,11,1,11,1,11,3,11,1124,8,11,1,11,1,11,3,11,1128,8,11,
        1,12,1,12,1,12,3,12,1133,8,12,1,13,1,13,1,13,1,13,1,13,3,13,1140,
        8,13,1,13,1,13,3,13,1144,8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        5,15,1153,8,15,10,15,12,15,1156,9,15,1,16,1,16,1,16,3,16,1161,8,
        16,1,17,1,17,1,17,1,17,1,17,3,17,1168,8,17,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,3,18,1215,8,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,
        21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
        26,1,26,1,26,1,27,1,27,1,27,3,27,1244,8,27,1,27,1,27,3,27,1248,8,
        27,1,27,3,27,1251,8,27,1,27,3,27,1254,8,27,1,27,1,27,1,27,3,27,1259,
        8,27,1,27,1,27,1,27,1,27,3,27,1265,8,27,1,27,1,27,3,27,1269,8,27,
        1,27,1,27,1,27,1,27,3,27,1275,8,27,3,27,1277,8,27,1,28,1,28,1,28,
        1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,5,31,1292,8,31,
        10,31,12,31,1295,9,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,
        34,3,34,1306,8,34,1,34,1,34,3,34,1310,8,34,1,35,1,35,1,35,1,36,1,
        36,3,36,1317,8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1325,8,36,1,
        36,3,36,1328,8,36,1,37,1,37,1,37,3,37,1333,8,37,1,37,1,37,3,37,1337,
        8,37,1,37,3,37,1340,8,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,
        3,39,1350,8,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1358,8,39,5,39,
        1360,8,39,10,39,12,39,1363,9,39,3,39,1365,8,39,1,40,1,40,3,40,1369,
        8,40,1,41,1,41,3,41,1373,8,41,1,41,3,41,1376,8,41,1,42,1,42,1,42,
        3,42,1381,8,42,1,42,1,42,1,42,1,42,3,42,1387,8,42,1,42,1,42,1,42,
        3,42,1392,8,42,1,42,1,42,1,42,3,42,1397,8,42,1,42,1,42,3,42,1401,
        8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1412,8,43,
        3,43,1414,8,43,1,43,1,43,3,43,1418,8,43,1,44,1,44,1,45,1,45,1,46,
        1,46,1,46,1,46,3,46,1428,8,46,1,46,1,46,3,46,1432,8,46,1,46,1,46,
        1,46,1,46,3,46,1438,8,46,1,46,3,46,1441,8,46,1,46,1,46,1,46,1,46,
        1,46,3,46,1448,8,46,1,46,1,46,1,46,3,46,1453,8,46,1,46,1,46,1,46,
        1,46,1,46,1,46,3,46,1461,8,46,1,46,1,46,1,46,3,46,1466,8,46,1,46,
        1,46,3,46,1470,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1478,8,46,
        1,46,1,46,1,46,3,46,1483,8,46,1,46,1,46,1,46,1,46,3,46,1489,8,46,
        1,46,1,46,1,46,1,46,3,46,1495,8,46,1,46,3,46,1498,8,46,1,46,3,46,
        1501,8,46,1,46,3,46,1504,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        3,46,1513,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1521,8,46,1,46,
        1,46,1,46,3,46,1526,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1534,
        8,46,1,46,1,46,1,46,1,46,1,46,3,46,1541,8,46,1,46,3,46,1544,8,46,
        1,46,3,46,1547,8,46,3,46,1549,8,46,1,46,1,46,1,46,1,46,1,46,1,46,
        3,46,1557,8,46,1,46,3,46,1560,8,46,1,46,3,46,1563,8,46,1,46,3,46,
        1566,8,46,1,46,3,46,1569,8,46,1,46,3,46,1572,8,46,1,46,3,46,1575,
        8,46,1,46,3,46,1578,8,46,1,46,3,46,1581,8,46,1,46,3,46,1584,8,46,
        1,46,3,46,1587,8,46,3,46,1589,8,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,3,46,1601,8,46,1,46,1,46,3,46,1605,8,46,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1615,8,47,1,48,1,48,1,48,
        1,48,3,48,1621,8,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,
        1,51,1,51,1,51,1,51,3,51,1636,8,51,1,52,1,52,1,52,1,52,1,53,1,53,
        1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,3,55,1653,8,55,1,55,
        1,55,1,55,3,55,1658,8,55,1,56,1,56,3,56,1662,8,56,1,56,1,56,3,56,
        1666,8,56,1,56,1,56,1,56,1,57,1,57,3,57,1673,8,57,1,57,1,57,1,57,
        5,57,1678,8,57,10,57,12,57,1681,9,57,1,57,1,57,1,57,3,57,1686,8,
        57,1,58,1,58,3,58,1690,8,58,1,58,3,58,1693,8,58,1,58,1,58,1,58,5,
        58,1698,8,58,10,58,12,58,1701,9,58,1,58,1,58,1,58,1,59,1,59,1,59,
        1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,
        1,62,3,62,1723,8,62,1,63,1,63,1,63,3,63,1728,8,63,1,63,1,63,3,63,
        1732,8,63,1,64,1,64,1,64,1,64,1,65,1,65,3,65,1740,8,65,1,66,1,66,
        1,66,1,67,1,67,1,67,1,67,3,67,1749,8,67,1,67,1,67,3,67,1753,8,67,
        1,67,1,67,1,67,1,67,3,67,1759,8,67,1,68,1,68,1,68,1,68,3,68,1765,
        8,68,1,68,1,68,1,68,1,68,1,68,3,68,1772,8,68,1,68,3,68,1775,8,68,
        1,68,1,68,1,68,1,68,3,68,1781,8,68,1,69,1,69,1,69,5,69,1786,8,69,
        10,69,12,69,1789,9,69,1,70,1,70,1,70,1,70,1,70,3,70,1796,8,70,1,
        71,1,71,1,72,1,72,1,72,5,72,1803,8,72,10,72,12,72,1806,9,72,1,73,
        1,73,1,73,1,73,1,73,1,73,3,73,1814,8,73,1,74,1,74,1,74,1,74,1,75,
        1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,
        3,78,1834,8,78,1,78,1,78,1,78,1,78,1,78,3,78,1841,8,78,3,78,1843,
        8,78,1,79,1,79,1,79,5,79,1848,8,79,10,79,12,79,1851,9,79,1,80,1,
        80,1,80,1,81,1,81,1,82,1,82,3,82,1860,8,82,1,82,1,82,1,82,1,82,1,
        82,1,82,3,82,1868,8,82,1,83,1,83,3,83,1872,8,83,1,83,1,83,3,83,1876,
        8,83,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,3,85,
        1889,8,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,1898,8,86,1,86,
        1,86,1,87,1,87,3,87,1904,8,87,1,87,1,87,3,87,1908,8,87,1,87,1,87,
        1,87,1,87,1,87,3,87,1915,8,87,1,87,3,87,1918,8,87,1,87,3,87,1921,
        8,87,1,87,3,87,1924,8,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,3,88,1936,8,88,1,88,1,88,1,89,1,89,3,89,1942,8,89,1,90,
        1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,
        1,92,1,93,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,3,94,1968,8,94,
        1,94,1,94,1,95,1,95,1,95,1,95,3,95,1976,8,95,1,95,1,95,3,95,1980,
        8,95,1,95,3,95,1983,8,95,1,95,3,95,1986,8,95,1,95,3,95,1989,8,95,
        1,95,3,95,1992,8,95,1,95,3,95,1995,8,95,1,95,3,95,1998,8,95,1,95,
        3,95,2001,8,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,3,96,2010,8,96,
        1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,3,97,2020,8,97,1,97,3,97,
        2023,8,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,
        1,99,1,99,1,100,1,100,1,100,1,100,1,100,3,100,2043,8,100,1,101,1,
        101,1,101,1,101,3,101,2049,8,101,1,101,1,101,1,101,1,101,3,101,2055,
        8,101,1,101,3,101,2058,8,101,3,101,2060,8,101,1,102,1,102,1,102,
        1,102,1,103,3,103,2067,8,103,1,103,1,103,1,103,1,104,1,104,3,104,
        2074,8,104,1,105,1,105,3,105,2078,8,105,1,106,1,106,1,106,1,107,
        1,107,5,107,2085,8,107,10,107,12,107,2088,9,107,1,108,1,108,1,108,
        1,108,1,108,3,108,2095,8,108,1,108,1,108,1,108,3,108,2100,8,108,
        1,108,1,108,1,109,1,109,1,109,5,109,2107,8,109,10,109,12,109,2110,
        9,109,1,110,1,110,1,110,5,110,2115,8,110,10,110,12,110,2118,9,110,
        1,111,1,111,1,111,5,111,2123,8,111,10,111,12,111,2126,9,111,1,112,
        1,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,3,113,2143,8,113,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,3,114,2156,8,114,1,114,1,114,
        1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,3,116,2177,8,116,1,117,1,117,
        3,117,2181,8,117,1,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,
        1,120,1,120,1,120,1,120,1,120,3,120,2196,8,120,1,121,1,121,1,121,
        1,121,3,121,2202,8,121,1,121,3,121,2205,8,121,1,121,3,121,2208,8,
        121,1,121,3,121,2211,8,121,1,121,3,121,2214,8,121,1,122,1,122,3,
        122,2218,8,122,1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,125,1,
        125,1,125,5,125,2230,8,125,10,125,12,125,2233,9,125,1,125,1,125,
        1,125,5,125,2238,8,125,10,125,12,125,2241,9,125,3,125,2243,8,125,
        1,126,1,126,1,126,1,126,1,127,1,127,1,128,1,128,1,128,1,128,1,128,
        1,128,1,128,3,128,2258,8,128,1,129,1,129,1,129,1,129,1,129,1,129,
        1,130,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,131,1,131,
        1,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,1,133,1,133,1,133,
        1,133,1,133,1,133,1,133,3,133,2292,8,133,1,133,1,133,1,133,1,133,
        1,133,1,133,3,133,2300,8,133,1,133,1,133,1,133,3,133,2305,8,133,
        1,133,1,133,1,133,1,133,1,133,1,133,3,133,2313,8,133,1,133,1,133,
        1,133,3,133,2318,8,133,1,133,1,133,1,133,3,133,2323,8,133,1,134,
        1,134,1,134,1,135,1,135,1,135,5,135,2331,8,135,10,135,12,135,2334,
        9,135,1,136,1,136,1,136,5,136,2339,8,136,10,136,12,136,2342,9,136,
        1,137,1,137,1,137,5,137,2347,8,137,10,137,12,137,2350,9,137,1,138,
        1,138,1,138,5,138,2355,8,138,10,138,12,138,2358,9,138,1,139,1,139,
        1,140,1,140,1,140,1,140,1,140,1,140,3,140,2368,8,140,5,140,2370,
        8,140,10,140,12,140,2373,9,140,1,141,1,141,1,141,5,141,2378,8,141,
        10,141,12,141,2381,9,141,1,142,1,142,1,142,1,142,1,143,1,143,3,143,
        2389,8,143,1,143,3,143,2392,8,143,1,144,1,144,1,145,1,145,1,146,
        1,146,1,146,3,146,2401,8,146,1,147,1,147,1,148,1,148,3,148,2407,
        8,148,1,148,1,148,3,148,2411,8,148,1,149,1,149,1,149,1,149,3,149,
        2417,8,149,1,150,1,150,3,150,2421,8,150,1,151,1,151,1,151,1,152,
        1,152,1,152,1,152,1,152,1,153,1,153,3,153,2433,8,153,1,153,1,153,
        1,153,1,153,1,153,1,153,1,153,3,153,2442,8,153,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,3,154,2453,8,154,1,155,1,155,
        3,155,2457,8,155,1,156,1,156,1,156,5,156,2462,8,156,10,156,12,156,
        2465,9,156,1,157,1,157,1,157,1,157,1,158,1,158,1,158,5,158,2474,
        8,158,10,158,12,158,2477,9,158,1,159,1,159,1,160,1,160,3,160,2483,
        8,160,1,161,1,161,1,162,1,162,1,162,1,163,1,163,3,163,2492,8,163,
        1,163,3,163,2495,8,163,1,164,1,164,1,164,5,164,2500,8,164,10,164,
        12,164,2503,9,164,1,165,1,165,1,165,3,165,2508,8,165,1,166,1,166,
        1,167,1,167,3,167,2514,8,167,1,167,3,167,2517,8,167,1,168,1,168,
        1,168,1,168,3,168,2523,8,168,1,169,1,169,3,169,2527,8,169,1,170,
        1,170,3,170,2531,8,170,1,171,1,171,1,171,3,171,2536,8,171,1,171,
        1,171,3,171,2540,8,171,1,172,1,172,3,172,2544,8,172,1,173,1,173,
        3,173,2548,8,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2556,
        8,173,1,174,1,174,3,174,2560,8,174,1,174,1,174,3,174,2564,8,174,
        1,175,1,175,3,175,2568,8,175,1,176,1,176,3,176,2572,8,176,1,176,
        1,176,1,176,1,176,1,176,1,176,3,176,2580,8,176,1,177,1,177,3,177,
        2584,8,177,1,177,1,177,3,177,2588,8,177,1,178,1,178,1,178,1,178,
        1,178,1,178,3,178,2596,8,178,1,179,1,179,1,179,3,179,2601,8,179,
        1,180,1,180,1,180,3,180,2606,8,180,1,181,1,181,3,181,2610,8,181,
        1,182,1,182,3,182,2614,8,182,1,183,1,183,1,183,1,183,1,183,3,183,
        2621,8,183,1,184,1,184,1,185,1,185,1,185,5,185,2628,8,185,10,185,
        12,185,2631,9,185,1,186,1,186,1,186,1,186,1,186,3,186,2638,8,186,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,2649,
        8,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,3,187,2667,8,187,1,187,3,187,
        2670,8,187,1,187,1,187,1,187,1,187,3,187,2676,8,187,1,188,1,188,
        1,188,1,188,1,188,1,189,1,189,1,189,1,189,1,189,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,192,1,192,
        3,192,2702,8,192,1,193,3,193,2705,8,193,1,193,1,193,1,194,1,194,
        3,194,2711,8,194,1,195,1,195,1,195,1,195,5,195,2717,8,195,10,195,
        12,195,2720,9,195,1,196,1,196,1,196,1,196,1,196,3,196,2727,8,196,
        1,196,1,196,1,196,1,196,1,196,1,197,1,197,1,197,1,197,5,197,2738,
        8,197,10,197,12,197,2741,9,197,1,198,1,198,4,198,2745,8,198,11,198,
        12,198,2746,1,199,1,199,1,199,1,199,3,199,2753,8,199,1,200,1,200,
        3,200,2757,8,200,1,200,3,200,2760,8,200,1,200,3,200,2763,8,200,1,
        200,3,200,2766,8,200,1,200,3,200,2769,8,200,1,200,3,200,2772,8,200,
        1,200,1,200,1,200,1,200,1,200,3,200,2779,8,200,1,201,1,201,3,201,
        2783,8,201,1,201,3,201,2786,8,201,1,201,3,201,2789,8,201,1,201,3,
        201,2792,8,201,1,201,3,201,2795,8,201,1,201,3,201,2798,8,201,1,201,
        3,201,2801,8,201,1,202,1,202,1,202,4,202,2806,8,202,11,202,12,202,
        2807,1,203,3,203,2811,8,203,1,203,1,203,1,204,1,204,1,204,3,204,
        2818,8,204,1,204,3,204,2821,8,204,1,204,3,204,2824,8,204,1,204,3,
        204,2827,8,204,1,204,3,204,2830,8,204,1,204,3,204,2833,8,204,1,204,
        3,204,2836,8,204,1,204,3,204,2839,8,204,1,204,3,204,2842,8,204,1,
        204,3,204,2845,8,204,1,204,3,204,2848,8,204,1,204,1,204,3,204,2852,
        8,204,1,204,3,204,2855,8,204,1,204,3,204,2858,8,204,1,204,3,204,
        2861,8,204,1,204,3,204,2864,8,204,1,204,3,204,2867,8,204,1,204,3,
        204,2870,8,204,1,204,3,204,2873,8,204,1,204,3,204,2876,8,204,1,204,
        3,204,2879,8,204,1,204,3,204,2882,8,204,3,204,2884,8,204,1,205,1,
        205,1,205,1,205,3,205,2890,8,205,1,205,1,205,3,205,2894,8,205,1,
        205,1,205,1,205,1,205,1,205,3,205,2901,8,205,3,205,2903,8,205,1,
        206,3,206,2906,8,206,1,206,1,206,1,206,3,206,2911,8,206,1,206,3,
        206,2914,8,206,1,206,1,206,3,206,2918,8,206,1,207,1,207,1,207,3,
        207,2923,8,207,1,207,1,207,1,207,1,207,3,207,2929,8,207,1,208,1,
        208,1,208,1,208,3,208,2935,8,208,1,209,1,209,1,209,1,209,1,210,1,
        210,3,210,2943,8,210,1,211,1,211,1,211,1,211,5,211,2949,8,211,10,
        211,12,211,2952,9,211,1,212,1,212,1,212,1,212,3,212,2958,8,212,1,
        213,1,213,1,213,1,213,3,213,2964,8,213,1,214,1,214,1,214,1,214,1,
        214,5,214,2971,8,214,10,214,12,214,2974,9,214,3,214,2976,8,214,1,
        215,1,215,3,215,2980,8,215,1,216,1,216,1,216,1,217,1,217,1,217,1,
        217,1,218,1,218,1,219,1,219,3,219,2993,8,219,1,220,1,220,3,220,2997,
        8,220,1,221,1,221,1,221,1,221,1,222,1,222,1,222,4,222,3006,8,222,
        11,222,12,222,3007,1,223,1,223,1,223,4,223,3013,8,223,11,223,12,
        223,3014,1,224,1,224,3,224,3019,8,224,1,224,1,224,1,224,3,224,3024,
        8,224,1,224,3,224,3027,8,224,1,224,1,224,1,224,1,224,1,224,1,224,
        1,225,1,225,5,225,3037,8,225,10,225,12,225,3040,9,225,1,225,3,225,
        3043,8,225,1,226,1,226,1,226,1,226,1,226,3,226,3050,8,226,1,226,
        1,226,1,226,3,226,3055,8,226,1,226,1,226,1,226,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,228,1,228,1,228,1,228,1,228,1,229,1,229,
        1,229,3,229,3075,8,229,1,230,1,230,1,230,4,230,3080,8,230,11,230,
        12,230,3081,1,231,1,231,1,231,1,231,1,232,1,232,1,232,1,233,1,233,
        1,233,1,234,1,234,1,234,1,235,1,235,1,235,1,235,1,235,1,235,1,235,
        1,235,3,235,3105,8,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,
        1,235,1,235,1,235,1,235,1,235,3,235,3119,8,235,1,236,1,236,1,236,
        1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,
        1,236,1,236,1,236,1,236,1,236,3,236,3140,8,236,1,237,1,237,1,237,
        1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
        3,237,3156,8,237,1,238,1,238,1,238,1,238,1,238,1,238,1,239,1,239,
        1,239,1,239,1,239,3,239,3169,8,239,1,240,1,240,3,240,3173,8,240,
        1,241,1,241,3,241,3177,8,241,1,242,1,242,1,243,1,243,1,243,1,243,
        3,243,3185,8,243,1,244,1,244,1,244,1,244,1,244,1,245,1,245,1,245,
        1,245,5,245,3196,8,245,10,245,12,245,3199,9,245,1,245,1,245,1,245,
        1,246,1,246,1,246,1,246,1,246,1,247,1,247,1,247,1,247,1,247,1,248,
        1,248,1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,250,1,250,3,250,
        3225,8,250,1,250,1,250,1,250,1,250,1,250,3,250,3232,8,250,1,251,
        1,251,1,251,3,251,3237,8,251,1,252,1,252,1,252,3,252,3242,8,252,
        1,253,1,253,1,253,1,253,1,254,1,254,3,254,3250,8,254,1,254,1,254,
        1,254,1,254,3,254,3256,8,254,1,254,1,254,3,254,3260,8,254,1,254,
        3,254,3263,8,254,1,254,3,254,3266,8,254,1,255,1,255,1,255,1,255,
        3,255,3272,8,255,1,255,1,255,1,255,1,255,1,255,3,255,3279,8,255,
        1,256,1,256,1,256,1,256,1,256,1,257,1,257,1,257,3,257,3289,8,257,
        1,258,1,258,3,258,3293,8,258,1,258,4,258,3296,8,258,11,258,12,258,
        3297,1,259,1,259,3,259,3302,8,259,1,260,1,260,5,260,3306,8,260,10,
        260,12,260,3309,9,260,1,261,1,261,5,261,3313,8,261,10,261,12,261,
        3316,9,261,1,262,1,262,5,262,3320,8,262,10,262,12,262,3323,9,262,
        1,263,1,263,1,263,1,264,1,264,3,264,3330,8,264,1,264,1,264,1,264,
        1,264,1,264,5,264,3337,8,264,10,264,12,264,3340,9,264,1,264,3,264,
        3343,8,264,1,264,3,264,3346,8,264,1,265,1,265,1,265,1,265,1,265,
        1,265,3,265,3354,8,265,1,265,3,265,3357,8,265,1,266,1,266,1,266,
        1,266,1,266,1,266,3,266,3365,8,266,1,266,3,266,3368,8,266,1,267,
        1,267,1,267,1,267,1,267,1,267,3,267,3376,8,267,1,267,1,267,3,267,
        3380,8,267,1,267,1,267,1,267,3,267,3385,8,267,1,268,1,268,3,268,
        3389,8,268,1,269,1,269,1,269,1,269,1,270,1,270,1,270,3,270,3398,
        8,270,1,271,1,271,1,271,1,271,1,271,1,272,1,272,1,272,1,272,1,273,
        1,273,1,273,5,273,3412,8,273,10,273,12,273,3415,9,273,1,274,1,274,
        1,274,1,274,1,275,1,275,1,275,1,275,1,276,1,276,1,276,1,276,3,276,
        3429,8,276,3,276,3431,8,276,1,277,1,277,1,277,1,277,1,277,1,277,
        1,278,1,278,1,278,1,278,1,279,1,279,1,279,1,279,3,279,3447,8,279,
        1,279,1,279,1,279,1,279,1,279,3,279,3454,8,279,1,280,1,280,1,281,
        1,281,1,281,1,281,1,282,1,282,1,282,1,283,1,283,1,283,1,284,1,284,
        1,284,3,284,3471,8,284,1,284,3,284,3474,8,284,1,284,3,284,3477,8,
        284,1,284,1,284,1,284,1,284,3,284,3483,8,284,1,285,1,285,1,285,1,
        285,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,287,1,287,1,287,
        1,287,1,287,1,287,1,287,1,287,1,287,1,287,3,287,3506,8,287,1,287,
        1,287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
        3,288,3520,8,288,1,288,3,288,3523,8,288,1,289,1,289,1,289,3,289,
        3528,8,289,1,290,1,290,1,290,1,290,1,290,1,291,1,291,1,291,1,291,
        1,291,1,292,1,292,1,292,1,292,1,292,1,293,1,293,1,293,1,293,1,293,
        1,293,1,293,1,293,1,293,3,293,3554,8,293,1,294,1,294,3,294,3558,
        8,294,1,294,3,294,3561,8,294,1,294,3,294,3564,8,294,1,294,1,294,
        3,294,3568,8,294,1,294,1,294,1,294,3,294,3573,8,294,1,294,3,294,
        3576,8,294,1,294,3,294,3579,8,294,1,294,3,294,3582,8,294,1,294,3,
        294,3585,8,294,1,294,1,294,1,294,1,294,3,294,3591,8,294,1,294,3,
        294,3594,8,294,1,294,3,294,3597,8,294,1,294,3,294,3600,8,294,1,294,
        3,294,3603,8,294,1,294,3,294,3606,8,294,1,294,3,294,3609,8,294,1,
        294,3,294,3612,8,294,1,294,3,294,3615,8,294,1,294,3,294,3618,8,294,
        1,294,1,294,3,294,3622,8,294,3,294,3624,8,294,1,294,1,294,1,294,
        1,294,3,294,3630,8,294,1,294,1,294,1,294,3,294,3635,8,294,1,294,
        3,294,3638,8,294,1,294,3,294,3641,8,294,1,294,3,294,3644,8,294,1,
        294,1,294,1,294,1,294,3,294,3650,8,294,1,294,3,294,3653,8,294,1,
        294,3,294,3656,8,294,1,294,3,294,3659,8,294,1,294,3,294,3662,8,294,
        1,294,3,294,3665,8,294,1,294,3,294,3668,8,294,1,294,3,294,3671,8,
        294,1,294,3,294,3674,8,294,1,294,3,294,3677,8,294,1,294,1,294,3,
        294,3681,8,294,3,294,3683,8,294,3,294,3685,8,294,1,295,1,295,1,295,
        3,295,3690,8,295,1,295,1,295,1,295,1,295,3,295,3696,8,295,1,295,
        1,295,1,295,3,295,3701,8,295,1,296,1,296,1,296,1,297,1,297,1,297,
        1,298,1,298,1,298,1,299,1,299,1,299,1,299,1,300,1,300,1,300,3,300,
        3719,8,300,1,300,1,300,1,301,1,301,1,301,1,301,1,301,3,301,3728,
        8,301,1,302,1,302,1,303,1,303,1,304,1,304,1,304,5,304,3737,8,304,
        10,304,12,304,3740,9,304,1,305,1,305,1,305,5,305,3745,8,305,10,305,
        12,305,3748,9,305,1,306,1,306,1,306,1,307,1,307,1,307,1,307,4,307,
        3757,8,307,11,307,12,307,3758,1,307,3,307,3762,8,307,1,308,1,308,
        5,308,3766,8,308,10,308,12,308,3769,9,308,1,308,1,308,5,308,3773,
        8,308,10,308,12,308,3776,9,308,1,308,1,308,5,308,3780,8,308,10,308,
        12,308,3783,9,308,1,308,1,308,5,308,3787,8,308,10,308,12,308,3790,
        9,308,1,308,1,308,1,308,1,308,3,308,3796,8,308,1,309,1,309,1,309,
        1,309,1,309,1,309,1,309,3,309,3805,8,309,5,309,3807,8,309,10,309,
        12,309,3810,9,309,1,310,1,310,1,310,1,310,3,310,3816,8,310,1,310,
        5,310,3819,8,310,10,310,12,310,3822,9,310,1,311,3,311,3825,8,311,
        1,311,1,311,1,311,1,312,1,312,1,312,1,312,1,313,1,313,1,314,1,314,
        1,314,1,314,1,314,3,314,3841,8,314,1,314,1,314,3,314,3845,8,314,
        3,314,3847,8,314,1,314,3,314,3850,8,314,1,315,1,315,1,315,1,315,
        1,315,1,315,1,315,1,315,1,315,5,315,3861,8,315,10,315,12,315,3864,
        9,315,3,315,3866,8,315,1,315,3,315,3869,8,315,1,315,1,315,1,315,
        1,315,1,315,1,315,1,315,1,315,5,315,3879,8,315,10,315,12,315,3882,
        9,315,3,315,3884,8,315,1,315,1,315,1,315,1,315,1,315,3,315,3891,
        8,315,1,315,1,315,1,315,1,315,1,315,5,315,3898,8,315,10,315,12,315,
        3901,9,315,1,315,1,315,3,315,3905,8,315,3,315,3907,8,315,3,315,3909,
        8,315,1,316,1,316,1,317,1,317,1,317,1,317,1,317,1,317,1,317,1,317,
        1,317,1,317,1,317,5,317,3924,8,317,10,317,12,317,3927,9,317,3,317,
        3929,8,317,1,317,1,317,1,318,1,318,1,318,1,318,1,318,3,318,3938,
        8,318,1,318,1,318,1,319,1,319,3,319,3944,8,319,1,320,1,320,3,320,
        3948,8,320,1,320,3,320,3951,8,320,1,320,3,320,3954,8,320,1,320,3,
        320,3957,8,320,1,320,3,320,3960,8,320,1,321,1,321,1,321,1,321,1,
        321,1,321,1,321,1,321,1,321,1,321,3,321,3972,8,321,1,322,1,322,3,
        322,3976,8,322,1,322,3,322,3979,8,322,1,322,3,322,3982,8,322,1,323,
        1,323,1,323,1,323,1,323,3,323,3989,8,323,1,323,3,323,3992,8,323,
        1,324,1,324,1,324,3,324,3997,8,324,1,324,1,324,1,325,1,325,1,325,
        1,325,3,325,4005,8,325,1,325,1,325,1,326,1,326,3,326,4011,8,326,
        1,326,1,326,1,326,3,326,4016,8,326,1,326,1,326,3,326,4020,8,326,
        1,327,1,327,1,327,3,327,4025,8,327,1,328,1,328,1,328,1,328,1,328,
        3,328,4032,8,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,
        1,328,1,328,5,328,4044,8,328,10,328,12,328,4047,9,328,3,328,4049,
        8,328,1,328,1,328,3,328,4053,8,328,1,329,1,329,1,329,1,330,1,330,
        1,331,1,331,1,332,1,332,1,332,1,333,1,333,1,333,5,333,4068,8,333,
        10,333,12,333,4071,9,333,1,333,1,333,1,333,5,333,4076,8,333,10,333,
        12,333,4079,9,333,3,333,4081,8,333,1,334,1,334,1,335,1,335,1,335,
        1,335,1,336,1,336,1,336,1,336,1,336,3,336,4094,8,336,1,336,1,336,
        1,336,1,336,1,336,5,336,4101,8,336,10,336,12,336,4104,9,336,3,336,
        4106,8,336,1,336,1,336,1,337,1,337,3,337,4112,8,337,1,337,3,337,
        4115,8,337,1,337,1,337,1,337,3,337,4120,8,337,1,337,3,337,4123,8,
        337,1,338,1,338,1,339,1,339,1,339,5,339,4130,8,339,10,339,12,339,
        4133,9,339,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
        1,340,1,340,3,340,4146,8,340,1,340,1,340,1,340,1,340,3,340,4152,
        8,340,3,340,4154,8,340,1,340,1,340,1,340,1,341,1,341,1,341,3,341,
        4162,8,341,1,341,1,341,1,341,1,341,1,341,1,341,5,341,4170,8,341,
        10,341,12,341,4173,9,341,1,341,1,341,3,341,4177,8,341,3,341,4179,
        8,341,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,
        3,342,4191,8,342,1,342,1,342,1,342,1,342,3,342,4197,8,342,3,342,
        4199,8,342,1,342,1,342,1,342,1,343,1,343,3,343,4206,8,343,1,344,
        1,344,1,344,5,344,4211,8,344,10,344,12,344,4214,9,344,1,345,1,345,
        1,345,1,345,5,345,4220,8,345,10,345,12,345,4223,9,345,1,346,1,346,
        1,346,1,346,1,347,1,347,1,347,3,347,4232,8,347,1,347,3,347,4235,
        8,347,1,347,3,347,4238,8,347,1,347,3,347,4241,8,347,1,348,1,348,
        3,348,4245,8,348,1,349,1,349,1,349,1,349,1,349,1,349,1,349,3,349,
        4254,8,349,1,350,1,350,1,350,1,350,1,350,1,350,1,350,3,350,4263,
        8,350,1,351,1,351,1,351,1,351,1,351,1,351,3,351,4271,8,351,1,352,
        1,352,1,352,1,352,3,352,4277,8,352,1,353,1,353,1,353,1,353,1,354,
        1,354,1,354,3,354,4286,8,354,1,355,1,355,1,355,1,356,1,356,3,356,
        4293,8,356,1,356,1,356,1,356,1,356,5,356,4299,8,356,10,356,12,356,
        4302,9,356,1,356,1,356,1,357,1,357,1,357,1,357,1,357,3,357,4311,
        8,357,1,357,1,357,1,357,1,357,1,357,1,357,5,357,4319,8,357,10,357,
        12,357,4322,9,357,1,357,1,357,3,357,4326,8,357,1,358,1,358,3,358,
        4330,8,358,1,359,1,359,3,359,4334,8,359,1,359,1,359,5,359,4338,8,
        359,10,359,12,359,4341,9,359,1,359,1,359,1,360,1,360,1,361,1,361,
        1,361,1,362,1,362,1,362,1,363,1,363,1,364,1,364,1,364,1,364,1,365,
        1,365,3,365,4361,8,365,1,366,1,366,4,366,4365,8,366,11,366,12,366,
        4366,1,367,1,367,3,367,4371,8,367,1,368,1,368,3,368,4375,8,368,1,
        368,3,368,4378,8,368,1,368,1,368,5,368,4382,8,368,10,368,12,368,
        4385,9,368,1,369,1,369,3,369,4389,8,369,1,369,3,369,4392,8,369,1,
        370,1,370,3,370,4396,8,370,1,371,1,371,1,371,1,371,5,371,4402,8,
        371,10,371,12,371,4405,9,371,1,371,1,371,1,372,1,372,1,372,5,372,
        4412,8,372,10,372,12,372,4415,9,372,1,373,1,373,1,373,1,373,1,373,
        5,373,4422,8,373,10,373,12,373,4425,9,373,1,374,1,374,1,374,1,374,
        1,375,1,375,1,375,1,375,1,376,1,376,1,376,1,376,1,377,1,377,1,377,
        1,377,3,377,4443,8,377,1,378,1,378,1,378,1,378,1,378,3,378,4450,
        8,378,1,378,3,378,4453,8,378,1,378,1,378,1,378,1,378,1,379,1,379,
        1,379,1,379,1,379,3,379,4464,8,379,1,379,1,379,1,379,5,379,4469,
        8,379,10,379,12,379,4472,9,379,3,379,4474,8,379,3,379,4476,8,379,
        1,379,1,379,1,379,1,379,1,379,1,379,1,379,1,379,1,379,3,379,4487,
        8,379,1,379,1,379,1,379,1,379,1,379,1,379,1,379,1,379,3,379,4497,
        8,379,3,379,4499,8,379,1,380,1,380,1,380,1,380,3,380,4505,8,380,
        1,381,1,381,3,381,4509,8,381,1,382,1,382,1,382,1,382,1,382,1,382,
        1,382,3,382,4518,8,382,1,382,1,382,1,383,1,383,1,383,1,383,1,383,
        1,383,1,383,4,383,4529,8,383,11,383,12,383,4530,1,383,1,383,3,383,
        4535,8,383,1,383,1,383,1,384,1,384,1,384,1,384,1,384,1,384,4,384,
        4545,8,384,11,384,12,384,4546,1,384,1,384,3,384,4551,8,384,1,384,
        1,384,1,385,1,385,1,385,1,385,1,385,3,385,4560,8,385,1,385,1,385,
        1,386,1,386,1,387,1,387,1,387,1,387,1,387,1,387,1,387,1,388,1,388,
        1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,
        1,389,1,389,3,389,4588,8,389,1,390,1,390,1,391,1,391,1,392,1,392,
        4,392,4596,8,392,11,392,12,392,4597,1,393,1,393,1,393,1,394,1,394,
        1,394,3,394,4606,8,394,1,395,1,395,1,395,3,395,4611,8,395,1,396,
        1,396,1,396,1,397,1,397,1,398,1,398,1,398,1,399,1,399,1,399,1,399,
        1,399,1,399,1,399,1,399,1,399,1,399,1,399,3,399,4632,8,399,1,399,
        1,399,3,399,4636,8,399,1,400,1,400,1,400,1,400,1,400,1,400,1,400,
        1,400,1,400,1,400,1,400,1,400,3,400,4650,8,400,1,401,1,401,1,402,
        1,402,1,402,1,402,1,402,1,402,1,402,1,402,1,402,1,402,1,402,3,402,
        4665,8,402,1,403,1,403,1,403,1,403,1,403,1,403,1,403,5,403,4674,
        8,403,10,403,12,403,4677,9,403,1,404,1,404,1,405,5,405,4682,8,405,
        10,405,12,405,4685,9,405,1,405,1,405,1,406,1,406,1,407,1,407,1,407,
        1,407,5,407,4695,8,407,10,407,12,407,4698,9,407,1,408,1,408,1,409,
        1,409,1,409,1,409,5,409,4706,8,409,10,409,12,409,4709,9,409,1,410,
        1,410,1,411,1,411,1,411,1,411,5,411,4717,8,411,10,411,12,411,4720,
        9,411,1,412,1,412,1,413,1,413,1,413,1,413,5,413,4728,8,413,10,413,
        12,413,4731,9,413,1,414,1,414,1,415,1,415,1,415,1,415,5,415,4739,
        8,415,10,415,12,415,4742,9,415,1,416,1,416,1,417,1,417,1,417,1,417,
        5,417,4750,8,417,10,417,12,417,4753,9,417,1,418,1,418,1,419,1,419,
        1,419,1,419,1,419,3,419,4762,8,419,1,420,1,420,1,420,1,420,1,421,
        1,421,1,421,3,421,4771,8,421,1,422,1,422,3,422,4775,8,422,1,423,
        1,423,1,423,1,423,1,423,1,423,3,423,4783,8,423,1,424,1,424,1,424,
        1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,3,424,4796,8,424,
        1,425,1,425,1,425,1,425,1,426,1,426,1,427,1,427,3,427,4806,8,427,
        1,428,1,428,1,428,1,428,3,428,4812,8,428,1,429,1,429,1,429,1,429,
        1,430,1,430,1,430,1,430,1,430,1,430,1,430,3,430,4825,8,430,1,431,
        1,431,1,431,1,431,1,431,1,431,1,431,5,431,4834,8,431,10,431,12,431,
        4837,9,431,1,432,1,432,1,432,1,432,1,432,1,432,1,432,1,432,1,432,
        1,432,1,432,1,432,3,432,4851,8,432,1,433,1,433,1,433,3,433,4856,
        8,433,1,434,1,434,1,435,5,435,4861,8,435,10,435,12,435,4864,9,435,
        1,435,1,435,1,436,1,436,1,437,1,437,1,437,1,437,5,437,4874,8,437,
        10,437,12,437,4877,9,437,1,438,1,438,1,439,1,439,1,439,1,439,5,439,
        4885,8,439,10,439,12,439,4888,9,439,1,440,1,440,1,441,1,441,1,442,
        1,442,3,442,4896,8,442,1,443,1,443,1,443,1,443,1,443,5,443,4903,
        8,443,10,443,12,443,4906,9,443,1,443,1,443,1,444,1,444,1,444,3,444,
        4913,8,444,1,445,1,445,1,445,1,445,5,445,4919,8,445,10,445,12,445,
        4922,9,445,1,445,1,445,1,446,1,446,1,446,1,446,1,447,1,447,3,447,
        4932,8,447,1,448,1,448,1,449,1,449,1,450,1,450,1,450,3,450,4941,
        8,450,1,451,1,451,3,451,4945,8,451,1,452,1,452,1,452,3,452,4950,
        8,452,1,453,1,453,1,454,1,454,1,455,1,455,1,456,1,456,1,456,1,457,
        1,457,1,457,5,457,4964,8,457,10,457,12,457,4967,9,457,1,458,1,458,
        1,458,1,458,1,458,3,458,4974,8,458,1,459,1,459,1,460,1,460,1,460,
        5,460,4981,8,460,10,460,12,460,4984,9,460,1,461,1,461,1,462,1,462,
        1,462,1,462,1,462,1,463,1,463,1,463,1,463,1,463,1,464,1,464,1,464,
        5,464,5001,8,464,10,464,12,464,5004,9,464,1,465,1,465,1,465,1,465,
        1,465,1,465,1,465,1,465,1,465,1,465,1,465,1,465,1,465,1,465,3,465,
        5020,8,465,1,466,1,466,1,466,1,466,1,466,1,466,1,466,3,466,5029,
        8,466,1,467,1,467,1,467,5,467,5034,8,467,10,467,12,467,5037,9,467,
        1,468,1,468,1,468,3,468,5042,8,468,1,469,1,469,1,469,5,469,5047,
        8,469,10,469,12,469,5050,9,469,1,470,1,470,1,470,1,470,3,470,5056,
        8,470,1,470,1,470,1,470,1,470,1,470,1,470,1,470,3,470,5065,8,470,
        3,470,5067,8,470,1,471,1,471,1,471,1,472,1,472,3,472,5074,8,472,
        1,473,1,473,1,474,1,474,1,475,1,475,1,476,1,476,1,476,1,476,1,476,
        1,476,1,476,1,476,1,476,1,476,1,476,1,476,1,476,1,476,1,476,3,476,
        5097,8,476,1,476,1,476,3,476,5101,8,476,3,476,5103,8,476,1,477,1,
        477,1,477,1,477,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,
        1,478,1,478,1,478,1,478,3,478,5121,8,478,1,479,1,479,1,479,1,479,
        3,479,5127,8,479,1,479,1,479,1,480,1,480,1,480,5,480,5134,8,480,
        10,480,12,480,5137,9,480,1,481,1,481,1,482,1,482,1,482,1,483,1,483,
        1,483,5,483,5147,8,483,10,483,12,483,5150,9,483,1,484,1,484,1,484,
        5,484,5155,8,484,10,484,12,484,5158,9,484,1,485,1,485,1,485,1,485,
        1,486,1,486,1,487,1,487,1,488,1,488,1,488,1,488,3,488,5172,8,488,
        1,489,1,489,1,489,1,490,1,490,1,490,1,490,1,490,1,490,1,490,1,490,
        1,490,1,490,1,491,1,491,1,491,1,491,1,491,1,491,1,491,1,491,1,491,
        1,491,1,491,1,491,1,491,1,491,3,491,5201,8,491,1,491,1,491,1,491,
        3,491,5206,8,491,3,491,5208,8,491,1,492,1,492,1,492,1,492,1,492,
        1,492,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,
        1,493,1,493,3,493,5228,8,493,1,494,1,494,1,494,5,494,5233,8,494,
        10,494,12,494,5236,9,494,1,495,1,495,1,495,1,495,1,495,1,495,1,495,
        1,495,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,496,
        1,496,1,496,3,496,5258,8,496,1,497,1,497,1,497,1,497,1,497,1,497,
        1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,3,498,5275,
        8,498,1,498,1,498,1,498,3,498,5280,8,498,1,499,1,499,1,499,1,499,
        1,499,1,499,1,499,1,499,1,499,3,499,5291,8,499,1,499,1,499,1,499,
        3,499,5296,8,499,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        0,0,501,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
        346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
        378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
        410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
        442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,
        474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
        506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,
        538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,
        570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,
        602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,
        634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,
        666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,
        698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,
        730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,
        762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,
        794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,
        826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,
        858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,888,
        890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,920,
        922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,
        954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,
        986,988,990,992,994,996,998,1000,0,49,2,0,57,57,166,166,4,0,88,88,
        116,116,217,217,315,315,2,0,34,34,273,273,1,0,86,87,2,0,134,134,
        149,149,2,0,67,67,286,286,2,0,68,68,287,287,2,0,109,109,297,297,
        10,0,7,7,9,9,58,58,83,83,98,98,156,156,183,183,289,289,299,299,355,
        355,3,0,4,4,98,98,316,316,3,0,15,15,123,123,164,164,1,0,136,137,
        4,0,73,73,144,144,200,200,381,381,2,0,30,30,341,341,2,0,91,91,102,
        102,2,0,208,208,363,363,2,0,205,205,263,263,2,0,18,18,86,86,2,0,
        125,125,171,171,2,0,39,39,366,366,4,0,107,107,158,158,198,198,346,
        346,2,0,7,7,92,92,2,0,216,216,380,380,2,0,182,182,189,189,2,0,42,
        42,305,305,2,0,414,414,419,419,2,0,135,135,276,276,3,0,12,12,222,
        222,290,290,2,0,232,232,283,283,2,0,191,191,259,259,2,0,344,344,
        419,419,2,0,128,128,238,238,7,0,73,73,144,144,199,200,248,248,288,
        288,371,371,381,381,8,0,73,73,97,97,144,144,199,200,248,248,288,
        288,371,371,381,381,2,0,402,403,408,408,2,0,401,401,404,406,1,0,
        402,403,3,0,177,177,261,261,277,277,2,0,7,7,13,13,3,0,7,7,13,13,
        303,303,2,0,120,120,340,340,2,0,394,394,396,400,23,0,11,11,16,16,
        25,28,35,35,96,96,126,127,146,146,149,149,157,157,177,177,191,191,
        207,207,219,219,255,255,261,261,277,277,301,301,313,314,330,330,
        347,347,372,372,394,409,411,411,86,0,1,6,8,8,10,10,15,15,18,20,22,
        24,30,31,33,34,37,38,40,44,46,47,49,50,52,53,56,57,59,59,66,66,68,
        68,72,76,78,78,80,82,84,86,88,91,93,95,97,97,99,100,102,102,104,
        106,109,111,113,116,122,125,132,133,137,137,143,145,147,147,150,
        151,153,155,162,164,166,171,176,176,178,180,182,186,188,190,192,
        195,197,197,199,200,202,203,205,206,208,209,211,211,213,214,217,
        218,223,224,226,227,229,231,234,237,243,243,245,246,248,250,252,
        253,256,258,262,273,275,275,278,279,284,288,290,293,295,300,302,
        302,304,307,309,315,317,318,320,320,322,324,329,330,332,332,334,
        336,339,339,342,343,345,345,347,347,350,354,356,358,361,363,365,
        365,367,371,374,374,377,382,13,0,16,16,26,28,63,64,71,71,96,96,126,
        126,140,140,146,146,157,157,191,191,255,255,301,301,327,327,4,0,
        192,192,233,233,290,290,312,312,2,0,204,204,419,420,2,0,4,4,98,98,
        3,0,14,14,139,139,359,359,5673,0,1002,1,0,0,0,2,1009,1,0,0,0,4,1012,
        1,0,0,0,6,1048,1,0,0,0,8,1050,1,0,0,0,10,1052,1,0,0,0,12,1068,1,
        0,0,0,14,1072,1,0,0,0,16,1088,1,0,0,0,18,1097,1,0,0,0,20,1105,1,
        0,0,0,22,1118,1,0,0,0,24,1129,1,0,0,0,26,1134,1,0,0,0,28,1145,1,
        0,0,0,30,1149,1,0,0,0,32,1157,1,0,0,0,34,1162,1,0,0,0,36,1214,1,
        0,0,0,38,1216,1,0,0,0,40,1219,1,0,0,0,42,1221,1,0,0,0,44,1225,1,
        0,0,0,46,1227,1,0,0,0,48,1230,1,0,0,0,50,1233,1,0,0,0,52,1237,1,
        0,0,0,54,1276,1,0,0,0,56,1278,1,0,0,0,58,1281,1,0,0,0,60,1284,1,
        0,0,0,62,1288,1,0,0,0,64,1296,1,0,0,0,66,1299,1,0,0,0,68,1302,1,
        0,0,0,70,1311,1,0,0,0,72,1314,1,0,0,0,74,1329,1,0,0,0,76,1341,1,
        0,0,0,78,1346,1,0,0,0,80,1366,1,0,0,0,82,1370,1,0,0,0,84,1377,1,
        0,0,0,86,1402,1,0,0,0,88,1419,1,0,0,0,90,1421,1,0,0,0,92,1604,1,
        0,0,0,94,1614,1,0,0,0,96,1616,1,0,0,0,98,1624,1,0,0,0,100,1629,1,
        0,0,0,102,1631,1,0,0,0,104,1637,1,0,0,0,106,1641,1,0,0,0,108,1645,
        1,0,0,0,110,1649,1,0,0,0,112,1659,1,0,0,0,114,1670,1,0,0,0,116,1687,
        1,0,0,0,118,1705,1,0,0,0,120,1710,1,0,0,0,122,1713,1,0,0,0,124,1717,
        1,0,0,0,126,1724,1,0,0,0,128,1733,1,0,0,0,130,1739,1,0,0,0,132,1741,
        1,0,0,0,134,1758,1,0,0,0,136,1780,1,0,0,0,138,1782,1,0,0,0,140,1790,
        1,0,0,0,142,1797,1,0,0,0,144,1799,1,0,0,0,146,1813,1,0,0,0,148,1815,
        1,0,0,0,150,1819,1,0,0,0,152,1823,1,0,0,0,154,1827,1,0,0,0,156,1831,
        1,0,0,0,158,1844,1,0,0,0,160,1852,1,0,0,0,162,1855,1,0,0,0,164,1857,
        1,0,0,0,166,1869,1,0,0,0,168,1879,1,0,0,0,170,1882,1,0,0,0,172,1893,
        1,0,0,0,174,1901,1,0,0,0,176,1928,1,0,0,0,178,1941,1,0,0,0,180,1943,
        1,0,0,0,182,1949,1,0,0,0,184,1952,1,0,0,0,186,1958,1,0,0,0,188,1964,
        1,0,0,0,190,1971,1,0,0,0,192,2005,1,0,0,0,194,2013,1,0,0,0,196,2026,
        1,0,0,0,198,2031,1,0,0,0,200,2042,1,0,0,0,202,2059,1,0,0,0,204,2061,
        1,0,0,0,206,2066,1,0,0,0,208,2073,1,0,0,0,210,2077,1,0,0,0,212,2079,
        1,0,0,0,214,2082,1,0,0,0,216,2089,1,0,0,0,218,2103,1,0,0,0,220,2111,
        1,0,0,0,222,2119,1,0,0,0,224,2127,1,0,0,0,226,2142,1,0,0,0,228,2144,
        1,0,0,0,230,2161,1,0,0,0,232,2166,1,0,0,0,234,2180,1,0,0,0,236,2182,
        1,0,0,0,238,2185,1,0,0,0,240,2188,1,0,0,0,242,2197,1,0,0,0,244,2217,
        1,0,0,0,246,2219,1,0,0,0,248,2222,1,0,0,0,250,2242,1,0,0,0,252,2244,
        1,0,0,0,254,2248,1,0,0,0,256,2250,1,0,0,0,258,2259,1,0,0,0,260,2265,
        1,0,0,0,262,2271,1,0,0,0,264,2276,1,0,0,0,266,2322,1,0,0,0,268,2324,
        1,0,0,0,270,2327,1,0,0,0,272,2335,1,0,0,0,274,2343,1,0,0,0,276,2351,
        1,0,0,0,278,2359,1,0,0,0,280,2361,1,0,0,0,282,2374,1,0,0,0,284,2382,
        1,0,0,0,286,2391,1,0,0,0,288,2393,1,0,0,0,290,2395,1,0,0,0,292,2400,
        1,0,0,0,294,2402,1,0,0,0,296,2406,1,0,0,0,298,2412,1,0,0,0,300,2420,
        1,0,0,0,302,2422,1,0,0,0,304,2425,1,0,0,0,306,2432,1,0,0,0,308,2443,
        1,0,0,0,310,2456,1,0,0,0,312,2458,1,0,0,0,314,2466,1,0,0,0,316,2470,
        1,0,0,0,318,2478,1,0,0,0,320,2482,1,0,0,0,322,2484,1,0,0,0,324,2486,
        1,0,0,0,326,2489,1,0,0,0,328,2496,1,0,0,0,330,2504,1,0,0,0,332,2509,
        1,0,0,0,334,2511,1,0,0,0,336,2518,1,0,0,0,338,2526,1,0,0,0,340,2530,
        1,0,0,0,342,2532,1,0,0,0,344,2543,1,0,0,0,346,2547,1,0,0,0,348,2559,
        1,0,0,0,350,2567,1,0,0,0,352,2571,1,0,0,0,354,2583,1,0,0,0,356,2595,
        1,0,0,0,358,2600,1,0,0,0,360,2605,1,0,0,0,362,2607,1,0,0,0,364,2611,
        1,0,0,0,366,2615,1,0,0,0,368,2622,1,0,0,0,370,2624,1,0,0,0,372,2637,
        1,0,0,0,374,2675,1,0,0,0,376,2677,1,0,0,0,378,2682,1,0,0,0,380,2687,
        1,0,0,0,382,2694,1,0,0,0,384,2699,1,0,0,0,386,2704,1,0,0,0,388,2710,
        1,0,0,0,390,2712,1,0,0,0,392,2721,1,0,0,0,394,2733,1,0,0,0,396,2742,
        1,0,0,0,398,2752,1,0,0,0,400,2778,1,0,0,0,402,2780,1,0,0,0,404,2805,
        1,0,0,0,406,2810,1,0,0,0,408,2883,1,0,0,0,410,2885,1,0,0,0,412,2917,
        1,0,0,0,414,2919,1,0,0,0,416,2930,1,0,0,0,418,2936,1,0,0,0,420,2942,
        1,0,0,0,422,2944,1,0,0,0,424,2953,1,0,0,0,426,2963,1,0,0,0,428,2965,
        1,0,0,0,430,2979,1,0,0,0,432,2981,1,0,0,0,434,2984,1,0,0,0,436,2988,
        1,0,0,0,438,2990,1,0,0,0,440,2994,1,0,0,0,442,2998,1,0,0,0,444,3002,
        1,0,0,0,446,3009,1,0,0,0,448,3016,1,0,0,0,450,3038,1,0,0,0,452,3044,
        1,0,0,0,454,3059,1,0,0,0,456,3066,1,0,0,0,458,3074,1,0,0,0,460,3076,
        1,0,0,0,462,3083,1,0,0,0,464,3087,1,0,0,0,466,3090,1,0,0,0,468,3093,
        1,0,0,0,470,3096,1,0,0,0,472,3139,1,0,0,0,474,3155,1,0,0,0,476,3157,
        1,0,0,0,478,3168,1,0,0,0,480,3172,1,0,0,0,482,3176,1,0,0,0,484,3178,
        1,0,0,0,486,3184,1,0,0,0,488,3186,1,0,0,0,490,3191,1,0,0,0,492,3203,
        1,0,0,0,494,3208,1,0,0,0,496,3213,1,0,0,0,498,3218,1,0,0,0,500,3224,
        1,0,0,0,502,3233,1,0,0,0,504,3238,1,0,0,0,506,3243,1,0,0,0,508,3247,
        1,0,0,0,510,3267,1,0,0,0,512,3280,1,0,0,0,514,3288,1,0,0,0,516,3290,
        1,0,0,0,518,3299,1,0,0,0,520,3303,1,0,0,0,522,3310,1,0,0,0,524,3317,
        1,0,0,0,526,3324,1,0,0,0,528,3327,1,0,0,0,530,3356,1,0,0,0,532,3367,
        1,0,0,0,534,3384,1,0,0,0,536,3386,1,0,0,0,538,3390,1,0,0,0,540,3397,
        1,0,0,0,542,3399,1,0,0,0,544,3404,1,0,0,0,546,3408,1,0,0,0,548,3416,
        1,0,0,0,550,3420,1,0,0,0,552,3430,1,0,0,0,554,3432,1,0,0,0,556,3438,
        1,0,0,0,558,3442,1,0,0,0,560,3455,1,0,0,0,562,3457,1,0,0,0,564,3461,
        1,0,0,0,566,3464,1,0,0,0,568,3467,1,0,0,0,570,3484,1,0,0,0,572,3488,
        1,0,0,0,574,3495,1,0,0,0,576,3522,1,0,0,0,578,3527,1,0,0,0,580,3529,
        1,0,0,0,582,3534,1,0,0,0,584,3539,1,0,0,0,586,3553,1,0,0,0,588,3684,
        1,0,0,0,590,3686,1,0,0,0,592,3702,1,0,0,0,594,3705,1,0,0,0,596,3708,
        1,0,0,0,598,3711,1,0,0,0,600,3715,1,0,0,0,602,3727,1,0,0,0,604,3729,
        1,0,0,0,606,3731,1,0,0,0,608,3733,1,0,0,0,610,3741,1,0,0,0,612,3749,
        1,0,0,0,614,3761,1,0,0,0,616,3795,1,0,0,0,618,3797,1,0,0,0,620,3815,
        1,0,0,0,622,3824,1,0,0,0,624,3829,1,0,0,0,626,3833,1,0,0,0,628,3849,
        1,0,0,0,630,3908,1,0,0,0,632,3910,1,0,0,0,634,3912,1,0,0,0,636,3932,
        1,0,0,0,638,3943,1,0,0,0,640,3945,1,0,0,0,642,3961,1,0,0,0,644,3973,
        1,0,0,0,646,3991,1,0,0,0,648,3996,1,0,0,0,650,4000,1,0,0,0,652,4019,
        1,0,0,0,654,4024,1,0,0,0,656,4026,1,0,0,0,658,4054,1,0,0,0,660,4057,
        1,0,0,0,662,4059,1,0,0,0,664,4061,1,0,0,0,666,4080,1,0,0,0,668,4082,
        1,0,0,0,670,4084,1,0,0,0,672,4088,1,0,0,0,674,4122,1,0,0,0,676,4124,
        1,0,0,0,678,4126,1,0,0,0,680,4134,1,0,0,0,682,4178,1,0,0,0,684,4180,
        1,0,0,0,686,4205,1,0,0,0,688,4207,1,0,0,0,690,4215,1,0,0,0,692,4224,
        1,0,0,0,694,4240,1,0,0,0,696,4244,1,0,0,0,698,4246,1,0,0,0,700,4255,
        1,0,0,0,702,4270,1,0,0,0,704,4276,1,0,0,0,706,4278,1,0,0,0,708,4285,
        1,0,0,0,710,4287,1,0,0,0,712,4292,1,0,0,0,714,4305,1,0,0,0,716,4329,
        1,0,0,0,718,4331,1,0,0,0,720,4344,1,0,0,0,722,4346,1,0,0,0,724,4349,
        1,0,0,0,726,4352,1,0,0,0,728,4354,1,0,0,0,730,4358,1,0,0,0,732,4364,
        1,0,0,0,734,4370,1,0,0,0,736,4372,1,0,0,0,738,4386,1,0,0,0,740,4395,
        1,0,0,0,742,4397,1,0,0,0,744,4408,1,0,0,0,746,4416,1,0,0,0,748,4426,
        1,0,0,0,750,4430,1,0,0,0,752,4434,1,0,0,0,754,4438,1,0,0,0,756,4444,
        1,0,0,0,758,4498,1,0,0,0,760,4504,1,0,0,0,762,4508,1,0,0,0,764,4510,
        1,0,0,0,766,4521,1,0,0,0,768,4538,1,0,0,0,770,4554,1,0,0,0,772,4563,
        1,0,0,0,774,4565,1,0,0,0,776,4572,1,0,0,0,778,4587,1,0,0,0,780,4589,
        1,0,0,0,782,4591,1,0,0,0,784,4593,1,0,0,0,786,4599,1,0,0,0,788,4605,
        1,0,0,0,790,4610,1,0,0,0,792,4612,1,0,0,0,794,4615,1,0,0,0,796,4617,
        1,0,0,0,798,4635,1,0,0,0,800,4649,1,0,0,0,802,4651,1,0,0,0,804,4664,
        1,0,0,0,806,4666,1,0,0,0,808,4678,1,0,0,0,810,4683,1,0,0,0,812,4688,
        1,0,0,0,814,4690,1,0,0,0,816,4699,1,0,0,0,818,4701,1,0,0,0,820,4710,
        1,0,0,0,822,4712,1,0,0,0,824,4721,1,0,0,0,826,4723,1,0,0,0,828,4732,
        1,0,0,0,830,4734,1,0,0,0,832,4743,1,0,0,0,834,4745,1,0,0,0,836,4754,
        1,0,0,0,838,4761,1,0,0,0,840,4763,1,0,0,0,842,4770,1,0,0,0,844,4772,
        1,0,0,0,846,4782,1,0,0,0,848,4795,1,0,0,0,850,4797,1,0,0,0,852,4801,
        1,0,0,0,854,4805,1,0,0,0,856,4811,1,0,0,0,858,4813,1,0,0,0,860,4824,
        1,0,0,0,862,4826,1,0,0,0,864,4850,1,0,0,0,866,4852,1,0,0,0,868,4857,
        1,0,0,0,870,4862,1,0,0,0,872,4867,1,0,0,0,874,4869,1,0,0,0,876,4878,
        1,0,0,0,878,4880,1,0,0,0,880,4889,1,0,0,0,882,4891,1,0,0,0,884,4893,
        1,0,0,0,886,4897,1,0,0,0,888,4909,1,0,0,0,890,4914,1,0,0,0,892,4925,
        1,0,0,0,894,4931,1,0,0,0,896,4933,1,0,0,0,898,4935,1,0,0,0,900,4940,
        1,0,0,0,902,4944,1,0,0,0,904,4946,1,0,0,0,906,4951,1,0,0,0,908,4953,
        1,0,0,0,910,4955,1,0,0,0,912,4957,1,0,0,0,914,4960,1,0,0,0,916,4968,
        1,0,0,0,918,4975,1,0,0,0,920,4977,1,0,0,0,922,4985,1,0,0,0,924,4987,
        1,0,0,0,926,4992,1,0,0,0,928,4997,1,0,0,0,930,5019,1,0,0,0,932,5028,
        1,0,0,0,934,5030,1,0,0,0,936,5041,1,0,0,0,938,5043,1,0,0,0,940,5051,
        1,0,0,0,942,5068,1,0,0,0,944,5071,1,0,0,0,946,5075,1,0,0,0,948,5077,
        1,0,0,0,950,5079,1,0,0,0,952,5081,1,0,0,0,954,5104,1,0,0,0,956,5108,
        1,0,0,0,958,5122,1,0,0,0,960,5130,1,0,0,0,962,5138,1,0,0,0,964,5140,
        1,0,0,0,966,5143,1,0,0,0,968,5151,1,0,0,0,970,5159,1,0,0,0,972,5163,
        1,0,0,0,974,5165,1,0,0,0,976,5171,1,0,0,0,978,5173,1,0,0,0,980,5176,
        1,0,0,0,982,5186,1,0,0,0,984,5209,1,0,0,0,986,5227,1,0,0,0,988,5229,
        1,0,0,0,990,5237,1,0,0,0,992,5245,1,0,0,0,994,5259,1,0,0,0,996,5265,
        1,0,0,0,998,5281,1,0,0,0,1000,5297,1,0,0,0,1002,1003,3,2,1,0,1003,
        1004,5,0,0,1,1004,1,1,0,0,0,1005,1008,3,4,2,0,1006,1008,3,12,6,0,
        1007,1005,1,0,0,0,1007,1006,1,0,0,0,1008,1011,1,0,0,0,1009,1007,
        1,0,0,0,1009,1010,1,0,0,0,1010,3,1,0,0,0,1011,1009,1,0,0,0,1012,
        1022,5,114,0,0,1013,1015,3,6,3,0,1014,1013,1,0,0,0,1015,1018,1,0,
        0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,1019,1,0,0,0,1018,1016,
        1,0,0,0,1019,1023,3,12,6,0,1020,1021,5,275,0,0,1021,1023,3,386,193,
        0,1022,1016,1,0,0,0,1022,1020,1,0,0,0,1023,1024,1,0,0,0,1024,1025,
        5,386,0,0,1025,5,1,0,0,0,1026,1049,5,117,0,0,1027,1049,5,133,0,0,
        1028,1049,5,85,0,0,1029,1031,5,37,0,0,1030,1032,7,0,0,0,1031,1030,
        1,0,0,0,1031,1032,1,0,0,0,1032,1049,1,0,0,0,1033,1049,5,185,0,0,
        1034,1049,5,21,0,0,1035,1049,5,10,0,0,1036,1049,5,266,0,0,1037,1049,
        5,184,0,0,1038,1049,5,19,0,0,1039,1041,5,367,0,0,1040,1042,3,8,4,
        0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,1044,1,0,0,0,1043,1045,
        3,10,5,0,1044,1043,1,0,0,0,1044,1045,1,0,0,0,1045,1049,1,0,0,0,1046,
        1049,5,78,0,0,1047,1049,5,77,0,0,1048,1026,1,0,0,0,1048,1027,1,0,
        0,0,1048,1028,1,0,0,0,1048,1029,1,0,0,0,1048,1033,1,0,0,0,1048,1034,
        1,0,0,0,1048,1035,1,0,0,0,1048,1036,1,0,0,0,1048,1037,1,0,0,0,1048,
        1038,1,0,0,0,1048,1039,1,0,0,0,1048,1046,1,0,0,0,1048,1047,1,0,0,
        0,1049,7,1,0,0,0,1050,1051,5,216,0,0,1051,9,1,0,0,0,1052,1053,7,
        1,0,0,1053,11,1,0,0,0,1054,1069,3,386,193,0,1055,1069,3,14,7,0,1056,
        1069,3,18,9,0,1057,1069,3,20,10,0,1058,1069,3,22,11,0,1059,1069,
        3,26,13,0,1060,1069,3,34,17,0,1061,1069,3,36,18,0,1062,1069,3,416,
        208,0,1063,1069,3,424,212,0,1064,1069,3,426,213,0,1065,1069,3,448,
        224,0,1066,1069,3,924,462,0,1067,1069,3,926,463,0,1068,1054,1,0,
        0,0,1068,1055,1,0,0,0,1068,1056,1,0,0,0,1068,1057,1,0,0,0,1068,1058,
        1,0,0,0,1068,1059,1,0,0,0,1068,1060,1,0,0,0,1068,1061,1,0,0,0,1068,
        1062,1,0,0,0,1068,1063,1,0,0,0,1068,1064,1,0,0,0,1068,1065,1,0,0,
        0,1068,1066,1,0,0,0,1068,1067,1,0,0,0,1069,1070,1,0,0,0,1070,1071,
        5,386,0,0,1071,13,1,0,0,0,1072,1073,5,180,0,0,1073,1075,5,66,0,0,
        1074,1076,5,181,0,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,1077,
        1,0,0,0,1077,1078,5,153,0,0,1078,1080,5,414,0,0,1079,1081,5,226,
        0,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,1083,
        5,160,0,0,1083,1084,5,319,0,0,1084,1086,3,884,442,0,1085,1087,3,
        76,38,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,15,1,0,0,0,1088,
        1090,5,129,0,0,1089,1091,5,197,0,0,1090,1089,1,0,0,0,1090,1091,1,
        0,0,0,1091,1092,1,0,0,0,1092,1093,5,270,0,0,1093,1094,5,387,0,0,
        1094,1095,5,414,0,0,1095,1096,5,388,0,0,1096,17,1,0,0,0,1097,1098,
        5,115,0,0,1098,1099,5,319,0,0,1099,1100,3,884,442,0,1100,1101,5,
        331,0,0,1101,1103,5,414,0,0,1102,1104,3,16,8,0,1103,1102,1,0,0,0,
        1103,1104,1,0,0,0,1104,19,1,0,0,0,1105,1111,5,148,0,0,1106,1108,
        5,118,0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,
        1109,1110,5,319,0,0,1110,1112,3,884,442,0,1111,1107,1,0,0,0,1111,
        1112,1,0,0,0,1112,1113,1,0,0,0,1113,1114,5,134,0,0,1114,1116,5,414,
        0,0,1115,1117,3,268,134,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,
        21,1,0,0,0,1118,1119,5,268,0,0,1119,1120,5,99,0,0,1120,1123,3,24,
        12,0,1121,1122,5,269,0,0,1122,1124,3,24,12,0,1123,1121,1,0,0,0,1123,
        1124,1,0,0,0,1124,1127,1,0,0,0,1125,1126,5,376,0,0,1126,1128,3,28,
        14,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,23,1,0,0,0,1129,1132,
        3,902,451,0,1130,1131,5,383,0,0,1131,1133,3,32,16,0,1132,1130,1,
        0,0,0,1132,1133,1,0,0,0,1133,25,1,0,0,0,1134,1135,5,268,0,0,1135,
        1136,5,180,0,0,1136,1139,3,24,12,0,1137,1138,5,160,0,0,1138,1140,
        3,902,451,0,1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,1143,1,0,0,
        0,1141,1142,5,376,0,0,1142,1144,3,28,14,0,1143,1141,1,0,0,0,1143,
        1144,1,0,0,0,1144,27,1,0,0,0,1145,1146,5,387,0,0,1146,1147,3,30,
        15,0,1147,1148,5,388,0,0,1148,29,1,0,0,0,1149,1154,3,252,126,0,1150,
        1151,5,385,0,0,1151,1153,3,252,126,0,1152,1150,1,0,0,0,1153,1156,
        1,0,0,0,1154,1152,1,0,0,0,1154,1155,1,0,0,0,1155,31,1,0,0,0,1156,
        1154,1,0,0,0,1157,1160,5,414,0,0,1158,1159,5,383,0,0,1159,1161,5,
        414,0,0,1160,1158,1,0,0,0,1160,1161,1,0,0,0,1161,33,1,0,0,0,1162,
        1163,5,268,0,0,1163,1164,5,310,0,0,1164,1167,3,902,451,0,1165,1166,
        5,376,0,0,1166,1168,3,28,14,0,1167,1165,1,0,0,0,1167,1168,1,0,0,
        0,1168,35,1,0,0,0,1169,1215,3,54,27,0,1170,1215,3,66,33,0,1171,1215,
        3,68,34,0,1172,1215,3,588,294,0,1173,1215,3,74,37,0,1174,1215,3,
        72,36,0,1175,1215,3,470,235,0,1176,1215,3,84,42,0,1177,1215,3,92,
        46,0,1178,1215,3,156,78,0,1179,1215,3,174,87,0,1180,1215,3,190,95,
        0,1181,1215,3,194,97,0,1182,1215,3,198,99,0,1183,1215,3,196,98,0,
        1184,1215,3,188,94,0,1185,1215,3,192,96,0,1186,1215,3,164,82,0,1187,
        1215,3,170,85,0,1188,1215,3,166,83,0,1189,1215,3,168,84,0,1190,1215,
        3,172,86,0,1191,1215,3,86,43,0,1192,1215,3,96,48,0,1193,1215,3,102,
        51,0,1194,1215,3,98,49,0,1195,1215,3,104,52,0,1196,1215,3,106,53,
        0,1197,1215,3,108,54,0,1198,1215,3,110,55,0,1199,1215,3,112,56,0,
        1200,1215,3,126,63,0,1201,1215,3,118,59,0,1202,1215,3,128,64,0,1203,
        1215,3,120,60,0,1204,1215,3,114,57,0,1205,1215,3,116,58,0,1206,1215,
        3,124,62,0,1207,1215,3,122,61,0,1208,1215,3,444,222,0,1209,1215,
        3,446,223,0,1210,1215,3,460,230,0,1211,1215,3,930,465,0,1212,1215,
        3,590,295,0,1213,1215,3,600,300,0,1214,1169,1,0,0,0,1214,1170,1,
        0,0,0,1214,1171,1,0,0,0,1214,1172,1,0,0,0,1214,1173,1,0,0,0,1214,
        1174,1,0,0,0,1214,1175,1,0,0,0,1214,1176,1,0,0,0,1214,1177,1,0,0,
        0,1214,1178,1,0,0,0,1214,1179,1,0,0,0,1214,1180,1,0,0,0,1214,1181,
        1,0,0,0,1214,1182,1,0,0,0,1214,1183,1,0,0,0,1214,1184,1,0,0,0,1214,
        1185,1,0,0,0,1214,1186,1,0,0,0,1214,1187,1,0,0,0,1214,1188,1,0,0,
        0,1214,1189,1,0,0,0,1214,1190,1,0,0,0,1214,1191,1,0,0,0,1214,1192,
        1,0,0,0,1214,1193,1,0,0,0,1214,1194,1,0,0,0,1214,1195,1,0,0,0,1214,
        1196,1,0,0,0,1214,1197,1,0,0,0,1214,1198,1,0,0,0,1214,1199,1,0,0,
        0,1214,1200,1,0,0,0,1214,1201,1,0,0,0,1214,1202,1,0,0,0,1214,1203,
        1,0,0,0,1214,1204,1,0,0,0,1214,1205,1,0,0,0,1214,1206,1,0,0,0,1214,
        1207,1,0,0,0,1214,1208,1,0,0,0,1214,1209,1,0,0,0,1214,1210,1,0,0,
        0,1214,1211,1,0,0,0,1214,1212,1,0,0,0,1214,1213,1,0,0,0,1215,37,
        1,0,0,0,1216,1217,5,146,0,0,1217,1218,5,112,0,0,1218,39,1,0,0,0,
        1219,1220,7,2,0,0,1220,41,1,0,0,0,1221,1222,5,146,0,0,1222,1223,
        5,207,0,0,1223,1224,5,112,0,0,1224,43,1,0,0,0,1225,1226,5,130,0,
        0,1226,45,1,0,0,0,1227,1228,5,102,0,0,1228,1229,5,275,0,0,1229,47,
        1,0,0,0,1230,1231,5,91,0,0,1231,1232,5,275,0,0,1232,49,1,0,0,0,1233,
        1234,5,311,0,0,1234,1235,5,17,0,0,1235,1236,5,89,0,0,1236,51,1,0,
        0,0,1237,1238,5,219,0,0,1238,1239,5,269,0,0,1239,53,1,0,0,0,1240,
        1241,5,58,0,0,1241,1243,3,90,45,0,1242,1244,3,42,21,0,1243,1242,
        1,0,0,0,1243,1244,1,0,0,0,1244,1245,1,0,0,0,1245,1247,3,902,451,
        0,1246,1248,3,70,35,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1250,
        1,0,0,0,1249,1251,3,56,28,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,
        1251,1253,1,0,0,0,1252,1254,3,58,29,0,1253,1252,1,0,0,0,1253,1254,
        1,0,0,0,1254,1258,1,0,0,0,1255,1256,5,376,0,0,1256,1257,5,75,0,0,
        1257,1259,3,60,30,0,1258,1255,1,0,0,0,1258,1259,1,0,0,0,1259,1277,
        1,0,0,0,1260,1261,5,58,0,0,1261,1262,5,264,0,0,1262,1264,3,90,45,
        0,1263,1265,3,42,21,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,1266,
        1,0,0,0,1266,1268,3,902,451,0,1267,1269,3,70,35,0,1268,1267,1,0,
        0,0,1268,1269,1,0,0,0,1269,1270,1,0,0,0,1270,1274,3,64,32,0,1271,
        1272,5,376,0,0,1272,1273,5,75,0,0,1273,1275,3,60,30,0,1274,1271,
        1,0,0,0,1274,1275,1,0,0,0,1275,1277,1,0,0,0,1276,1240,1,0,0,0,1276,
        1260,1,0,0,0,1277,55,1,0,0,0,1278,1279,5,182,0,0,1279,1280,5,414,
        0,0,1280,57,1,0,0,0,1281,1282,5,189,0,0,1282,1283,5,414,0,0,1283,
        59,1,0,0,0,1284,1285,5,387,0,0,1285,1286,3,62,31,0,1286,1287,5,388,
        0,0,1287,61,1,0,0,0,1288,1293,3,252,126,0,1289,1290,5,385,0,0,1290,
        1292,3,252,126,0,1291,1289,1,0,0,0,1292,1295,1,0,0,0,1293,1291,1,
        0,0,0,1293,1294,1,0,0,0,1294,63,1,0,0,0,1295,1293,1,0,0,0,1296,1297,
        5,360,0,0,1297,1298,3,902,451,0,1298,65,1,0,0,0,1299,1300,5,358,
        0,0,1300,1301,3,902,451,0,1301,67,1,0,0,0,1302,1303,5,98,0,0,1303,
        1305,3,90,45,0,1304,1306,3,38,19,0,1305,1304,1,0,0,0,1305,1306,1,
        0,0,0,1306,1307,1,0,0,0,1307,1309,3,902,451,0,1308,1310,3,40,20,
        0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,69,1,0,0,0,1311,1312,
        5,47,0,0,1312,1313,5,414,0,0,1313,71,1,0,0,0,1314,1316,5,341,0,0,
        1315,1317,5,319,0,0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,1318,
        1,0,0,0,1318,1324,3,536,268,0,1319,1320,5,46,0,0,1320,1321,5,387,
        0,0,1321,1322,3,276,138,0,1322,1323,5,388,0,0,1323,1325,1,0,0,0,
        1324,1319,1,0,0,0,1324,1325,1,0,0,0,1325,1327,1,0,0,0,1326,1328,
        3,44,22,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,73,1,0,0,0,1329,
        1330,5,98,0,0,1330,1332,5,319,0,0,1331,1333,3,38,19,0,1332,1331,
        1,0,0,0,1332,1333,1,0,0,0,1333,1334,1,0,0,0,1334,1336,3,646,323,
        0,1335,1337,5,246,0,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,1339,
        1,0,0,0,1338,1340,3,16,8,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,
        75,1,0,0,0,1341,1342,5,155,0,0,1342,1343,5,414,0,0,1343,1344,5,291,
        0,0,1344,1345,5,414,0,0,1345,77,1,0,0,0,1346,1349,3,902,451,0,1347,
        1348,5,383,0,0,1348,1350,3,902,451,0,1349,1347,1,0,0,0,1349,1350,
        1,0,0,0,1350,1364,1,0,0,0,1351,1361,3,902,451,0,1352,1357,5,383,
        0,0,1353,1358,5,100,0,0,1354,1358,5,169,0,0,1355,1358,5,365,0,0,
        1356,1358,3,902,451,0,1357,1353,1,0,0,0,1357,1354,1,0,0,0,1357,1355,
        1,0,0,0,1357,1356,1,0,0,0,1358,1360,1,0,0,0,1359,1352,1,0,0,0,1360,
        1363,1,0,0,0,1361,1359,1,0,0,0,1361,1362,1,0,0,0,1362,1365,1,0,0,
        0,1363,1361,1,0,0,0,1364,1351,1,0,0,0,1364,1365,1,0,0,0,1365,79,
        1,0,0,0,1366,1368,3,78,39,0,1367,1369,3,886,443,0,1368,1367,1,0,
        0,0,1368,1369,1,0,0,0,1369,81,1,0,0,0,1370,1372,3,646,323,0,1371,
        1373,3,886,443,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,1375,1,
        0,0,0,1374,1376,3,280,140,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,
        1376,83,1,0,0,0,1377,1400,7,3,0,0,1378,1380,3,90,45,0,1379,1381,
        5,117,0,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,
        1382,1383,3,902,451,0,1383,1401,1,0,0,0,1384,1386,5,69,0,0,1385,
        1387,5,117,0,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1388,1,0,
        0,0,1388,1401,3,902,451,0,1389,1391,5,136,0,0,1390,1392,5,117,0,
        0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,0,0,1393,1401,
        3,900,450,0,1394,1397,5,133,0,0,1395,1397,5,117,0,0,1396,1394,1,
        0,0,0,1396,1395,1,0,0,0,1397,1398,1,0,0,0,1398,1401,3,82,41,0,1399,
        1401,3,82,41,0,1400,1378,1,0,0,0,1400,1384,1,0,0,0,1400,1389,1,0,
        0,0,1400,1396,1,0,0,0,1400,1399,1,0,0,0,1401,85,1,0,0,0,1402,1403,
        5,10,0,0,1403,1404,5,319,0,0,1404,1417,3,884,442,0,1405,1406,5,52,
        0,0,1406,1413,5,309,0,0,1407,1414,5,206,0,0,1408,1409,5,129,0,0,
        1409,1411,5,46,0,0,1410,1412,3,276,138,0,1411,1410,1,0,0,0,1411,
        1412,1,0,0,0,1412,1414,1,0,0,0,1413,1407,1,0,0,0,1413,1408,1,0,0,
        0,1413,1414,1,0,0,0,1414,1418,1,0,0,0,1415,1416,5,33,0,0,1416,1418,
        5,197,0,0,1417,1405,1,0,0,0,1417,1415,1,0,0,0,1418,87,1,0,0,0,1419,
        1420,7,4,0,0,1420,89,1,0,0,0,1421,1422,7,5,0,0,1422,91,1,0,0,0,1423,
        1424,5,298,0,0,1424,1427,7,6,0,0,1425,1426,5,177,0,0,1426,1428,3,
        210,105,0,1427,1425,1,0,0,0,1427,1428,1,0,0,0,1428,1605,1,0,0,0,
        1429,1431,5,298,0,0,1430,1432,5,117,0,0,1431,1430,1,0,0,0,1431,1432,
        1,0,0,0,1432,1433,1,0,0,0,1433,1437,5,320,0,0,1434,1435,3,88,44,
        0,1435,1436,3,902,451,0,1436,1438,1,0,0,0,1437,1434,1,0,0,0,1437,
        1438,1,0,0,0,1438,1440,1,0,0,0,1439,1441,3,94,47,0,1440,1439,1,0,
        0,0,1440,1441,1,0,0,0,1441,1605,1,0,0,0,1442,1443,5,298,0,0,1443,
        1447,5,369,0,0,1444,1445,3,88,44,0,1445,1446,3,902,451,0,1446,1448,
        1,0,0,0,1447,1444,1,0,0,0,1447,1448,1,0,0,0,1448,1452,1,0,0,0,1449,
        1450,5,177,0,0,1450,1453,3,210,105,0,1451,1453,3,210,105,0,1452,
        1449,1,0,0,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1605,1,0,0,
        0,1454,1455,5,298,0,0,1455,1456,5,195,0,0,1456,1460,5,369,0,0,1457,
        1458,3,88,44,0,1458,1459,3,902,451,0,1459,1461,1,0,0,0,1460,1457,
        1,0,0,0,1460,1461,1,0,0,0,1461,1465,1,0,0,0,1462,1463,5,177,0,0,
        1463,1466,3,210,105,0,1464,1466,3,210,105,0,1465,1462,1,0,0,0,1465,
        1464,1,0,0,0,1465,1466,1,0,0,0,1466,1605,1,0,0,0,1467,1469,5,298,
        0,0,1468,1470,5,305,0,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,
        1471,1,0,0,0,1471,1472,5,46,0,0,1472,1473,3,88,44,0,1473,1477,3,
        646,323,0,1474,1475,3,88,44,0,1475,1476,3,902,451,0,1476,1478,1,
        0,0,0,1477,1474,1,0,0,0,1477,1478,1,0,0,0,1478,1482,1,0,0,0,1479,
        1480,5,177,0,0,1480,1483,3,210,105,0,1481,1483,3,210,105,0,1482,
        1479,1,0,0,0,1482,1481,1,0,0,0,1482,1483,1,0,0,0,1483,1605,1,0,0,
        0,1484,1485,5,298,0,0,1485,1488,5,137,0,0,1486,1487,5,177,0,0,1487,
        1489,3,208,104,0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,1605,1,
        0,0,0,1490,1491,5,298,0,0,1491,1492,5,230,0,0,1492,1494,3,646,323,
        0,1493,1495,3,886,443,0,1494,1493,1,0,0,0,1494,1495,1,0,0,0,1495,
        1497,1,0,0,0,1496,1498,3,658,329,0,1497,1496,1,0,0,0,1497,1498,1,
        0,0,0,1498,1500,1,0,0,0,1499,1501,3,746,373,0,1500,1499,1,0,0,0,
        1500,1501,1,0,0,0,1501,1503,1,0,0,0,1502,1504,3,414,207,0,1503,1502,
        1,0,0,0,1503,1504,1,0,0,0,1504,1605,1,0,0,0,1505,1506,5,298,0,0,
        1506,1512,5,58,0,0,1507,1508,3,90,45,0,1508,1509,3,902,451,0,1509,
        1513,1,0,0,0,1510,1511,5,319,0,0,1511,1513,3,646,323,0,1512,1507,
        1,0,0,0,1512,1510,1,0,0,0,1513,1605,1,0,0,0,1514,1515,5,298,0,0,
        1515,1516,5,319,0,0,1516,1520,5,117,0,0,1517,1518,3,88,44,0,1518,
        1519,3,902,451,0,1519,1521,1,0,0,0,1520,1517,1,0,0,0,1520,1521,1,
        0,0,0,1521,1522,1,0,0,0,1522,1523,5,177,0,0,1523,1525,3,210,105,
        0,1524,1526,3,886,443,0,1525,1524,1,0,0,0,1525,1526,1,0,0,0,1526,
        1605,1,0,0,0,1527,1528,5,298,0,0,1528,1529,5,322,0,0,1529,1533,3,
        646,323,0,1530,1531,5,387,0,0,1531,1532,5,414,0,0,1532,1534,5,388,
        0,0,1533,1530,1,0,0,0,1533,1534,1,0,0,0,1534,1605,1,0,0,0,1535,1536,
        5,298,0,0,1536,1548,5,184,0,0,1537,1538,3,90,45,0,1538,1540,3,902,
        451,0,1539,1541,5,117,0,0,1540,1539,1,0,0,0,1540,1541,1,0,0,0,1541,
        1549,1,0,0,0,1542,1544,3,80,40,0,1543,1542,1,0,0,0,1543,1544,1,0,
        0,0,1544,1546,1,0,0,0,1545,1547,5,117,0,0,1546,1545,1,0,0,0,1546,
        1547,1,0,0,0,1547,1549,1,0,0,0,1548,1537,1,0,0,0,1548,1543,1,0,0,
        0,1549,1605,1,0,0,0,1550,1551,5,298,0,0,1551,1588,5,50,0,0,1552,
        1589,3,462,231,0,1553,1554,3,90,45,0,1554,1556,3,902,451,0,1555,
        1557,3,464,232,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1559,1,
        0,0,0,1558,1560,3,466,233,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,
        1560,1562,1,0,0,0,1561,1563,3,468,234,0,1562,1561,1,0,0,0,1562,1563,
        1,0,0,0,1563,1565,1,0,0,0,1564,1566,3,746,373,0,1565,1564,1,0,0,
        0,1565,1566,1,0,0,0,1566,1568,1,0,0,0,1567,1569,3,414,207,0,1568,
        1567,1,0,0,0,1568,1569,1,0,0,0,1569,1589,1,0,0,0,1570,1572,3,80,
        40,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1574,1,0,0,0,1573,
        1575,3,464,232,0,1574,1573,1,0,0,0,1574,1575,1,0,0,0,1575,1577,1,
        0,0,0,1576,1578,3,466,233,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,
        1578,1580,1,0,0,0,1579,1581,3,468,234,0,1580,1579,1,0,0,0,1580,1581,
        1,0,0,0,1581,1583,1,0,0,0,1582,1584,3,746,373,0,1583,1582,1,0,0,
        0,1583,1584,1,0,0,0,1584,1586,1,0,0,0,1585,1587,3,414,207,0,1586,
        1585,1,0,0,0,1586,1587,1,0,0,0,1587,1589,1,0,0,0,1588,1552,1,0,0,
        0,1588,1553,1,0,0,0,1588,1571,1,0,0,0,1589,1605,1,0,0,0,1590,1591,
        5,298,0,0,1591,1605,5,336,0,0,1592,1593,5,298,0,0,1593,1594,5,54,
        0,0,1594,1605,5,414,0,0,1595,1596,5,298,0,0,1596,1600,5,271,0,0,
        1597,1598,5,234,0,0,1598,1601,3,902,451,0,1599,1601,5,235,0,0,1600,
        1597,1,0,0,0,1600,1599,1,0,0,0,1601,1605,1,0,0,0,1602,1603,5,298,
        0,0,1603,1605,5,70,0,0,1604,1423,1,0,0,0,1604,1429,1,0,0,0,1604,
        1442,1,0,0,0,1604,1454,1,0,0,0,1604,1467,1,0,0,0,1604,1484,1,0,0,
        0,1604,1490,1,0,0,0,1604,1505,1,0,0,0,1604,1514,1,0,0,0,1604,1527,
        1,0,0,0,1604,1535,1,0,0,0,1604,1550,1,0,0,0,1604,1590,1,0,0,0,1604,
        1592,1,0,0,0,1604,1595,1,0,0,0,1604,1602,1,0,0,0,1605,93,1,0,0,0,
        1606,1607,5,373,0,0,1607,1608,3,902,451,0,1608,1609,5,394,0,0,1609,
        1610,5,414,0,0,1610,1615,1,0,0,0,1611,1612,5,177,0,0,1612,1615,3,
        210,105,0,1613,1615,3,210,105,0,1614,1606,1,0,0,0,1614,1611,1,0,
        0,0,1614,1613,1,0,0,0,1615,95,1,0,0,0,1616,1617,5,183,0,0,1617,1618,
        5,319,0,0,1618,1620,3,646,323,0,1619,1621,3,886,443,0,1620,1619,
        1,0,0,0,1620,1621,1,0,0,0,1621,1622,1,0,0,0,1622,1623,3,100,50,0,
        1623,97,1,0,0,0,1624,1625,5,183,0,0,1625,1626,3,90,45,0,1626,1627,
        3,902,451,0,1627,1628,3,100,50,0,1628,99,1,0,0,0,1629,1630,7,7,0,
        0,1630,101,1,0,0,0,1631,1632,5,351,0,0,1632,1633,5,319,0,0,1633,
        1635,3,646,323,0,1634,1636,3,886,443,0,1635,1634,1,0,0,0,1635,1636,
        1,0,0,0,1636,103,1,0,0,0,1637,1638,5,351,0,0,1638,1639,3,90,45,0,
        1639,1640,3,902,451,0,1640,105,1,0,0,0,1641,1642,5,58,0,0,1642,1643,
        5,278,0,0,1643,1644,3,902,451,0,1644,107,1,0,0,0,1645,1646,5,98,
        0,0,1646,1647,5,278,0,0,1647,1648,3,902,451,0,1648,109,1,0,0,0,1649,
        1650,5,138,0,0,1650,1652,3,138,69,0,1651,1653,3,132,66,0,1652,1651,
        1,0,0,0,1652,1653,1,0,0,0,1653,1654,1,0,0,0,1654,1655,5,331,0,0,
        1655,1657,3,144,72,0,1656,1658,3,148,74,0,1657,1656,1,0,0,0,1657,
        1658,1,0,0,0,1658,111,1,0,0,0,1659,1661,5,274,0,0,1660,1662,3,150,
        75,0,1661,1660,1,0,0,0,1661,1662,1,0,0,0,1662,1663,1,0,0,0,1663,
        1665,3,138,69,0,1664,1666,3,132,66,0,1665,1664,1,0,0,0,1665,1666,
        1,0,0,0,1666,1667,1,0,0,0,1667,1668,5,134,0,0,1668,1669,3,144,72,
        0,1669,113,1,0,0,0,1670,1672,5,138,0,0,1671,1673,5,278,0,0,1672,
        1671,1,0,0,0,1672,1673,1,0,0,0,1673,1674,1,0,0,0,1674,1679,3,902,
        451,0,1675,1676,5,385,0,0,1676,1678,3,902,451,0,1677,1675,1,0,0,
        0,1678,1681,1,0,0,0,1679,1677,1,0,0,0,1679,1680,1,0,0,0,1680,1682,
        1,0,0,0,1681,1679,1,0,0,0,1682,1683,5,331,0,0,1683,1685,3,144,72,
        0,1684,1686,3,154,77,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,
        115,1,0,0,0,1687,1689,5,274,0,0,1688,1690,3,152,76,0,1689,1688,1,
        0,0,0,1689,1690,1,0,0,0,1690,1692,1,0,0,0,1691,1693,5,278,0,0,1692,
        1691,1,0,0,0,1692,1693,1,0,0,0,1693,1694,1,0,0,0,1694,1699,3,902,
        451,0,1695,1696,5,385,0,0,1696,1698,3,902,451,0,1697,1695,1,0,0,
        0,1698,1701,1,0,0,0,1699,1697,1,0,0,0,1699,1700,1,0,0,0,1700,1702,
        1,0,0,0,1701,1699,1,0,0,0,1702,1703,5,134,0,0,1703,1704,3,144,72,
        0,1704,117,1,0,0,0,1705,1706,5,298,0,0,1706,1707,5,278,0,0,1707,
        1708,5,138,0,0,1708,1709,3,146,73,0,1709,119,1,0,0,0,1710,1711,5,
        298,0,0,1711,1712,5,279,0,0,1712,121,1,0,0,0,1713,1714,5,298,0,0,
        1714,1715,5,62,0,0,1715,1716,5,279,0,0,1716,123,1,0,0,0,1717,1718,
        5,294,0,0,1718,1722,5,278,0,0,1719,1723,5,7,0,0,1720,1723,5,204,
        0,0,1721,1723,3,902,451,0,1722,1719,1,0,0,0,1722,1720,1,0,0,0,1722,
        1721,1,0,0,0,1723,125,1,0,0,0,1724,1725,5,298,0,0,1725,1727,5,138,
        0,0,1726,1728,3,146,73,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,
        1731,1,0,0,0,1729,1730,5,215,0,0,1730,1732,3,130,65,0,1731,1729,
        1,0,0,0,1731,1732,1,0,0,0,1732,127,1,0,0,0,1733,1734,5,298,0,0,1734,
        1735,5,243,0,0,1735,1736,3,902,451,0,1736,129,1,0,0,0,1737,1740,
        5,7,0,0,1738,1740,3,136,68,0,1739,1737,1,0,0,0,1739,1738,1,0,0,0,
        1740,131,1,0,0,0,1741,1742,5,215,0,0,1742,1743,3,134,67,0,1743,133,
        1,0,0,0,1744,1745,3,90,45,0,1745,1746,3,902,451,0,1746,1759,1,0,
        0,0,1747,1749,5,319,0,0,1748,1747,1,0,0,0,1748,1749,1,0,0,0,1749,
        1750,1,0,0,0,1750,1752,3,646,323,0,1751,1753,3,886,443,0,1752,1751,
        1,0,0,0,1752,1753,1,0,0,0,1753,1759,1,0,0,0,1754,1755,5,356,0,0,
        1755,1759,5,414,0,0,1756,1757,5,293,0,0,1757,1759,3,902,451,0,1758,
        1744,1,0,0,0,1758,1748,1,0,0,0,1758,1754,1,0,0,0,1758,1756,1,0,0,
        0,1759,135,1,0,0,0,1760,1761,3,90,45,0,1761,1762,3,902,451,0,1762,
        1781,1,0,0,0,1763,1765,5,319,0,0,1764,1763,1,0,0,0,1764,1765,1,0,
        0,0,1765,1766,1,0,0,0,1766,1771,3,646,323,0,1767,1768,5,387,0,0,
        1768,1769,3,276,138,0,1769,1770,5,388,0,0,1770,1772,1,0,0,0,1771,
        1767,1,0,0,0,1771,1772,1,0,0,0,1772,1774,1,0,0,0,1773,1775,3,886,
        443,0,1774,1773,1,0,0,0,1774,1775,1,0,0,0,1775,1781,1,0,0,0,1776,
        1777,5,356,0,0,1777,1781,5,414,0,0,1778,1779,5,293,0,0,1779,1781,
        3,902,451,0,1780,1760,1,0,0,0,1780,1764,1,0,0,0,1780,1776,1,0,0,
        0,1780,1778,1,0,0,0,1781,137,1,0,0,0,1782,1787,3,140,70,0,1783,1784,
        5,385,0,0,1784,1786,3,140,70,0,1785,1783,1,0,0,0,1786,1789,1,0,0,
        0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,139,1,0,0,0,1789,1787,
        1,0,0,0,1790,1795,3,142,71,0,1791,1792,5,387,0,0,1792,1793,3,276,
        138,0,1793,1794,5,388,0,0,1794,1796,1,0,0,0,1795,1791,1,0,0,0,1795,
        1796,1,0,0,0,1796,141,1,0,0,0,1797,1798,7,8,0,0,1798,143,1,0,0,0,
        1799,1804,3,146,73,0,1800,1801,5,385,0,0,1801,1803,3,146,73,0,1802,
        1800,1,0,0,0,1803,1806,1,0,0,0,1804,1802,1,0,0,0,1804,1805,1,0,0,
        0,1805,145,1,0,0,0,1806,1804,1,0,0,0,1807,1808,5,359,0,0,1808,1814,
        3,906,453,0,1809,1810,5,139,0,0,1810,1814,3,906,453,0,1811,1812,
        5,278,0,0,1812,1814,3,902,451,0,1813,1807,1,0,0,0,1813,1809,1,0,
        0,0,1813,1811,1,0,0,0,1814,147,1,0,0,0,1815,1816,5,376,0,0,1816,
        1817,5,138,0,0,1817,1818,5,218,0,0,1818,149,1,0,0,0,1819,1820,5,
        138,0,0,1820,1821,5,218,0,0,1821,1822,5,129,0,0,1822,151,1,0,0,0,
        1823,1824,5,5,0,0,1824,1825,5,218,0,0,1825,1826,5,129,0,0,1826,153,
        1,0,0,0,1827,1828,5,376,0,0,1828,1829,5,5,0,0,1829,1830,5,218,0,
        0,1830,155,1,0,0,0,1831,1833,5,203,0,0,1832,1834,5,267,0,0,1833,
        1832,1,0,0,0,1833,1834,1,0,0,0,1834,1835,1,0,0,0,1835,1836,5,319,
        0,0,1836,1842,3,646,323,0,1837,1838,7,9,0,0,1838,1840,5,230,0,0,
        1839,1841,3,890,445,0,1840,1839,1,0,0,0,1840,1841,1,0,0,0,1841,1843,
        1,0,0,0,1842,1837,1,0,0,0,1842,1843,1,0,0,0,1843,157,1,0,0,0,1844,
        1849,3,160,80,0,1845,1846,5,385,0,0,1846,1848,3,160,80,0,1847,1845,
        1,0,0,0,1848,1851,1,0,0,0,1849,1847,1,0,0,0,1849,1850,1,0,0,0,1850,
        159,1,0,0,0,1851,1849,1,0,0,0,1852,1853,3,162,81,0,1853,1854,5,414,
        0,0,1854,161,1,0,0,0,1855,1856,7,10,0,0,1856,163,1,0,0,0,1857,1859,
        5,58,0,0,1858,1860,5,323,0,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,
        1860,1861,1,0,0,0,1861,1862,5,136,0,0,1862,1863,3,904,452,0,1863,
        1864,5,17,0,0,1864,1867,5,414,0,0,1865,1866,5,360,0,0,1866,1868,
        3,158,79,0,1867,1865,1,0,0,0,1867,1868,1,0,0,0,1868,165,1,0,0,0,
        1869,1871,5,98,0,0,1870,1872,5,323,0,0,1871,1870,1,0,0,0,1871,1872,
        1,0,0,0,1872,1873,1,0,0,0,1873,1875,5,136,0,0,1874,1876,3,38,19,
        0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1877,1,0,0,0,1877,1878,
        3,904,452,0,1878,167,1,0,0,0,1879,1880,5,262,0,0,1880,1881,7,11,
        0,0,1881,169,1,0,0,0,1882,1883,5,58,0,0,1883,1884,5,323,0,0,1884,
        1885,5,187,0,0,1885,1886,5,420,0,0,1886,1888,5,387,0,0,1887,1889,
        3,270,135,0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,1889,1890,1,0,0,
        0,1890,1891,5,388,0,0,1891,1892,3,802,401,0,1892,171,1,0,0,0,1893,
        1894,5,98,0,0,1894,1895,5,323,0,0,1895,1897,5,187,0,0,1896,1898,
        3,38,19,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,
        1899,1900,5,420,0,0,1900,173,1,0,0,0,1901,1903,5,58,0,0,1902,1904,
        3,52,26,0,1903,1902,1,0,0,0,1903,1904,1,0,0,0,1904,1905,1,0,0,0,
        1905,1907,5,368,0,0,1906,1908,3,42,21,0,1907,1906,1,0,0,0,1907,1908,
        1,0,0,0,1908,1909,1,0,0,0,1909,1914,3,646,323,0,1910,1911,5,387,
        0,0,1911,1912,3,328,164,0,1912,1913,5,388,0,0,1913,1915,1,0,0,0,
        1914,1910,1,0,0,0,1914,1915,1,0,0,0,1915,1917,1,0,0,0,1916,1918,
        3,212,106,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1920,1,0,0,
        0,1919,1921,3,176,88,0,1920,1919,1,0,0,0,1920,1921,1,0,0,0,1921,
        1923,1,0,0,0,1922,1924,3,246,123,0,1923,1922,1,0,0,0,1923,1924,1,
        0,0,0,1924,1925,1,0,0,0,1925,1926,5,17,0,0,1926,1927,3,406,203,0,
        1927,175,1,0,0,0,1928,1929,5,229,0,0,1929,1935,5,215,0,0,1930,1931,
        5,387,0,0,1931,1936,3,276,138,0,1932,1933,5,306,0,0,1933,1934,5,
        387,0,0,1934,1936,3,222,111,0,1935,1930,1,0,0,0,1935,1932,1,0,0,
        0,1936,1937,1,0,0,0,1937,1938,5,388,0,0,1938,177,1,0,0,0,1939,1942,
        3,180,90,0,1940,1942,3,182,91,0,1941,1939,1,0,0,0,1941,1940,1,0,
        0,0,1942,179,1,0,0,0,1943,1944,5,42,0,0,1944,1945,5,215,0,0,1945,
        1946,5,387,0,0,1946,1947,3,276,138,0,1947,1948,5,388,0,0,1948,181,
        1,0,0,0,1949,1950,3,184,92,0,1950,1951,3,186,93,0,1951,183,1,0,0,
        0,1952,1953,5,94,0,0,1953,1954,5,215,0,0,1954,1955,5,387,0,0,1955,
        1956,3,276,138,0,1956,1957,5,388,0,0,1957,185,1,0,0,0,1958,1959,
        5,305,0,0,1959,1960,5,215,0,0,1960,1961,5,387,0,0,1961,1962,3,276,
        138,0,1962,1963,5,388,0,0,1963,187,1,0,0,0,1964,1965,5,98,0,0,1965,
        1967,5,368,0,0,1966,1968,3,38,19,0,1967,1966,1,0,0,0,1967,1968,1,
        0,0,0,1968,1969,1,0,0,0,1969,1970,3,648,324,0,1970,189,1,0,0,0,1971,
        1972,5,58,0,0,1972,1973,5,195,0,0,1973,1975,5,368,0,0,1974,1976,
        3,42,21,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,
        1977,1979,3,646,323,0,1978,1980,3,48,24,0,1979,1978,1,0,0,0,1979,
        1980,1,0,0,0,1980,1982,1,0,0,0,1981,1983,3,212,106,0,1982,1981,1,
        0,0,0,1982,1983,1,0,0,0,1983,1985,1,0,0,0,1984,1986,3,176,88,0,1985,
        1984,1,0,0,0,1985,1986,1,0,0,0,1986,1988,1,0,0,0,1987,1989,3,178,
        89,0,1988,1987,1,0,0,0,1988,1989,1,0,0,0,1989,1991,1,0,0,0,1990,
        1992,3,244,122,0,1991,1990,1,0,0,0,1991,1992,1,0,0,0,1992,1994,1,
        0,0,0,1993,1995,3,266,133,0,1994,1993,1,0,0,0,1994,1995,1,0,0,0,
        1995,1997,1,0,0,0,1996,1998,3,268,134,0,1997,1996,1,0,0,0,1997,1998,
        1,0,0,0,1998,2000,1,0,0,0,1999,2001,3,246,123,0,2000,1999,1,0,0,
        0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2003,5,17,0,0,2003,2004,
        3,406,203,0,2004,191,1,0,0,0,2005,2006,5,98,0,0,2006,2007,5,195,
        0,0,2007,2009,5,368,0,0,2008,2010,3,38,19,0,2009,2008,1,0,0,0,2009,
        2010,1,0,0,0,2010,2011,1,0,0,0,2011,2012,3,648,324,0,2012,193,1,
        0,0,0,2013,2014,5,58,0,0,2014,2015,5,284,0,0,2015,2016,5,249,0,0,
        2016,2017,3,902,451,0,2017,2019,3,202,101,0,2018,2020,3,204,102,
        0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,2022,1,0,0,0,2021,2023,
        3,288,144,0,2022,2021,1,0,0,0,2022,2023,1,0,0,0,2023,2024,1,0,0,
        0,2024,2025,3,206,103,0,2025,195,1,0,0,0,2026,2027,5,98,0,0,2027,
        2028,5,284,0,0,2028,2029,5,249,0,0,2029,2030,3,902,451,0,2030,197,
        1,0,0,0,2031,2032,5,9,0,0,2032,2033,5,284,0,0,2033,2034,5,249,0,
        0,2034,2035,3,902,451,0,2035,2036,3,200,100,0,2036,199,1,0,0,0,2037,
        2043,3,202,101,0,2038,2043,3,204,102,0,2039,2043,3,288,144,0,2040,
        2043,3,206,103,0,2041,2043,5,110,0,0,2042,2037,1,0,0,0,2042,2038,
        1,0,0,0,2042,2039,1,0,0,0,2042,2040,1,0,0,0,2042,2041,1,0,0,0,2043,
        201,1,0,0,0,2044,2045,5,59,0,0,2045,2060,5,414,0,0,2046,2048,5,106,
        0,0,2047,2049,5,419,0,0,2048,2047,1,0,0,0,2048,2049,1,0,0,0,2049,
        2050,1,0,0,0,2050,2057,3,800,400,0,2051,2055,5,20,0,0,2052,2053,
        5,214,0,0,2053,2055,5,32,0,0,2054,2051,1,0,0,0,2054,2052,1,0,0,0,
        2055,2056,1,0,0,0,2056,2058,5,414,0,0,2057,2054,1,0,0,0,2057,2058,
        1,0,0,0,2058,2060,1,0,0,0,2059,2044,1,0,0,0,2059,2046,1,0,0,0,2060,
        203,1,0,0,0,2061,2062,5,111,0,0,2062,2063,5,17,0,0,2063,2064,5,414,
        0,0,2064,205,1,0,0,0,2065,2067,5,82,0,0,2066,2065,1,0,0,0,2066,2067,
        1,0,0,0,2067,2068,1,0,0,0,2068,2069,5,17,0,0,2069,2070,3,0,0,0,2070,
        207,1,0,0,0,2071,2074,3,904,452,0,2072,2074,5,414,0,0,2073,2071,
        1,0,0,0,2073,2072,1,0,0,0,2074,209,1,0,0,0,2075,2078,3,902,451,0,
        2076,2078,5,414,0,0,2077,2075,1,0,0,0,2077,2076,1,0,0,0,2078,211,
        1,0,0,0,2079,2080,5,47,0,0,2080,2081,5,414,0,0,2081,213,1,0,0,0,
        2082,2086,5,360,0,0,2083,2085,5,414,0,0,2084,2083,1,0,0,0,2085,2088,
        1,0,0,0,2086,2084,1,0,0,0,2086,2087,1,0,0,0,2087,215,1,0,0,0,2088,
        2086,1,0,0,0,2089,2090,5,229,0,0,2090,2099,5,32,0,0,2091,2094,5,
        387,0,0,2092,2095,3,218,109,0,2093,2095,3,220,110,0,2094,2092,1,
        0,0,0,2094,2093,1,0,0,0,2095,2100,1,0,0,0,2096,2097,5,306,0,0,2097,
        2098,5,387,0,0,2098,2100,3,222,111,0,2099,2091,1,0,0,0,2099,2096,
        1,0,0,0,2100,2101,1,0,0,0,2101,2102,5,388,0,0,2102,217,1,0,0,0,2103,
        2108,3,342,171,0,2104,2105,5,385,0,0,2105,2107,3,342,171,0,2106,
        2104,1,0,0,0,2107,2110,1,0,0,0,2108,2106,1,0,0,0,2108,2109,1,0,0,
        0,2109,219,1,0,0,0,2110,2108,1,0,0,0,2111,2116,3,278,139,0,2112,
        2113,5,385,0,0,2113,2115,3,278,139,0,2114,2112,1,0,0,0,2115,2118,
        1,0,0,0,2116,2114,1,0,0,0,2116,2117,1,0,0,0,2117,221,1,0,0,0,2118,
        2116,1,0,0,0,2119,2124,3,224,112,0,2120,2121,5,385,0,0,2121,2123,
        3,224,112,0,2122,2120,1,0,0,0,2123,2126,1,0,0,0,2124,2122,1,0,0,
        0,2124,2125,1,0,0,0,2125,223,1,0,0,0,2126,2124,1,0,0,0,2127,2128,
        3,226,113,0,2128,225,1,0,0,0,2129,2143,3,278,139,0,2130,2131,7,12,
        0,0,2131,2132,5,387,0,0,2132,2133,3,278,139,0,2133,2134,5,388,0,
        0,2134,2143,1,0,0,0,2135,2136,7,13,0,0,2136,2137,5,387,0,0,2137,
        2138,5,419,0,0,2138,2139,5,385,0,0,2139,2140,3,278,139,0,2140,2141,
        5,388,0,0,2141,2143,1,0,0,0,2142,2129,1,0,0,0,2142,2130,1,0,0,0,
        2142,2135,1,0,0,0,2143,227,1,0,0,0,2144,2145,5,42,0,0,2145,2146,
        5,32,0,0,2146,2147,5,387,0,0,2147,2148,3,276,138,0,2148,2155,5,388,
        0,0,2149,2150,5,305,0,0,2150,2151,5,32,0,0,2151,2152,5,387,0,0,2152,
        2153,3,282,141,0,2153,2154,5,388,0,0,2154,2156,1,0,0,0,2155,2149,
        1,0,0,0,2155,2156,1,0,0,0,2156,2157,1,0,0,0,2157,2158,5,160,0,0,
        2158,2159,5,419,0,0,2159,2160,5,31,0,0,2160,229,1,0,0,0,2161,2162,
        5,42,0,0,2162,2163,5,160,0,0,2163,2164,5,419,0,0,2164,2165,5,31,
        0,0,2165,231,1,0,0,0,2166,2167,5,300,0,0,2167,2168,5,32,0,0,2168,
        2169,5,387,0,0,2169,2170,3,276,138,0,2170,2171,5,388,0,0,2171,2172,
        5,215,0,0,2172,2173,5,387,0,0,2173,2174,3,310,155,0,2174,2176,5,
        388,0,0,2175,2177,3,50,25,0,2176,2175,1,0,0,0,2176,2177,1,0,0,0,
        2177,233,1,0,0,0,2178,2181,3,240,120,0,2179,2181,3,242,121,0,2180,
        2178,1,0,0,0,2180,2179,1,0,0,0,2181,235,1,0,0,0,2182,2183,5,257,
        0,0,2183,2184,5,414,0,0,2184,237,1,0,0,0,2185,2186,5,258,0,0,2186,
        2187,5,414,0,0,2187,239,1,0,0,0,2188,2189,5,282,0,0,2189,2190,5,
        132,0,0,2190,2191,5,291,0,0,2191,2195,5,414,0,0,2192,2193,5,376,
        0,0,2193,2194,5,292,0,0,2194,2196,3,248,124,0,2195,2192,1,0,0,0,
        2195,2196,1,0,0,0,2196,241,1,0,0,0,2197,2198,5,282,0,0,2198,2199,
        5,132,0,0,2199,2201,5,84,0,0,2200,2202,3,256,128,0,2201,2200,1,0,
        0,0,2201,2202,1,0,0,0,2202,2204,1,0,0,0,2203,2205,3,258,129,0,2204,
        2203,1,0,0,0,2204,2205,1,0,0,0,2205,2207,1,0,0,0,2206,2208,3,260,
        130,0,2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,2210,1,0,0,0,2209,
        2211,3,262,131,0,2210,2209,1,0,0,0,2210,2211,1,0,0,0,2211,2213,1,
        0,0,0,2212,2214,3,264,132,0,2213,2212,1,0,0,0,2213,2214,1,0,0,0,
        2214,243,1,0,0,0,2215,2218,3,242,121,0,2216,2218,3,240,120,0,2217,
        2215,1,0,0,0,2217,2216,1,0,0,0,2218,245,1,0,0,0,2219,2220,5,322,
        0,0,2220,2221,3,248,124,0,2221,247,1,0,0,0,2222,2223,5,387,0,0,2223,
        2224,3,250,125,0,2224,2225,5,388,0,0,2225,249,1,0,0,0,2226,2231,
        3,252,126,0,2227,2228,5,385,0,0,2228,2230,3,252,126,0,2229,2227,
        1,0,0,0,2230,2233,1,0,0,0,2231,2229,1,0,0,0,2231,2232,1,0,0,0,2232,
        2243,1,0,0,0,2233,2231,1,0,0,0,2234,2239,3,254,127,0,2235,2236,5,
        385,0,0,2236,2238,3,254,127,0,2237,2235,1,0,0,0,2238,2241,1,0,0,
        0,2239,2237,1,0,0,0,2239,2240,1,0,0,0,2240,2243,1,0,0,0,2241,2239,
        1,0,0,0,2242,2226,1,0,0,0,2242,2234,1,0,0,0,2243,251,1,0,0,0,2244,
        2245,5,414,0,0,2245,2246,5,394,0,0,2246,2247,5,414,0,0,2247,253,
        1,0,0,0,2248,2249,5,414,0,0,2249,255,1,0,0,0,2250,2251,5,122,0,0,
        2251,2252,5,324,0,0,2252,2253,5,32,0,0,2253,2257,5,414,0,0,2254,
        2255,5,105,0,0,2255,2256,5,32,0,0,2256,2258,5,414,0,0,2257,2254,
        1,0,0,0,2257,2258,1,0,0,0,2258,257,1,0,0,0,2259,2260,5,44,0,0,2260,
        2261,5,163,0,0,2261,2262,5,324,0,0,2262,2263,5,32,0,0,2263,2264,
        5,414,0,0,2264,259,1,0,0,0,2265,2266,5,191,0,0,2266,2267,5,168,0,
        0,2267,2268,5,324,0,0,2268,2269,5,32,0,0,2269,2270,5,414,0,0,2270,
        261,1,0,0,0,2271,2272,5,179,0,0,2272,2273,5,324,0,0,2273,2274,5,
        32,0,0,2274,2275,5,414,0,0,2275,263,1,0,0,0,2276,2277,5,210,0,0,
        2277,2278,5,82,0,0,2278,2279,5,17,0,0,2279,2280,5,414,0,0,2280,265,
        1,0,0,0,2281,2282,5,311,0,0,2282,2283,5,17,0,0,2283,2284,5,155,0,
        0,2284,2285,5,414,0,0,2285,2286,5,224,0,0,2286,2291,5,414,0,0,2287,
        2288,5,154,0,0,2288,2289,5,414,0,0,2289,2290,5,223,0,0,2290,2292,
        5,414,0,0,2291,2287,1,0,0,0,2291,2292,1,0,0,0,2292,2323,1,0,0,0,
        2293,2294,5,311,0,0,2294,2295,5,32,0,0,2295,2299,5,414,0,0,2296,
        2297,5,376,0,0,2297,2298,5,292,0,0,2298,2300,3,248,124,0,2299,2296,
        1,0,0,0,2299,2300,1,0,0,0,2300,2304,1,0,0,0,2301,2302,5,311,0,0,
        2302,2303,5,17,0,0,2303,2305,3,902,451,0,2304,2301,1,0,0,0,2304,
        2305,1,0,0,0,2305,2323,1,0,0,0,2306,2307,5,311,0,0,2307,2308,5,32,
        0,0,2308,2312,3,902,451,0,2309,2310,5,376,0,0,2310,2311,5,292,0,
        0,2311,2313,3,248,124,0,2312,2309,1,0,0,0,2312,2313,1,0,0,0,2313,
        2317,1,0,0,0,2314,2315,5,311,0,0,2315,2316,5,17,0,0,2316,2318,3,
        902,451,0,2317,2314,1,0,0,0,2317,2318,1,0,0,0,2318,2323,1,0,0,0,
        2319,2320,5,311,0,0,2320,2321,5,17,0,0,2321,2323,3,902,451,0,2322,
        2281,1,0,0,0,2322,2293,1,0,0,0,2322,2306,1,0,0,0,2322,2319,1,0,0,
        0,2323,267,1,0,0,0,2324,2325,5,182,0,0,2325,2326,5,414,0,0,2326,
        269,1,0,0,0,2327,2332,3,336,168,0,2328,2329,5,385,0,0,2329,2331,
        3,336,168,0,2330,2328,1,0,0,0,2331,2334,1,0,0,0,2332,2330,1,0,0,
        0,2332,2333,1,0,0,0,2333,271,1,0,0,0,2334,2332,1,0,0,0,2335,2340,
        3,338,169,0,2336,2337,5,385,0,0,2337,2339,3,338,169,0,2338,2336,
        1,0,0,0,2339,2342,1,0,0,0,2340,2338,1,0,0,0,2340,2341,1,0,0,0,2341,
        273,1,0,0,0,2342,2340,1,0,0,0,2343,2348,3,366,183,0,2344,2345,5,
        385,0,0,2345,2347,3,366,183,0,2346,2344,1,0,0,0,2347,2350,1,0,0,
        0,2348,2346,1,0,0,0,2348,2349,1,0,0,0,2349,275,1,0,0,0,2350,2348,
        1,0,0,0,2351,2356,3,278,139,0,2352,2353,5,385,0,0,2353,2355,3,278,
        139,0,2354,2352,1,0,0,0,2355,2358,1,0,0,0,2356,2354,1,0,0,0,2356,
        2357,1,0,0,0,2357,277,1,0,0,0,2358,2356,1,0,0,0,2359,2360,3,902,
        451,0,2360,279,1,0,0,0,2361,2371,3,902,451,0,2362,2367,5,383,0,0,
        2363,2368,5,100,0,0,2364,2368,5,169,0,0,2365,2368,5,365,0,0,2366,
        2368,3,902,451,0,2367,2363,1,0,0,0,2367,2364,1,0,0,0,2367,2365,1,
        0,0,0,2367,2366,1,0,0,0,2368,2370,1,0,0,0,2369,2362,1,0,0,0,2370,
        2373,1,0,0,0,2371,2369,1,0,0,0,2371,2372,1,0,0,0,2372,281,1,0,0,
        0,2373,2371,1,0,0,0,2374,2379,3,326,163,0,2375,2376,5,385,0,0,2376,
        2378,3,326,163,0,2377,2375,1,0,0,0,2378,2381,1,0,0,0,2379,2377,1,
        0,0,0,2379,2380,1,0,0,0,2380,283,1,0,0,0,2381,2379,1,0,0,0,2382,
        2383,5,387,0,0,2383,2384,3,276,138,0,2384,2385,5,388,0,0,2385,285,
        1,0,0,0,2386,2388,3,288,144,0,2387,2389,3,290,145,0,2388,2387,1,
        0,0,0,2388,2389,1,0,0,0,2389,2392,1,0,0,0,2390,2392,3,292,146,0,
        2391,2386,1,0,0,0,2391,2390,1,0,0,0,2392,287,1,0,0,0,2393,2394,7,
        14,0,0,2394,289,1,0,0,0,2395,2396,7,15,0,0,2396,291,1,0,0,0,2397,
        2401,5,104,0,0,2398,2399,5,207,0,0,2399,2401,5,104,0,0,2400,2397,
        1,0,0,0,2400,2398,1,0,0,0,2401,293,1,0,0,0,2402,2403,7,16,0,0,2403,
        295,1,0,0,0,2404,2405,5,55,0,0,2405,2407,3,902,451,0,2406,2404,1,
        0,0,0,2406,2407,1,0,0,0,2407,2408,1,0,0,0,2408,2410,3,300,150,0,
        2409,2411,3,362,181,0,2410,2409,1,0,0,0,2410,2411,1,0,0,0,2411,297,
        1,0,0,0,2412,2413,5,55,0,0,2413,2414,3,902,451,0,2414,2416,3,300,
        150,0,2415,2417,3,364,182,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,
        2417,299,1,0,0,0,2418,2421,3,302,151,0,2419,2421,3,304,152,0,2420,
        2418,1,0,0,0,2420,2419,1,0,0,0,2421,301,1,0,0,0,2422,2423,3,360,
        180,0,2423,2424,3,284,142,0,2424,303,1,0,0,0,2425,2426,5,40,0,0,
        2426,2427,5,387,0,0,2427,2428,3,802,401,0,2428,2429,5,388,0,0,2429,
        305,1,0,0,0,2430,2431,5,55,0,0,2431,2433,3,902,451,0,2432,2430,1,
        0,0,0,2432,2433,1,0,0,0,2433,2434,1,0,0,0,2434,2435,5,131,0,0,2435,
        2436,5,167,0,0,2436,2437,3,284,142,0,2437,2438,5,260,0,0,2438,2439,
        3,646,323,0,2439,2441,3,284,142,0,2440,2442,3,362,181,0,2441,2440,
        1,0,0,0,2441,2442,1,0,0,0,2442,307,1,0,0,0,2443,2444,5,55,0,0,2444,
        2445,3,902,451,0,2445,2446,5,131,0,0,2446,2447,5,167,0,0,2447,2448,
        3,284,142,0,2448,2449,5,260,0,0,2449,2450,3,646,323,0,2450,2452,
        3,284,142,0,2451,2453,3,364,182,0,2452,2451,1,0,0,0,2452,2453,1,
        0,0,0,2453,309,1,0,0,0,2454,2457,3,316,158,0,2455,2457,3,312,156,
        0,2456,2454,1,0,0,0,2456,2455,1,0,0,0,2457,311,1,0,0,0,2458,2463,
        3,314,157,0,2459,2460,5,385,0,0,2460,2462,3,314,157,0,2461,2459,
        1,0,0,0,2462,2465,1,0,0,0,2463,2461,1,0,0,0,2463,2464,1,0,0,0,2464,
        313,1,0,0,0,2465,2463,1,0,0,0,2466,2467,5,387,0,0,2467,2468,3,316,
        158,0,2468,2469,5,388,0,0,2469,315,1,0,0,0,2470,2475,3,318,159,0,
        2471,2472,5,385,0,0,2472,2474,3,318,159,0,2473,2471,1,0,0,0,2474,
        2477,1,0,0,0,2475,2473,1,0,0,0,2475,2476,1,0,0,0,2476,317,1,0,0,
        0,2477,2475,1,0,0,0,2478,2479,3,778,389,0,2479,319,1,0,0,0,2480,
        2483,3,318,159,0,2481,2483,3,314,157,0,2482,2480,1,0,0,0,2482,2481,
        1,0,0,0,2483,321,1,0,0,0,2484,2485,7,17,0,0,2485,323,1,0,0,0,2486,
        2487,5,211,0,0,2487,2488,7,18,0,0,2488,325,1,0,0,0,2489,2491,3,902,
        451,0,2490,2492,3,322,161,0,2491,2490,1,0,0,0,2491,2492,1,0,0,0,
        2492,2494,1,0,0,0,2493,2495,3,324,162,0,2494,2493,1,0,0,0,2494,2495,
        1,0,0,0,2495,327,1,0,0,0,2496,2501,3,330,165,0,2497,2498,5,385,0,
        0,2498,2500,3,330,165,0,2499,2497,1,0,0,0,2500,2503,1,0,0,0,2501,
        2499,1,0,0,0,2501,2502,1,0,0,0,2502,329,1,0,0,0,2503,2501,1,0,0,
        0,2504,2507,3,902,451,0,2505,2506,5,47,0,0,2506,2508,5,414,0,0,2507,
        2505,1,0,0,0,2507,2508,1,0,0,0,2508,331,1,0,0,0,2509,2510,7,17,0,
        0,2510,333,1,0,0,0,2511,2513,3,802,401,0,2512,2514,3,332,166,0,2513,
        2512,1,0,0,0,2513,2514,1,0,0,0,2514,2516,1,0,0,0,2515,2517,3,324,
        162,0,2516,2515,1,0,0,0,2516,2517,1,0,0,0,2517,335,1,0,0,0,2518,
        2519,3,902,451,0,2519,2522,3,368,184,0,2520,2521,5,47,0,0,2521,2523,
        5,414,0,0,2522,2520,1,0,0,0,2522,2523,1,0,0,0,2523,337,1,0,0,0,2524,
        2527,3,340,170,0,2525,2527,3,342,171,0,2526,2524,1,0,0,0,2526,2525,
        1,0,0,0,2527,339,1,0,0,0,2528,2531,3,306,153,0,2529,2531,3,296,148,
        0,2530,2528,1,0,0,0,2530,2529,1,0,0,0,2531,341,1,0,0,0,2532,2533,
        3,902,451,0,2533,2535,3,368,184,0,2534,2536,3,344,172,0,2535,2534,
        1,0,0,0,2535,2536,1,0,0,0,2536,2539,1,0,0,0,2537,2538,5,47,0,0,2538,
        2540,5,414,0,0,2539,2537,1,0,0,0,2539,2540,1,0,0,0,2540,343,1,0,
        0,0,2541,2544,3,346,173,0,2542,2544,3,348,174,0,2543,2541,1,0,0,
        0,2543,2542,1,0,0,0,2544,345,1,0,0,0,2545,2546,5,55,0,0,2546,2548,
        3,902,451,0,2547,2545,1,0,0,0,2547,2548,1,0,0,0,2548,2549,1,0,0,
        0,2549,2550,5,260,0,0,2550,2551,3,646,323,0,2551,2552,5,387,0,0,
        2552,2553,3,278,139,0,2553,2555,5,388,0,0,2554,2556,3,362,181,0,
        2555,2554,1,0,0,0,2555,2556,1,0,0,0,2556,347,1,0,0,0,2557,2558,5,
        55,0,0,2558,2560,3,902,451,0,2559,2557,1,0,0,0,2559,2560,1,0,0,0,
        2560,2561,1,0,0,0,2561,2563,3,356,178,0,2562,2564,3,362,181,0,2563,
        2562,1,0,0,0,2563,2564,1,0,0,0,2564,349,1,0,0,0,2565,2568,3,352,
        176,0,2566,2568,3,354,177,0,2567,2565,1,0,0,0,2567,2566,1,0,0,0,
        2568,351,1,0,0,0,2569,2570,5,55,0,0,2570,2572,3,902,451,0,2571,2569,
        1,0,0,0,2571,2572,1,0,0,0,2572,2573,1,0,0,0,2573,2574,5,260,0,0,
        2574,2575,3,646,323,0,2575,2576,5,387,0,0,2576,2577,3,278,139,0,
        2577,2579,5,388,0,0,2578,2580,3,364,182,0,2579,2578,1,0,0,0,2579,
        2580,1,0,0,0,2580,353,1,0,0,0,2581,2582,5,55,0,0,2582,2584,3,902,
        451,0,2583,2581,1,0,0,0,2583,2584,1,0,0,0,2584,2585,1,0,0,0,2585,
        2587,3,356,178,0,2586,2588,3,364,182,0,2587,2586,1,0,0,0,2587,2588,
        1,0,0,0,2588,355,1,0,0,0,2589,2590,5,207,0,0,2590,2596,5,210,0,0,
        2591,2592,5,80,0,0,2592,2596,3,358,179,0,2593,2596,3,304,152,0,2594,
        2596,3,360,180,0,2595,2589,1,0,0,0,2595,2591,1,0,0,0,2595,2593,1,
        0,0,0,2595,2594,1,0,0,0,2596,357,1,0,0,0,2597,2601,3,778,389,0,2598,
        2601,3,758,379,0,2599,2601,3,764,382,0,2600,2597,1,0,0,0,2600,2598,
        1,0,0,0,2600,2599,1,0,0,0,2601,359,1,0,0,0,2602,2603,5,242,0,0,2603,
        2606,5,167,0,0,2604,2606,5,348,0,0,2605,2602,1,0,0,0,2605,2604,1,
        0,0,0,2606,361,1,0,0,0,2607,2609,3,286,143,0,2608,2610,3,294,147,
        0,2609,2608,1,0,0,0,2609,2610,1,0,0,0,2610,363,1,0,0,0,2611,2613,
        3,286,143,0,2612,2614,3,294,147,0,2613,2612,1,0,0,0,2613,2614,1,
        0,0,0,2614,365,1,0,0,0,2615,2616,3,902,451,0,2616,2617,5,384,0,0,
        2617,2620,3,368,184,0,2618,2619,5,47,0,0,2619,2621,5,414,0,0,2620,
        2618,1,0,0,0,2620,2621,1,0,0,0,2621,367,1,0,0,0,2622,2623,3,372,
        186,0,2623,369,1,0,0,0,2624,2629,3,368,184,0,2625,2626,5,385,0,0,
        2626,2628,3,368,184,0,2627,2625,1,0,0,0,2628,2631,1,0,0,0,2629,2627,
        1,0,0,0,2629,2630,1,0,0,0,2630,371,1,0,0,0,2631,2629,1,0,0,0,2632,
        2638,3,374,187,0,2633,2638,3,376,188,0,2634,2638,3,378,189,0,2635,
        2638,3,380,190,0,2636,2638,3,382,191,0,2637,2632,1,0,0,0,2637,2633,
        1,0,0,0,2637,2634,1,0,0,0,2637,2635,1,0,0,0,2637,2636,1,0,0,0,2638,
        373,1,0,0,0,2639,2676,5,330,0,0,2640,2676,5,301,0,0,2641,2676,5,
        157,0,0,2642,2676,5,26,0,0,2643,2676,5,28,0,0,2644,2676,5,126,0,
        0,2645,2676,5,255,0,0,2646,2648,5,96,0,0,2647,2649,5,239,0,0,2648,
        2647,1,0,0,0,2648,2649,1,0,0,0,2649,2676,1,0,0,0,2650,2676,5,71,
        0,0,2651,2676,5,72,0,0,2652,2676,5,327,0,0,2653,2676,5,328,0,0,2654,
        2655,5,327,0,0,2655,2656,5,376,0,0,2656,2657,5,181,0,0,2657,2658,
        5,326,0,0,2658,2676,5,382,0,0,2659,2676,5,313,0,0,2660,2676,5,27,
        0,0,2661,2669,5,79,0,0,2662,2663,5,387,0,0,2663,2666,5,419,0,0,2664,
        2665,5,385,0,0,2665,2667,5,419,0,0,2666,2664,1,0,0,0,2666,2667,1,
        0,0,0,2667,2668,1,0,0,0,2668,2670,5,388,0,0,2669,2662,1,0,0,0,2669,
        2670,1,0,0,0,2670,2676,1,0,0,0,2671,2672,7,19,0,0,2672,2673,5,387,
        0,0,2673,2674,5,419,0,0,2674,2676,5,388,0,0,2675,2639,1,0,0,0,2675,
        2640,1,0,0,0,2675,2641,1,0,0,0,2675,2642,1,0,0,0,2675,2643,1,0,0,
        0,2675,2644,1,0,0,0,2675,2645,1,0,0,0,2675,2646,1,0,0,0,2675,2650,
        1,0,0,0,2675,2651,1,0,0,0,2675,2652,1,0,0,0,2675,2653,1,0,0,0,2675,
        2654,1,0,0,0,2675,2659,1,0,0,0,2675,2660,1,0,0,0,2675,2661,1,0,0,
        0,2675,2671,1,0,0,0,2676,375,1,0,0,0,2677,2678,5,16,0,0,2678,2679,
        5,398,0,0,2679,2680,3,372,186,0,2680,2681,5,400,0,0,2681,377,1,0,
        0,0,2682,2683,5,314,0,0,2683,2684,5,398,0,0,2684,2685,3,274,137,
        0,2685,2686,5,400,0,0,2686,379,1,0,0,0,2687,2688,5,191,0,0,2688,
        2689,5,398,0,0,2689,2690,3,374,187,0,2690,2691,5,385,0,0,2691,2692,
        3,372,186,0,2692,2693,5,400,0,0,2693,381,1,0,0,0,2694,2695,5,347,
        0,0,2695,2696,5,398,0,0,2696,2697,3,370,185,0,2697,2698,5,400,0,
        0,2698,383,1,0,0,0,2699,2701,7,20,0,0,2700,2702,7,21,0,0,2701,2700,
        1,0,0,0,2701,2702,1,0,0,0,2702,385,1,0,0,0,2703,2705,3,390,195,0,
        2704,2703,1,0,0,0,2704,2705,1,0,0,0,2705,2706,1,0,0,0,2706,2707,
        3,388,194,0,2707,387,1,0,0,0,2708,2711,3,394,197,0,2709,2711,3,398,
        199,0,2710,2708,1,0,0,0,2710,2709,1,0,0,0,2711,389,1,0,0,0,2712,
        2713,5,376,0,0,2713,2718,3,392,196,0,2714,2715,5,385,0,0,2715,2717,
        3,392,196,0,2716,2714,1,0,0,0,2717,2720,1,0,0,0,2718,2716,1,0,0,
        0,2718,2719,1,0,0,0,2719,391,1,0,0,0,2720,2718,1,0,0,0,2721,2726,
        3,902,451,0,2722,2723,5,387,0,0,2723,2724,3,276,138,0,2724,2725,
        5,388,0,0,2725,2727,1,0,0,0,2726,2722,1,0,0,0,2726,2727,1,0,0,0,
        2727,2728,1,0,0,0,2728,2729,5,17,0,0,2729,2730,5,387,0,0,2730,2731,
        3,386,193,0,2731,2732,5,388,0,0,2732,393,1,0,0,0,2733,2739,3,396,
        198,0,2734,2735,3,384,192,0,2735,2736,3,396,198,0,2736,2738,1,0,
        0,0,2737,2734,1,0,0,0,2738,2741,1,0,0,0,2739,2737,1,0,0,0,2739,2740,
        1,0,0,0,2740,395,1,0,0,0,2741,2739,1,0,0,0,2742,2744,3,612,306,0,
        2743,2745,3,408,204,0,2744,2743,1,0,0,0,2745,2746,1,0,0,0,2746,2744,
        1,0,0,0,2746,2747,1,0,0,0,2747,397,1,0,0,0,2748,2749,3,410,205,0,
        2749,2750,3,402,201,0,2750,2753,1,0,0,0,2751,2753,3,402,201,0,2752,
        2748,1,0,0,0,2752,2751,1,0,0,0,2753,399,1,0,0,0,2754,2756,3,674,
        337,0,2755,2757,3,612,306,0,2756,2755,1,0,0,0,2756,2757,1,0,0,0,
        2757,2759,1,0,0,0,2758,2760,3,658,329,0,2759,2758,1,0,0,0,2759,2760,
        1,0,0,0,2760,2762,1,0,0,0,2761,2763,3,706,353,0,2762,2761,1,0,0,
        0,2762,2763,1,0,0,0,2763,2765,1,0,0,0,2764,2766,3,722,361,0,2765,
        2764,1,0,0,0,2765,2766,1,0,0,0,2766,2768,1,0,0,0,2767,2769,3,690,
        345,0,2768,2767,1,0,0,0,2768,2769,1,0,0,0,2769,2771,1,0,0,0,2770,
        2772,3,724,362,0,2771,2770,1,0,0,0,2771,2772,1,0,0,0,2772,2779,1,
        0,0,0,2773,2774,5,387,0,0,2774,2775,3,402,201,0,2775,2776,5,388,
        0,0,2776,2779,1,0,0,0,2777,2779,3,662,331,0,2778,2754,1,0,0,0,2778,
        2773,1,0,0,0,2778,2777,1,0,0,0,2779,401,1,0,0,0,2780,2782,3,400,
        200,0,2781,2783,3,404,202,0,2782,2781,1,0,0,0,2782,2783,1,0,0,0,
        2783,2785,1,0,0,0,2784,2786,3,746,373,0,2785,2784,1,0,0,0,2785,2786,
        1,0,0,0,2786,2788,1,0,0,0,2787,2789,3,748,374,0,2788,2787,1,0,0,
        0,2788,2789,1,0,0,0,2789,2791,1,0,0,0,2790,2792,3,752,376,0,2791,
        2790,1,0,0,0,2791,2792,1,0,0,0,2792,2794,1,0,0,0,2793,2795,3,658,
        329,0,2794,2793,1,0,0,0,2794,2795,1,0,0,0,2795,2797,1,0,0,0,2796,
        2798,3,754,377,0,2797,2796,1,0,0,0,2797,2798,1,0,0,0,2798,2800,1,
        0,0,0,2799,2801,3,414,207,0,2800,2799,1,0,0,0,2800,2801,1,0,0,0,
        2801,403,1,0,0,0,2802,2803,3,384,192,0,2803,2804,3,400,200,0,2804,
        2806,1,0,0,0,2805,2802,1,0,0,0,2806,2807,1,0,0,0,2807,2805,1,0,0,
        0,2807,2808,1,0,0,0,2808,405,1,0,0,0,2809,2811,3,390,195,0,2810,
        2809,1,0,0,0,2810,2811,1,0,0,0,2811,2812,1,0,0,0,2812,2813,3,402,
        201,0,2813,407,1,0,0,0,2814,2815,3,410,205,0,2815,2817,3,674,337,
        0,2816,2818,3,630,315,0,2817,2816,1,0,0,0,2817,2818,1,0,0,0,2818,
        2820,1,0,0,0,2819,2821,3,658,329,0,2820,2819,1,0,0,0,2820,2821,1,
        0,0,0,2821,2823,1,0,0,0,2822,2824,3,706,353,0,2823,2822,1,0,0,0,
        2823,2824,1,0,0,0,2824,2826,1,0,0,0,2825,2827,3,722,361,0,2826,2825,
        1,0,0,0,2826,2827,1,0,0,0,2827,2829,1,0,0,0,2828,2830,3,690,345,
        0,2829,2828,1,0,0,0,2829,2830,1,0,0,0,2830,2832,1,0,0,0,2831,2833,
        3,724,362,0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,2833,2835,1,0,0,
        0,2834,2836,3,746,373,0,2835,2834,1,0,0,0,2835,2836,1,0,0,0,2836,
        2838,1,0,0,0,2837,2839,3,748,374,0,2838,2837,1,0,0,0,2838,2839,1,
        0,0,0,2839,2841,1,0,0,0,2840,2842,3,752,376,0,2841,2840,1,0,0,0,
        2841,2842,1,0,0,0,2842,2844,1,0,0,0,2843,2845,3,754,377,0,2844,2843,
        1,0,0,0,2844,2845,1,0,0,0,2845,2847,1,0,0,0,2846,2848,3,414,207,
        0,2847,2846,1,0,0,0,2847,2848,1,0,0,0,2848,2884,1,0,0,0,2849,2851,
        3,674,337,0,2850,2852,3,630,315,0,2851,2850,1,0,0,0,2851,2852,1,
        0,0,0,2852,2854,1,0,0,0,2853,2855,3,658,329,0,2854,2853,1,0,0,0,
        2854,2855,1,0,0,0,2855,2857,1,0,0,0,2856,2858,3,706,353,0,2857,2856,
        1,0,0,0,2857,2858,1,0,0,0,2858,2860,1,0,0,0,2859,2861,3,722,361,
        0,2860,2859,1,0,0,0,2860,2861,1,0,0,0,2861,2863,1,0,0,0,2862,2864,
        3,690,345,0,2863,2862,1,0,0,0,2863,2864,1,0,0,0,2864,2866,1,0,0,
        0,2865,2867,3,724,362,0,2866,2865,1,0,0,0,2866,2867,1,0,0,0,2867,
        2869,1,0,0,0,2868,2870,3,746,373,0,2869,2868,1,0,0,0,2869,2870,1,
        0,0,0,2870,2872,1,0,0,0,2871,2873,3,748,374,0,2872,2871,1,0,0,0,
        2872,2873,1,0,0,0,2873,2875,1,0,0,0,2874,2876,3,752,376,0,2875,2874,
        1,0,0,0,2875,2876,1,0,0,0,2876,2878,1,0,0,0,2877,2879,3,754,377,
        0,2878,2877,1,0,0,0,2878,2879,1,0,0,0,2879,2881,1,0,0,0,2880,2882,
        3,414,207,0,2881,2880,1,0,0,0,2881,2882,1,0,0,0,2882,2884,1,0,0,
        0,2883,2814,1,0,0,0,2883,2849,1,0,0,0,2884,409,1,0,0,0,2885,2902,
        5,156,0,0,2886,2887,5,226,0,0,2887,2889,3,412,206,0,2888,2890,3,
        42,21,0,2889,2888,1,0,0,0,2889,2890,1,0,0,0,2890,2903,1,0,0,0,2891,
        2893,5,160,0,0,2892,2894,5,319,0,0,2893,2892,1,0,0,0,2893,2894,1,
        0,0,0,2894,2895,1,0,0,0,2895,2900,3,884,442,0,2896,2897,5,387,0,
        0,2897,2898,3,276,138,0,2898,2899,5,388,0,0,2899,2901,1,0,0,0,2900,
        2896,1,0,0,0,2900,2901,1,0,0,0,2901,2903,1,0,0,0,2902,2886,1,0,0,
        0,2902,2891,1,0,0,0,2903,411,1,0,0,0,2904,2906,5,181,0,0,2905,2904,
        1,0,0,0,2905,2906,1,0,0,0,2906,2907,1,0,0,0,2907,2908,5,90,0,0,2908,
        2910,5,414,0,0,2909,2911,3,244,122,0,2910,2909,1,0,0,0,2910,2911,
        1,0,0,0,2911,2913,1,0,0,0,2912,2914,3,266,133,0,2913,2912,1,0,0,
        0,2913,2914,1,0,0,0,2914,2918,1,0,0,0,2915,2916,5,319,0,0,2916,2918,
        3,884,442,0,2917,2905,1,0,0,0,2917,2915,1,0,0,0,2918,413,1,0,0,0,
        2919,2928,5,178,0,0,2920,2921,5,419,0,0,2921,2923,5,385,0,0,2922,
        2920,1,0,0,0,2922,2923,1,0,0,0,2923,2924,1,0,0,0,2924,2929,5,419,
        0,0,2925,2926,5,419,0,0,2926,2927,5,214,0,0,2927,2929,5,419,0,0,
        2928,2922,1,0,0,0,2928,2925,1,0,0,0,2929,415,1,0,0,0,2930,2931,5,
        83,0,0,2931,2932,5,134,0,0,2932,2934,3,646,323,0,2933,2935,3,658,
        329,0,2934,2933,1,0,0,0,2934,2935,1,0,0,0,2935,417,1,0,0,0,2936,
        2937,3,604,302,0,2937,2938,5,394,0,0,2938,2939,3,420,210,0,2939,
        419,1,0,0,0,2940,2943,3,606,303,0,2941,2943,3,822,411,0,2942,2940,
        1,0,0,0,2942,2941,1,0,0,0,2943,421,1,0,0,0,2944,2945,5,294,0,0,2945,
        2950,3,418,209,0,2946,2947,5,385,0,0,2947,2949,3,418,209,0,2948,
        2946,1,0,0,0,2949,2952,1,0,0,0,2950,2948,1,0,0,0,2950,2951,1,0,0,
        0,2951,423,1,0,0,0,2952,2950,1,0,0,0,2953,2954,5,355,0,0,2954,2955,
        3,646,323,0,2955,2957,3,422,211,0,2956,2958,3,658,329,0,2957,2956,
        1,0,0,0,2957,2958,1,0,0,0,2958,425,1,0,0,0,2959,2964,3,428,214,0,
        2960,2964,3,438,219,0,2961,2964,3,440,220,0,2962,2964,3,442,221,
        0,2963,2959,1,0,0,0,2963,2960,1,0,0,0,2963,2961,1,0,0,0,2963,2962,
        1,0,0,0,2964,427,1,0,0,0,2965,2966,5,308,0,0,2966,2975,5,334,0,0,
        2967,2972,3,430,215,0,2968,2969,5,385,0,0,2969,2971,3,430,215,0,
        2970,2968,1,0,0,0,2971,2974,1,0,0,0,2972,2970,1,0,0,0,2972,2973,
        1,0,0,0,2973,2976,1,0,0,0,2974,2972,1,0,0,0,2975,2967,1,0,0,0,2975,
        2976,1,0,0,0,2976,429,1,0,0,0,2977,2980,3,434,217,0,2978,2980,3,
        432,216,0,2979,2977,1,0,0,0,2979,2978,1,0,0,0,2980,431,1,0,0,0,2981,
        2982,5,252,0,0,2982,2983,7,22,0,0,2983,433,1,0,0,0,2984,2985,5,162,
        0,0,2985,2986,5,176,0,0,2986,2987,3,436,218,0,2987,435,1,0,0,0,2988,
        2989,5,302,0,0,2989,437,1,0,0,0,2990,2992,5,48,0,0,2991,2993,5,378,
        0,0,2992,2991,1,0,0,0,2992,2993,1,0,0,0,2993,439,1,0,0,0,2994,2996,
        5,280,0,0,2995,2997,5,378,0,0,2996,2995,1,0,0,0,2996,2997,1,0,0,
        0,2997,441,1,0,0,0,2998,2999,5,294,0,0,2999,3000,5,22,0,0,3000,3001,
        3,882,441,0,3001,443,1,0,0,0,3002,3003,5,1,0,0,3003,3005,5,336,0,
        0,3004,3006,5,419,0,0,3005,3004,1,0,0,0,3006,3007,1,0,0,0,3007,3005,
        1,0,0,0,3007,3008,1,0,0,0,3008,445,1,0,0,0,3009,3010,5,1,0,0,3010,
        3012,5,50,0,0,3011,3013,5,419,0,0,3012,3011,1,0,0,0,3013,3014,1,
        0,0,0,3014,3012,1,0,0,0,3014,3015,1,0,0,0,3015,447,1,0,0,0,3016,
        3018,5,196,0,0,3017,3019,5,424,0,0,3018,3017,1,0,0,0,3018,3019,1,
        0,0,0,3019,3020,1,0,0,0,3020,3021,5,160,0,0,3021,3026,3,646,323,
        0,3022,3024,5,17,0,0,3023,3022,1,0,0,0,3023,3024,1,0,0,0,3024,3025,
        1,0,0,0,3025,3027,3,902,451,0,3026,3023,1,0,0,0,3026,3027,1,0,0,
        0,3027,3028,1,0,0,0,3028,3029,5,360,0,0,3029,3030,3,620,310,0,3030,
        3031,5,215,0,0,3031,3032,3,802,401,0,3032,3033,3,450,225,0,3033,
        449,1,0,0,0,3034,3037,3,454,227,0,3035,3037,3,456,228,0,3036,3034,
        1,0,0,0,3036,3035,1,0,0,0,3037,3040,1,0,0,0,3038,3036,1,0,0,0,3038,
        3039,1,0,0,0,3039,3042,1,0,0,0,3040,3038,1,0,0,0,3041,3043,3,452,
        226,0,3042,3041,1,0,0,0,3042,3043,1,0,0,0,3043,451,1,0,0,0,3044,
        3045,5,372,0,0,3045,3046,5,207,0,0,3046,3049,5,194,0,0,3047,3048,
        5,11,0,0,3048,3050,3,802,401,0,3049,3047,1,0,0,0,3049,3050,1,0,0,
        0,3050,3051,1,0,0,0,3051,3052,5,325,0,0,3052,3054,5,156,0,0,3053,
        3055,3,284,142,0,3054,3053,1,0,0,0,3054,3055,1,0,0,0,3055,3056,1,
        0,0,0,3056,3057,5,364,0,0,3057,3058,3,668,334,0,3058,453,1,0,0,0,
        3059,3060,5,372,0,0,3060,3061,5,194,0,0,3061,3062,5,11,0,0,3062,
        3063,3,802,401,0,3063,3064,5,325,0,0,3064,3065,3,458,229,0,3065,
        455,1,0,0,0,3066,3067,5,372,0,0,3067,3068,5,194,0,0,3068,3069,5,
        325,0,0,3069,3070,3,458,229,0,3070,457,1,0,0,0,3071,3072,5,355,0,
        0,3072,3075,3,422,211,0,3073,3075,5,83,0,0,3074,3071,1,0,0,0,3074,
        3073,1,0,0,0,3075,459,1,0,0,0,3076,3077,5,170,0,0,3077,3079,5,249,
        0,0,3078,3080,5,414,0,0,3079,3078,1,0,0,0,3080,3081,1,0,0,0,3081,
        3079,1,0,0,0,3081,3082,1,0,0,0,3082,461,1,0,0,0,3083,3084,5,51,0,
        0,3084,3085,5,394,0,0,3085,3086,5,419,0,0,3086,463,1,0,0,0,3087,
        3088,5,237,0,0,3088,3089,5,414,0,0,3089,465,1,0,0,0,3090,3091,5,
        342,0,0,3091,3092,5,414,0,0,3092,467,1,0,0,0,3093,3094,5,310,0,0,
        3094,3095,5,414,0,0,3095,469,1,0,0,0,3096,3118,5,9,0,0,3097,3098,
        5,319,0,0,3098,3099,3,646,323,0,3099,3100,3,472,236,0,3100,3119,
        1,0,0,0,3101,3102,5,368,0,0,3102,3104,3,646,323,0,3103,3105,5,17,
        0,0,3104,3103,1,0,0,0,3104,3105,1,0,0,0,3105,3106,1,0,0,0,3106,3107,
        3,478,239,0,3107,3119,1,0,0,0,3108,3109,5,195,0,0,3109,3110,5,368,
        0,0,3110,3111,3,646,323,0,3111,3112,3,480,240,0,3112,3119,1,0,0,
        0,3113,3114,3,90,45,0,3114,3115,3,486,243,0,3115,3119,1,0,0,0,3116,
        3117,5,69,0,0,3117,3119,3,578,289,0,3118,3097,1,0,0,0,3118,3101,
        1,0,0,0,3118,3108,1,0,0,0,3118,3113,1,0,0,0,3118,3116,1,0,0,0,3119,
        471,1,0,0,0,3120,3140,3,498,249,0,3121,3140,3,528,264,0,3122,3140,
        3,516,258,0,3123,3140,3,520,260,0,3124,3140,3,522,261,0,3125,3140,
        3,524,262,0,3126,3140,3,530,265,0,3127,3140,3,552,276,0,3128,3140,
        3,554,277,0,3129,3140,3,476,238,0,3130,3140,3,506,253,0,3131,3140,
        3,502,251,0,3132,3140,3,474,237,0,3133,3134,3,886,443,0,3134,3135,
        3,474,237,0,3135,3140,1,0,0,0,3136,3140,3,570,285,0,3137,3140,3,
        572,286,0,3138,3140,3,574,287,0,3139,3120,1,0,0,0,3139,3121,1,0,
        0,0,3139,3122,1,0,0,0,3139,3123,1,0,0,0,3139,3124,1,0,0,0,3139,3125,
        1,0,0,0,3139,3126,1,0,0,0,3139,3127,1,0,0,0,3139,3128,1,0,0,0,3139,
        3129,1,0,0,0,3139,3130,1,0,0,0,3139,3131,1,0,0,0,3139,3132,1,0,0,
        0,3139,3133,1,0,0,0,3139,3136,1,0,0,0,3139,3137,1,0,0,0,3139,3138,
        1,0,0,0,3140,473,1,0,0,0,3141,3156,3,538,269,0,3142,3156,3,550,275,
        0,3143,3156,3,560,280,0,3144,3156,3,534,267,0,3145,3156,3,556,278,
        0,3146,3156,3,562,281,0,3147,3156,3,542,271,0,3148,3156,3,540,270,
        0,3149,3156,3,568,284,0,3150,3156,3,510,255,0,3151,3156,3,512,256,
        0,3152,3156,3,508,254,0,3153,3156,3,500,250,0,3154,3156,3,504,252,
        0,3155,3141,1,0,0,0,3155,3142,1,0,0,0,3155,3143,1,0,0,0,3155,3144,
        1,0,0,0,3155,3145,1,0,0,0,3155,3146,1,0,0,0,3155,3147,1,0,0,0,3155,
        3148,1,0,0,0,3155,3149,1,0,0,0,3155,3150,1,0,0,0,3155,3151,1,0,0,
        0,3155,3152,1,0,0,0,3155,3153,1,0,0,0,3155,3154,1,0,0,0,3156,475,
        1,0,0,0,3157,3158,5,228,0,0,3158,3159,5,45,0,0,3159,3160,5,387,0,
        0,3160,3161,3,336,168,0,3161,3162,5,388,0,0,3162,477,1,0,0,0,3163,
        3169,3,532,266,0,3164,3169,3,498,249,0,3165,3169,3,516,258,0,3166,
        3169,3,528,264,0,3167,3169,3,406,203,0,3168,3163,1,0,0,0,3168,3164,
        1,0,0,0,3168,3165,1,0,0,0,3168,3166,1,0,0,0,3168,3167,1,0,0,0,3169,
        479,1,0,0,0,3170,3173,3,482,241,0,3171,3173,3,484,242,0,3172,3170,
        1,0,0,0,3172,3171,1,0,0,0,3173,481,1,0,0,0,3174,3177,3,46,23,0,3175,
        3177,3,48,24,0,3176,3174,1,0,0,0,3176,3175,1,0,0,0,3177,483,1,0,
        0,0,3178,3179,5,256,0,0,3179,485,1,0,0,0,3180,3185,3,488,244,0,3181,
        3185,3,492,246,0,3182,3185,3,490,245,0,3183,3185,3,494,247,0,3184,
        3180,1,0,0,0,3184,3181,1,0,0,0,3184,3182,1,0,0,0,3184,3183,1,0,0,
        0,3185,487,1,0,0,0,3186,3187,3,902,451,0,3187,3188,5,294,0,0,3188,
        3189,5,75,0,0,3189,3190,3,60,30,0,3190,489,1,0,0,0,3191,3192,5,294,
        0,0,3192,3197,3,902,451,0,3193,3194,5,385,0,0,3194,3196,3,902,451,
        0,3195,3193,1,0,0,0,3196,3199,1,0,0,0,3197,3195,1,0,0,0,3197,3198,
        1,0,0,0,3198,3200,1,0,0,0,3199,3197,1,0,0,0,3200,3201,5,394,0,0,
        3201,3202,3,902,451,0,3202,491,1,0,0,0,3203,3204,3,902,451,0,3204,
        3205,5,294,0,0,3205,3206,5,227,0,0,3206,3207,3,146,73,0,3207,493,
        1,0,0,0,3208,3209,3,902,451,0,3209,3210,5,294,0,0,3210,3211,7,23,
        0,0,3211,3212,5,414,0,0,3212,495,1,0,0,0,3213,3214,3,902,451,0,3214,
        3215,5,294,0,0,3215,3216,5,189,0,0,3216,3217,5,414,0,0,3217,497,
        1,0,0,0,3218,3219,5,265,0,0,3219,3220,5,331,0,0,3220,3221,3,646,
        323,0,3221,499,1,0,0,0,3222,3225,5,4,0,0,3223,3225,5,269,0,0,3224,
        3222,1,0,0,0,3224,3223,1,0,0,0,3225,3226,1,0,0,0,3226,3227,5,46,
        0,0,3227,3228,5,387,0,0,3228,3229,3,270,135,0,3229,3231,5,388,0,
        0,3230,3232,3,40,20,0,3231,3230,1,0,0,0,3231,3232,1,0,0,0,3232,501,
        1,0,0,0,3233,3236,5,4,0,0,3234,3237,3,308,154,0,3235,3237,3,298,
        149,0,3236,3234,1,0,0,0,3236,3235,1,0,0,0,3237,503,1,0,0,0,3238,
        3239,5,355,0,0,3239,3241,5,46,0,0,3240,3242,3,40,20,0,3241,3240,
        1,0,0,0,3241,3242,1,0,0,0,3242,505,1,0,0,0,3243,3244,5,98,0,0,3244,
        3245,5,55,0,0,3245,3246,3,902,451,0,3246,507,1,0,0,0,3247,3249,5,
        38,0,0,3248,3250,5,45,0,0,3249,3248,1,0,0,0,3249,3250,1,0,0,0,3250,
        3251,1,0,0,0,3251,3252,3,902,451,0,3252,3253,3,902,451,0,3253,3255,
        3,368,184,0,3254,3256,3,350,175,0,3255,3254,1,0,0,0,3255,3256,1,
        0,0,0,3256,3259,1,0,0,0,3257,3258,5,47,0,0,3258,3260,5,414,0,0,3259,
        3257,1,0,0,0,3259,3260,1,0,0,0,3260,3262,1,0,0,0,3261,3263,3,514,
        257,0,3262,3261,1,0,0,0,3262,3263,1,0,0,0,3263,3265,1,0,0,0,3264,
        3266,3,40,20,0,3265,3264,1,0,0,0,3265,3266,1,0,0,0,3266,509,1,0,
        0,0,3267,3268,5,355,0,0,3268,3269,5,309,0,0,3269,3271,5,129,0,0,
        3270,3272,5,45,0,0,3271,3270,1,0,0,0,3271,3272,1,0,0,0,3272,3273,
        1,0,0,0,3273,3274,3,902,451,0,3274,3275,5,294,0,0,3275,3278,3,248,
        124,0,3276,3277,5,47,0,0,3277,3279,5,414,0,0,3278,3276,1,0,0,0,3278,
        3279,1,0,0,0,3279,511,1,0,0,0,3280,3281,5,355,0,0,3281,3282,5,309,
        0,0,3282,3283,5,294,0,0,3283,3284,3,248,124,0,3284,513,1,0,0,0,3285,
        3289,5,125,0,0,3286,3287,5,6,0,0,3287,3289,3,902,451,0,3288,3285,
        1,0,0,0,3288,3286,1,0,0,0,3289,515,1,0,0,0,3290,3292,5,4,0,0,3291,
        3293,3,42,21,0,3292,3291,1,0,0,0,3292,3293,1,0,0,0,3293,3295,1,0,
        0,0,3294,3296,3,518,259,0,3295,3294,1,0,0,0,3296,3297,1,0,0,0,3297,
        3295,1,0,0,0,3297,3298,1,0,0,0,3298,517,1,0,0,0,3299,3301,3,886,
        443,0,3300,3302,3,526,263,0,3301,3300,1,0,0,0,3301,3302,1,0,0,0,
        3302,519,1,0,0,0,3303,3307,5,332,0,0,3304,3306,3,886,443,0,3305,
        3304,1,0,0,0,3306,3309,1,0,0,0,3307,3305,1,0,0,0,3307,3308,1,0,0,
        0,3308,521,1,0,0,0,3309,3307,1,0,0,0,3310,3314,5,15,0,0,3311,3313,
        3,886,443,0,3312,3311,1,0,0,0,3313,3316,1,0,0,0,3314,3312,1,0,0,
        0,3314,3315,1,0,0,0,3315,523,1,0,0,0,3316,3314,1,0,0,0,3317,3321,
        5,343,0,0,3318,3320,3,886,443,0,3319,3318,1,0,0,0,3320,3323,1,0,
        0,0,3321,3319,1,0,0,0,3321,3322,1,0,0,0,3322,525,1,0,0,0,3323,3321,
        1,0,0,0,3324,3325,5,182,0,0,3325,3326,5,414,0,0,3326,527,1,0,0,0,
        3327,3329,5,98,0,0,3328,3330,3,38,19,0,3329,3328,1,0,0,0,3329,3330,
        1,0,0,0,3330,3331,1,0,0,0,3331,3332,5,228,0,0,3332,3338,3,890,445,
        0,3333,3334,5,385,0,0,3334,3335,5,228,0,0,3335,3337,3,890,445,0,
        3336,3333,1,0,0,0,3337,3340,1,0,0,0,3338,3336,1,0,0,0,3338,3339,
        1,0,0,0,3339,3342,1,0,0,0,3340,3338,1,0,0,0,3341,3343,5,246,0,0,
        3342,3341,1,0,0,0,3342,3343,1,0,0,0,3343,3345,1,0,0,0,3344,3346,
        3,16,8,0,3345,3344,1,0,0,0,3345,3346,1,0,0,0,3346,529,1,0,0,0,3347,
        3348,5,294,0,0,3348,3349,5,322,0,0,3349,3357,3,248,124,0,3350,3351,
        5,353,0,0,3351,3353,5,322,0,0,3352,3354,3,38,19,0,3353,3352,1,0,
        0,0,3353,3354,1,0,0,0,3354,3355,1,0,0,0,3355,3357,3,248,124,0,3356,
        3347,1,0,0,0,3356,3350,1,0,0,0,3357,531,1,0,0,0,3358,3359,5,294,
        0,0,3359,3360,5,322,0,0,3360,3368,3,248,124,0,3361,3362,5,353,0,
        0,3362,3364,5,322,0,0,3363,3365,3,38,19,0,3364,3363,1,0,0,0,3364,
        3365,1,0,0,0,3365,3366,1,0,0,0,3366,3368,3,248,124,0,3367,3358,1,
        0,0,0,3367,3361,1,0,0,0,3368,533,1,0,0,0,3369,3379,5,294,0,0,3370,
        3371,5,291,0,0,3371,3375,5,414,0,0,3372,3373,5,376,0,0,3373,3374,
        5,292,0,0,3374,3376,3,248,124,0,3375,3372,1,0,0,0,3375,3376,1,0,
        0,0,3376,3380,1,0,0,0,3377,3378,5,292,0,0,3378,3380,3,248,124,0,
        3379,3370,1,0,0,0,3379,3377,1,0,0,0,3380,3385,1,0,0,0,3381,3382,
        5,353,0,0,3382,3383,5,292,0,0,3383,3385,3,248,124,0,3384,3369,1,
        0,0,0,3384,3381,1,0,0,0,3385,535,1,0,0,0,3386,3388,3,646,323,0,3387,
        3389,3,886,443,0,3388,3387,1,0,0,0,3388,3389,1,0,0,0,3389,537,1,
        0,0,0,3390,3391,5,294,0,0,3391,3392,5,124,0,0,3392,3393,3,576,288,
        0,3393,539,1,0,0,0,3394,3395,5,207,0,0,3395,3398,7,24,0,0,3396,3398,
        3,228,114,0,3397,3394,1,0,0,0,3397,3396,1,0,0,0,3398,541,1,0,0,0,
        3399,3400,5,294,0,0,3400,3401,5,300,0,0,3401,3402,5,182,0,0,3402,
        3403,3,544,272,0,3403,543,1,0,0,0,3404,3405,5,387,0,0,3405,3406,
        3,546,273,0,3406,3407,5,388,0,0,3407,545,1,0,0,0,3408,3413,3,548,
        274,0,3409,3410,5,385,0,0,3410,3412,3,548,274,0,3411,3409,1,0,0,
        0,3412,3415,1,0,0,0,3413,3411,1,0,0,0,3413,3414,1,0,0,0,3414,547,
        1,0,0,0,3415,3413,1,0,0,0,3416,3417,3,320,160,0,3417,3418,5,394,
        0,0,3418,3419,5,414,0,0,3419,549,1,0,0,0,3420,3421,5,294,0,0,3421,
        3422,5,182,0,0,3422,3423,5,414,0,0,3423,551,1,0,0,0,3424,3431,3,
        232,116,0,3425,3428,5,207,0,0,3426,3429,5,300,0,0,3427,3429,3,50,
        25,0,3428,3426,1,0,0,0,3428,3427,1,0,0,0,3429,3431,1,0,0,0,3430,
        3424,1,0,0,0,3430,3425,1,0,0,0,3431,553,1,0,0,0,3432,3433,5,108,
        0,0,3433,3434,3,886,443,0,3434,3435,5,376,0,0,3435,3436,5,319,0,
        0,3436,3437,3,646,323,0,3437,555,1,0,0,0,3438,3439,5,265,0,0,3439,
        3440,5,331,0,0,3440,3441,3,886,443,0,3441,557,1,0,0,0,3442,3443,
        5,355,0,0,3443,3444,5,309,0,0,3444,3446,5,129,0,0,3445,3447,5,45,
        0,0,3446,3445,1,0,0,0,3446,3447,1,0,0,0,3447,3448,1,0,0,0,3448,3449,
        3,902,451,0,3449,3450,5,294,0,0,3450,3453,3,248,124,0,3451,3452,
        5,47,0,0,3452,3454,5,414,0,0,3453,3451,1,0,0,0,3453,3454,1,0,0,0,
        3454,559,1,0,0,0,3455,3456,5,53,0,0,3456,561,1,0,0,0,3457,3458,5,
        160,0,0,3458,3459,5,419,0,0,3459,3460,5,31,0,0,3460,563,1,0,0,0,
        3461,3462,5,11,0,0,3462,3463,5,370,0,0,3463,565,1,0,0,0,3464,3465,
        5,237,0,0,3465,3466,5,414,0,0,3466,567,1,0,0,0,3467,3468,5,49,0,
        0,3468,3470,5,414,0,0,3469,3471,3,230,115,0,3470,3469,1,0,0,0,3470,
        3471,1,0,0,0,3471,3473,1,0,0,0,3472,3474,3,564,282,0,3473,3472,1,
        0,0,0,3473,3474,1,0,0,0,3474,3476,1,0,0,0,3475,3477,3,566,283,0,
        3476,3475,1,0,0,0,3476,3477,1,0,0,0,3477,3482,1,0,0,0,3478,3479,
        5,376,0,0,3479,3480,5,226,0,0,3480,3481,5,322,0,0,3481,3483,3,248,
        124,0,3482,3478,1,0,0,0,3482,3483,1,0,0,0,3483,569,1,0,0,0,3484,
        3485,5,294,0,0,3485,3486,5,227,0,0,3486,3487,3,146,73,0,3487,571,
        1,0,0,0,3488,3489,5,294,0,0,3489,3490,5,228,0,0,3490,3491,5,306,
        0,0,3491,3492,5,387,0,0,3492,3493,3,222,111,0,3493,3494,5,388,0,
        0,3494,573,1,0,0,0,3495,3505,5,110,0,0,3496,3497,5,280,0,0,3497,
        3498,5,387,0,0,3498,3506,7,25,0,0,3499,3500,5,113,0,0,3500,3501,
        5,387,0,0,3501,3506,5,414,0,0,3502,3503,5,296,0,0,3503,3504,5,387,
        0,0,3504,3506,5,419,0,0,3505,3496,1,0,0,0,3505,3499,1,0,0,0,3505,
        3502,1,0,0,0,3506,3507,1,0,0,0,3507,3508,5,388,0,0,3508,575,1,0,
        0,0,3509,3510,5,155,0,0,3510,3511,5,414,0,0,3511,3512,5,224,0,0,
        3512,3513,5,414,0,0,3513,3514,5,291,0,0,3514,3519,5,414,0,0,3515,
        3516,5,154,0,0,3516,3517,5,414,0,0,3517,3518,5,223,0,0,3518,3520,
        5,414,0,0,3519,3515,1,0,0,0,3519,3520,1,0,0,0,3520,3523,1,0,0,0,
        3521,3523,3,902,451,0,3522,3509,1,0,0,0,3522,3521,1,0,0,0,3523,577,
        1,0,0,0,3524,3528,3,580,290,0,3525,3528,3,582,291,0,3526,3528,3,
        584,292,0,3527,3524,1,0,0,0,3527,3525,1,0,0,0,3527,3526,1,0,0,0,
        3528,579,1,0,0,0,3529,3530,3,902,451,0,3530,3531,5,294,0,0,3531,
        3532,5,76,0,0,3532,3533,3,598,299,0,3533,581,1,0,0,0,3534,3535,3,
        902,451,0,3535,3536,5,294,0,0,3536,3537,5,227,0,0,3537,3538,3,146,
        73,0,3538,583,1,0,0,0,3539,3540,3,902,451,0,3540,3541,5,294,0,0,
        3541,3542,5,357,0,0,3542,3543,5,414,0,0,3543,585,1,0,0,0,3544,3545,
        5,177,0,0,3545,3554,5,123,0,0,3546,3547,5,177,0,0,3547,3548,5,123,
        0,0,3548,3549,3,902,451,0,3549,3550,5,414,0,0,3550,3554,1,0,0,0,
        3551,3552,5,177,0,0,3552,3554,3,646,323,0,3553,3544,1,0,0,0,3553,
        3546,1,0,0,0,3553,3551,1,0,0,0,3554,587,1,0,0,0,3555,3557,5,58,0,
        0,3556,3558,5,323,0,0,3557,3556,1,0,0,0,3557,3558,1,0,0,0,3558,3560,
        1,0,0,0,3559,3561,5,335,0,0,3560,3559,1,0,0,0,3560,3561,1,0,0,0,
        3561,3563,1,0,0,0,3562,3564,5,118,0,0,3563,3562,1,0,0,0,3563,3564,
        1,0,0,0,3564,3565,1,0,0,0,3565,3567,5,319,0,0,3566,3568,3,42,21,
        0,3567,3566,1,0,0,0,3567,3568,1,0,0,0,3568,3569,1,0,0,0,3569,3623,
        3,646,323,0,3570,3572,3,586,293,0,3571,3573,3,216,108,0,3572,3571,
        1,0,0,0,3572,3573,1,0,0,0,3573,3575,1,0,0,0,3574,3576,3,244,122,
        0,3575,3574,1,0,0,0,3575,3576,1,0,0,0,3576,3578,1,0,0,0,3577,3579,
        3,266,133,0,3578,3577,1,0,0,0,3578,3579,1,0,0,0,3579,3581,1,0,0,
        0,3580,3582,3,268,134,0,3581,3580,1,0,0,0,3581,3582,1,0,0,0,3582,
        3584,1,0,0,0,3583,3585,3,246,123,0,3584,3583,1,0,0,0,3584,3585,1,
        0,0,0,3585,3624,1,0,0,0,3586,3587,5,387,0,0,3587,3588,3,272,136,
        0,3588,3589,5,388,0,0,3589,3591,1,0,0,0,3590,3586,1,0,0,0,3590,3591,
        1,0,0,0,3591,3593,1,0,0,0,3592,3594,3,214,107,0,3593,3592,1,0,0,
        0,3593,3594,1,0,0,0,3594,3596,1,0,0,0,3595,3597,3,212,106,0,3596,
        3595,1,0,0,0,3596,3597,1,0,0,0,3597,3599,1,0,0,0,3598,3600,3,216,
        108,0,3599,3598,1,0,0,0,3599,3600,1,0,0,0,3600,3602,1,0,0,0,3601,
        3603,3,228,114,0,3602,3601,1,0,0,0,3602,3603,1,0,0,0,3603,3605,1,
        0,0,0,3604,3606,3,232,116,0,3605,3604,1,0,0,0,3605,3606,1,0,0,0,
        3606,3608,1,0,0,0,3607,3609,3,244,122,0,3608,3607,1,0,0,0,3608,3609,
        1,0,0,0,3609,3611,1,0,0,0,3610,3612,3,266,133,0,3611,3610,1,0,0,
        0,3611,3612,1,0,0,0,3612,3614,1,0,0,0,3613,3615,3,268,134,0,3614,
        3613,1,0,0,0,3614,3615,1,0,0,0,3615,3617,1,0,0,0,3616,3618,3,246,
        123,0,3617,3616,1,0,0,0,3617,3618,1,0,0,0,3618,3621,1,0,0,0,3619,
        3620,5,17,0,0,3620,3622,3,406,203,0,3621,3619,1,0,0,0,3621,3622,
        1,0,0,0,3622,3624,1,0,0,0,3623,3570,1,0,0,0,3623,3590,1,0,0,0,3624,
        3685,1,0,0,0,3625,3626,5,58,0,0,3626,3627,5,188,0,0,3627,3629,5,
        319,0,0,3628,3630,3,42,21,0,3629,3628,1,0,0,0,3629,3630,1,0,0,0,
        3630,3631,1,0,0,0,3631,3682,3,646,323,0,3632,3634,3,586,293,0,3633,
        3635,3,244,122,0,3634,3633,1,0,0,0,3634,3635,1,0,0,0,3635,3637,1,
        0,0,0,3636,3638,3,266,133,0,3637,3636,1,0,0,0,3637,3638,1,0,0,0,
        3638,3640,1,0,0,0,3639,3641,3,268,134,0,3640,3639,1,0,0,0,3640,3641,
        1,0,0,0,3641,3643,1,0,0,0,3642,3644,3,246,123,0,3643,3642,1,0,0,
        0,3643,3644,1,0,0,0,3644,3683,1,0,0,0,3645,3646,5,387,0,0,3646,3647,
        3,272,136,0,3647,3648,5,388,0,0,3648,3650,1,0,0,0,3649,3645,1,0,
        0,0,3649,3650,1,0,0,0,3650,3652,1,0,0,0,3651,3653,3,214,107,0,3652,
        3651,1,0,0,0,3652,3653,1,0,0,0,3653,3655,1,0,0,0,3654,3656,3,212,
        106,0,3655,3654,1,0,0,0,3655,3656,1,0,0,0,3656,3658,1,0,0,0,3657,
        3659,3,216,108,0,3658,3657,1,0,0,0,3658,3659,1,0,0,0,3659,3661,1,
        0,0,0,3660,3662,3,228,114,0,3661,3660,1,0,0,0,3661,3662,1,0,0,0,
        3662,3664,1,0,0,0,3663,3665,3,232,116,0,3664,3663,1,0,0,0,3664,3665,
        1,0,0,0,3665,3667,1,0,0,0,3666,3668,3,244,122,0,3667,3666,1,0,0,
        0,3667,3668,1,0,0,0,3668,3670,1,0,0,0,3669,3671,3,266,133,0,3670,
        3669,1,0,0,0,3670,3671,1,0,0,0,3671,3673,1,0,0,0,3672,3674,3,268,
        134,0,3673,3672,1,0,0,0,3673,3674,1,0,0,0,3674,3676,1,0,0,0,3675,
        3677,3,246,123,0,3676,3675,1,0,0,0,3676,3677,1,0,0,0,3677,3680,1,
        0,0,0,3678,3679,5,17,0,0,3679,3681,3,406,203,0,3680,3678,1,0,0,0,
        3680,3681,1,0,0,0,3681,3683,1,0,0,0,3682,3632,1,0,0,0,3682,3649,
        1,0,0,0,3683,3685,1,0,0,0,3684,3555,1,0,0,0,3684,3625,1,0,0,0,3685,
        589,1,0,0,0,3686,3687,5,58,0,0,3687,3689,5,69,0,0,3688,3690,3,42,
        21,0,3689,3688,1,0,0,0,3689,3690,1,0,0,0,3690,3691,1,0,0,0,3691,
        3692,3,902,451,0,3692,3693,3,596,298,0,3693,3695,3,594,297,0,3694,
        3696,3,592,296,0,3695,3694,1,0,0,0,3695,3696,1,0,0,0,3696,3700,1,
        0,0,0,3697,3698,5,376,0,0,3698,3699,5,76,0,0,3699,3701,3,598,299,
        0,3700,3697,1,0,0,0,3700,3701,1,0,0,0,3701,591,1,0,0,0,3702,3703,
        5,47,0,0,3703,3704,5,414,0,0,3704,593,1,0,0,0,3705,3706,5,357,0,
        0,3706,3707,5,414,0,0,3707,595,1,0,0,0,3708,3709,5,342,0,0,3709,
        3710,5,414,0,0,3710,597,1,0,0,0,3711,3712,5,387,0,0,3712,3713,3,
        62,31,0,3713,3714,5,388,0,0,3714,599,1,0,0,0,3715,3716,5,98,0,0,
        3716,3718,5,69,0,0,3717,3719,3,38,19,0,3718,3717,1,0,0,0,3718,3719,
        1,0,0,0,3719,3720,1,0,0,0,3720,3721,3,902,451,0,3721,601,1,0,0,0,
        3722,3728,5,404,0,0,3723,3724,3,646,323,0,3724,3725,5,383,0,0,3725,
        3726,5,404,0,0,3726,3728,1,0,0,0,3727,3722,1,0,0,0,3727,3723,1,0,
        0,0,3728,603,1,0,0,0,3729,3730,3,902,451,0,3730,605,1,0,0,0,3731,
        3732,5,80,0,0,3732,607,1,0,0,0,3733,3738,3,802,401,0,3734,3735,5,
        385,0,0,3735,3737,3,802,401,0,3736,3734,1,0,0,0,3737,3740,1,0,0,
        0,3738,3736,1,0,0,0,3738,3739,1,0,0,0,3739,609,1,0,0,0,3740,3738,
        1,0,0,0,3741,3746,3,902,451,0,3742,3743,5,385,0,0,3743,3745,3,902,
        451,0,3744,3742,1,0,0,0,3745,3748,1,0,0,0,3746,3744,1,0,0,0,3746,
        3747,1,0,0,0,3747,611,1,0,0,0,3748,3746,1,0,0,0,3749,3750,5,134,
        0,0,3750,3751,3,614,307,0,3751,613,1,0,0,0,3752,3753,3,626,313,0,
        3753,3756,3,622,311,0,3754,3755,5,385,0,0,3755,3757,3,622,311,0,
        3756,3754,1,0,0,0,3757,3758,1,0,0,0,3758,3756,1,0,0,0,3758,3759,
        1,0,0,0,3759,3762,1,0,0,0,3760,3762,3,618,309,0,3761,3752,1,0,0,
        0,3761,3760,1,0,0,0,3762,615,1,0,0,0,3763,3767,3,640,320,0,3764,
        3766,3,630,315,0,3765,3764,1,0,0,0,3766,3769,1,0,0,0,3767,3765,1,
        0,0,0,3767,3768,1,0,0,0,3768,3796,1,0,0,0,3769,3767,1,0,0,0,3770,
        3774,3,672,336,0,3771,3773,3,630,315,0,3772,3771,1,0,0,0,3773,3776,
        1,0,0,0,3774,3772,1,0,0,0,3774,3775,1,0,0,0,3775,3796,1,0,0,0,3776,
        3774,1,0,0,0,3777,3781,3,650,325,0,3778,3780,3,630,315,0,3779,3778,
        1,0,0,0,3780,3783,1,0,0,0,3781,3779,1,0,0,0,3781,3782,1,0,0,0,3782,
        3796,1,0,0,0,3783,3781,1,0,0,0,3784,3788,3,656,328,0,3785,3787,3,
        630,315,0,3786,3785,1,0,0,0,3787,3790,1,0,0,0,3788,3786,1,0,0,0,
        3788,3789,1,0,0,0,3789,3796,1,0,0,0,3790,3788,1,0,0,0,3791,3792,
        5,387,0,0,3792,3793,3,618,309,0,3793,3794,5,388,0,0,3794,3796,1,
        0,0,0,3795,3763,1,0,0,0,3795,3770,1,0,0,0,3795,3777,1,0,0,0,3795,
        3784,1,0,0,0,3795,3791,1,0,0,0,3796,617,1,0,0,0,3797,3808,3,616,
        308,0,3798,3799,3,628,314,0,3799,3804,3,620,310,0,3800,3801,5,215,
        0,0,3801,3805,3,802,401,0,3802,3803,5,360,0,0,3803,3805,3,284,142,
        0,3804,3800,1,0,0,0,3804,3802,1,0,0,0,3804,3805,1,0,0,0,3805,3807,
        1,0,0,0,3806,3798,1,0,0,0,3807,3810,1,0,0,0,3808,3806,1,0,0,0,3808,
        3809,1,0,0,0,3809,619,1,0,0,0,3810,3808,1,0,0,0,3811,3816,3,640,
        320,0,3812,3816,3,672,336,0,3813,3816,3,650,325,0,3814,3816,3,656,
        328,0,3815,3811,1,0,0,0,3815,3812,1,0,0,0,3815,3813,1,0,0,0,3815,
        3814,1,0,0,0,3816,3820,1,0,0,0,3817,3819,3,630,315,0,3818,3817,1,
        0,0,0,3819,3822,1,0,0,0,3820,3818,1,0,0,0,3820,3821,1,0,0,0,3821,
        621,1,0,0,0,3822,3820,1,0,0,0,3823,3825,5,241,0,0,3824,3823,1,0,
        0,0,3824,3825,1,0,0,0,3825,3826,1,0,0,0,3826,3827,3,644,322,0,3827,
        3828,3,624,312,0,3828,623,1,0,0,0,3829,3830,5,387,0,0,3830,3831,
        3,608,304,0,3831,3832,5,388,0,0,3832,625,1,0,0,0,3833,3834,5,349,
        0,0,3834,627,1,0,0,0,3835,3850,5,385,0,0,3836,3847,5,152,0,0,3837,
        3847,5,60,0,0,3838,3840,7,26,0,0,3839,3841,5,222,0,0,3840,3839,1,
        0,0,0,3840,3841,1,0,0,0,3841,3847,1,0,0,0,3842,3844,5,174,0,0,3843,
        3845,7,27,0,0,3844,3843,1,0,0,0,3844,3845,1,0,0,0,3845,3847,1,0,
        0,0,3846,3836,1,0,0,0,3846,3837,1,0,0,0,3846,3838,1,0,0,0,3846,3842,
        1,0,0,0,3846,3847,1,0,0,0,3847,3848,1,0,0,0,3848,3850,5,165,0,0,
        3849,3835,1,0,0,0,3849,3846,1,0,0,0,3850,629,1,0,0,0,3851,3852,5,
        172,0,0,3852,3853,5,368,0,0,3853,3854,5,222,0,0,3854,3855,3,758,
        379,0,3855,3865,3,632,316,0,3856,3857,5,17,0,0,3857,3862,3,902,451,
        0,3858,3859,5,385,0,0,3859,3861,3,902,451,0,3860,3858,1,0,0,0,3861,
        3864,1,0,0,0,3862,3860,1,0,0,0,3862,3863,1,0,0,0,3863,3866,1,0,0,
        0,3864,3862,1,0,0,0,3865,3856,1,0,0,0,3865,3866,1,0,0,0,3866,3909,
        1,0,0,0,3867,3869,5,385,0,0,3868,3867,1,0,0,0,3868,3869,1,0,0,0,
        3869,3870,1,0,0,0,3870,3906,5,172,0,0,3871,3872,5,368,0,0,3872,3873,
        3,758,379,0,3873,3883,3,632,316,0,3874,3875,5,17,0,0,3875,3880,3,
        902,451,0,3876,3877,5,385,0,0,3877,3879,3,902,451,0,3878,3876,1,
        0,0,0,3879,3882,1,0,0,0,3880,3878,1,0,0,0,3880,3881,1,0,0,0,3881,
        3884,1,0,0,0,3882,3880,1,0,0,0,3883,3874,1,0,0,0,3883,3884,1,0,0,
        0,3884,3907,1,0,0,0,3885,3886,5,319,0,0,3886,3887,5,387,0,0,3887,
        3888,3,664,332,0,3888,3890,5,388,0,0,3889,3891,5,17,0,0,3890,3889,
        1,0,0,0,3890,3891,1,0,0,0,3891,3892,1,0,0,0,3892,3904,3,632,316,
        0,3893,3894,5,387,0,0,3894,3899,3,902,451,0,3895,3896,5,385,0,0,
        3896,3898,3,902,451,0,3897,3895,1,0,0,0,3898,3901,1,0,0,0,3899,3897,
        1,0,0,0,3899,3900,1,0,0,0,3900,3902,1,0,0,0,3901,3899,1,0,0,0,3902,
        3903,5,388,0,0,3903,3905,1,0,0,0,3904,3893,1,0,0,0,3904,3905,1,0,
        0,0,3905,3907,1,0,0,0,3906,3871,1,0,0,0,3906,3885,1,0,0,0,3907,3909,
        1,0,0,0,3908,3851,1,0,0,0,3908,3868,1,0,0,0,3909,631,1,0,0,0,3910,
        3911,3,902,451,0,3911,633,1,0,0,0,3912,3913,5,321,0,0,3913,3914,
        5,387,0,0,3914,3915,5,30,0,0,3915,3916,5,419,0,0,3916,3917,5,221,
        0,0,3917,3918,5,212,0,0,3918,3928,5,419,0,0,3919,3920,5,215,0,0,
        3920,3925,3,802,401,0,3921,3922,5,385,0,0,3922,3924,3,802,401,0,
        3923,3921,1,0,0,0,3924,3927,1,0,0,0,3925,3923,1,0,0,0,3925,3926,
        1,0,0,0,3926,3929,1,0,0,0,3927,3925,1,0,0,0,3928,3919,1,0,0,0,3928,
        3929,1,0,0,0,3929,3930,1,0,0,0,3930,3931,5,388,0,0,3931,635,1,0,
        0,0,3932,3933,5,321,0,0,3933,3937,5,387,0,0,3934,3935,5,419,0,0,
        3935,3938,7,28,0,0,3936,3938,5,418,0,0,3937,3934,1,0,0,0,3937,3936,
        1,0,0,0,3938,3939,1,0,0,0,3939,3940,5,388,0,0,3940,637,1,0,0,0,3941,
        3944,3,634,317,0,3942,3944,3,636,318,0,3943,3941,1,0,0,0,3943,3942,
        1,0,0,0,3944,639,1,0,0,0,3945,3947,3,646,323,0,3946,3948,3,248,124,
        0,3947,3946,1,0,0,0,3947,3948,1,0,0,0,3948,3950,1,0,0,0,3949,3951,
        3,638,319,0,3950,3949,1,0,0,0,3950,3951,1,0,0,0,3951,3953,1,0,0,
        0,3952,3954,3,642,321,0,3953,3952,1,0,0,0,3953,3954,1,0,0,0,3954,
        3959,1,0,0,0,3955,3957,5,17,0,0,3956,3955,1,0,0,0,3956,3957,1,0,
        0,0,3957,3958,1,0,0,0,3958,3960,3,902,451,0,3959,3956,1,0,0,0,3959,
        3960,1,0,0,0,3960,641,1,0,0,0,3961,3971,5,129,0,0,3962,3963,5,317,
        0,0,3963,3964,5,17,0,0,3964,3965,5,212,0,0,3965,3972,3,802,401,0,
        3966,3967,5,129,0,0,3967,3968,5,318,0,0,3968,3969,5,17,0,0,3969,
        3970,5,212,0,0,3970,3972,5,419,0,0,3971,3962,1,0,0,0,3971,3966,1,
        0,0,0,3972,643,1,0,0,0,3973,3975,3,646,323,0,3974,3976,3,638,319,
        0,3975,3974,1,0,0,0,3975,3976,1,0,0,0,3976,3981,1,0,0,0,3977,3979,
        5,17,0,0,3978,3977,1,0,0,0,3978,3979,1,0,0,0,3979,3980,1,0,0,0,3980,
        3982,3,902,451,0,3981,3978,1,0,0,0,3981,3982,1,0,0,0,3982,645,1,
        0,0,0,3983,3984,3,902,451,0,3984,3985,5,383,0,0,3985,3988,3,902,
        451,0,3986,3987,5,383,0,0,3987,3989,3,902,451,0,3988,3986,1,0,0,
        0,3988,3989,1,0,0,0,3989,3992,1,0,0,0,3990,3992,3,902,451,0,3991,
        3983,1,0,0,0,3991,3990,1,0,0,0,3992,647,1,0,0,0,3993,3994,3,902,
        451,0,3994,3995,5,383,0,0,3995,3997,1,0,0,0,3996,3993,1,0,0,0,3996,
        3997,1,0,0,0,3997,3998,1,0,0,0,3998,3999,3,902,451,0,3999,649,1,
        0,0,0,4000,4001,5,387,0,0,4001,4002,3,386,193,0,4002,4004,5,388,
        0,0,4003,4005,5,17,0,0,4004,4003,1,0,0,0,4004,4005,1,0,0,0,4005,
        4006,1,0,0,0,4006,4007,3,902,451,0,4007,651,1,0,0,0,4008,4010,3,
        750,375,0,4009,4011,3,746,373,0,4010,4009,1,0,0,0,4010,4011,1,0,
        0,0,4011,4020,1,0,0,0,4012,4020,3,746,373,0,4013,4015,3,752,376,
        0,4014,4016,3,754,377,0,4015,4014,1,0,0,0,4015,4016,1,0,0,0,4016,
        4020,1,0,0,0,4017,4020,3,754,377,0,4018,4020,3,748,374,0,4019,4008,
        1,0,0,0,4019,4012,1,0,0,0,4019,4013,1,0,0,0,4019,4017,1,0,0,0,4019,
        4018,1,0,0,0,4020,653,1,0,0,0,4021,4025,3,650,325,0,4022,4025,3,
        640,320,0,4023,4025,3,656,328,0,4024,4021,1,0,0,0,4024,4022,1,0,
        0,0,4024,4023,1,0,0,0,4025,655,1,0,0,0,4026,4027,3,902,451,0,4027,
        4028,5,387,0,0,4028,4029,5,215,0,0,4029,4031,3,654,327,0,4030,4032,
        3,652,326,0,4031,4030,1,0,0,0,4031,4032,1,0,0,0,4032,4048,1,0,0,
        0,4033,4034,5,420,0,0,4034,4035,5,387,0,0,4035,4036,3,802,401,0,
        4036,4045,5,388,0,0,4037,4038,5,385,0,0,4038,4039,5,420,0,0,4039,
        4040,5,387,0,0,4040,4041,3,802,401,0,4041,4042,5,388,0,0,4042,4044,
        1,0,0,0,4043,4037,1,0,0,0,4044,4047,1,0,0,0,4045,4043,1,0,0,0,4045,
        4046,1,0,0,0,4046,4049,1,0,0,0,4047,4045,1,0,0,0,4048,4033,1,0,0,
        0,4048,4049,1,0,0,0,4049,4050,1,0,0,0,4050,4052,5,388,0,0,4051,4053,
        3,902,451,0,4052,4051,1,0,0,0,4052,4053,1,0,0,0,4053,657,1,0,0,0,
        4054,4055,5,373,0,0,4055,4056,3,660,330,0,4056,659,1,0,0,0,4057,
        4058,3,802,401,0,4058,661,1,0,0,0,4059,4060,3,664,332,0,4060,663,
        1,0,0,0,4061,4062,5,364,0,0,4062,4063,3,666,333,0,4063,665,1,0,0,
        0,4064,4069,3,668,334,0,4065,4066,5,385,0,0,4066,4068,3,668,334,
        0,4067,4065,1,0,0,0,4068,4071,1,0,0,0,4069,4067,1,0,0,0,4069,4070,
        1,0,0,0,4070,4081,1,0,0,0,4071,4069,1,0,0,0,4072,4077,3,670,335,
        0,4073,4074,5,385,0,0,4074,4076,3,668,334,0,4075,4073,1,0,0,0,4076,
        4079,1,0,0,0,4077,4075,1,0,0,0,4077,4078,1,0,0,0,4078,4081,1,0,0,
        0,4079,4077,1,0,0,0,4080,4064,1,0,0,0,4080,4072,1,0,0,0,4081,667,
        1,0,0,0,4082,4083,3,728,364,0,4083,669,1,0,0,0,4084,4085,5,387,0,
        0,4085,4086,3,736,368,0,4086,4087,5,388,0,0,4087,671,1,0,0,0,4088,
        4089,5,319,0,0,4089,4090,5,387,0,0,4090,4091,3,664,332,0,4091,4093,
        5,388,0,0,4092,4094,5,17,0,0,4093,4092,1,0,0,0,4093,4094,1,0,0,0,
        4094,4095,1,0,0,0,4095,4105,3,632,316,0,4096,4097,5,387,0,0,4097,
        4102,3,902,451,0,4098,4099,5,385,0,0,4099,4101,3,902,451,0,4100,
        4098,1,0,0,0,4101,4104,1,0,0,0,4102,4100,1,0,0,0,4102,4103,1,0,0,
        0,4103,4106,1,0,0,0,4104,4102,1,0,0,0,4105,4096,1,0,0,0,4105,4106,
        1,0,0,0,4106,4107,1,0,0,0,4107,4108,5,388,0,0,4108,673,1,0,0,0,4109,
        4111,5,289,0,0,4110,4112,5,424,0,0,4111,4110,1,0,0,0,4111,4112,1,
        0,0,0,4112,4119,1,0,0,0,4113,4115,3,676,338,0,4114,4113,1,0,0,0,
        4114,4115,1,0,0,0,4115,4116,1,0,0,0,4116,4120,3,678,339,0,4117,4118,
        5,337,0,0,4118,4120,3,680,340,0,4119,4114,1,0,0,0,4119,4117,1,0,
        0,0,4120,4123,1,0,0,0,4121,4123,3,684,342,0,4122,4109,1,0,0,0,4122,
        4121,1,0,0,0,4123,675,1,0,0,0,4124,4125,7,21,0,0,4125,677,1,0,0,
        0,4126,4131,3,682,341,0,4127,4128,5,385,0,0,4128,4130,3,682,341,
        0,4129,4127,1,0,0,0,4130,4133,1,0,0,0,4131,4129,1,0,0,0,4131,4132,
        1,0,0,0,4132,679,1,0,0,0,4133,4131,1,0,0,0,4134,4135,5,387,0,0,4135,
        4136,3,688,344,0,4136,4137,5,388,0,0,4137,4138,3,234,117,0,4138,
        4139,3,238,119,0,4139,4140,5,360,0,0,4140,4153,5,414,0,0,4141,4151,
        5,17,0,0,4142,4145,5,387,0,0,4143,4146,3,610,305,0,4144,4146,3,270,
        135,0,4145,4143,1,0,0,0,4145,4144,1,0,0,0,4146,4147,1,0,0,0,4147,
        4148,5,388,0,0,4148,4152,1,0,0,0,4149,4152,3,610,305,0,4150,4152,
        3,270,135,0,4151,4142,1,0,0,0,4151,4149,1,0,0,0,4151,4150,1,0,0,
        0,4152,4154,1,0,0,0,4153,4141,1,0,0,0,4153,4154,1,0,0,0,4154,4155,
        1,0,0,0,4155,4156,3,234,117,0,4156,4157,3,236,118,0,4157,681,1,0,
        0,0,4158,4179,3,602,301,0,4159,4176,3,802,401,0,4160,4162,5,17,0,
        0,4161,4160,1,0,0,0,4161,4162,1,0,0,0,4162,4163,1,0,0,0,4163,4177,
        3,902,451,0,4164,4165,5,17,0,0,4165,4166,5,387,0,0,4166,4171,3,902,
        451,0,4167,4168,5,385,0,0,4168,4170,3,902,451,0,4169,4167,1,0,0,
        0,4170,4173,1,0,0,0,4171,4169,1,0,0,0,4171,4172,1,0,0,0,4172,4174,
        1,0,0,0,4173,4171,1,0,0,0,4174,4175,5,388,0,0,4175,4177,1,0,0,0,
        4176,4161,1,0,0,0,4176,4164,1,0,0,0,4176,4177,1,0,0,0,4177,4179,
        1,0,0,0,4178,4158,1,0,0,0,4178,4159,1,0,0,0,4179,683,1,0,0,0,4180,
        4181,7,29,0,0,4181,4182,3,688,344,0,4182,4183,3,234,117,0,4183,4184,
        3,238,119,0,4184,4185,5,360,0,0,4185,4198,5,414,0,0,4186,4196,5,
        17,0,0,4187,4190,5,387,0,0,4188,4191,3,610,305,0,4189,4191,3,270,
        135,0,4190,4188,1,0,0,0,4190,4189,1,0,0,0,4191,4192,1,0,0,0,4192,
        4193,5,388,0,0,4193,4197,1,0,0,0,4194,4197,3,610,305,0,4195,4197,
        3,270,135,0,4196,4187,1,0,0,0,4196,4194,1,0,0,0,4196,4195,1,0,0,
        0,4197,4199,1,0,0,0,4198,4186,1,0,0,0,4198,4199,1,0,0,0,4199,4200,
        1,0,0,0,4200,4201,3,234,117,0,4201,4202,3,236,118,0,4202,685,1,0,
        0,0,4203,4206,3,602,301,0,4204,4206,3,802,401,0,4205,4203,1,0,0,
        0,4205,4204,1,0,0,0,4206,687,1,0,0,0,4207,4212,3,686,343,0,4208,
        4209,5,385,0,0,4209,4211,3,686,343,0,4210,4208,1,0,0,0,4211,4214,
        1,0,0,0,4212,4210,1,0,0,0,4212,4213,1,0,0,0,4213,689,1,0,0,0,4214,
        4212,1,0,0,0,4215,4216,5,375,0,0,4216,4221,3,692,346,0,4217,4218,
        5,385,0,0,4218,4220,3,692,346,0,4219,4217,1,0,0,0,4220,4223,1,0,
        0,0,4221,4219,1,0,0,0,4221,4222,1,0,0,0,4222,691,1,0,0,0,4223,4221,
        1,0,0,0,4224,4225,3,902,451,0,4225,4226,5,17,0,0,4226,4227,3,694,
        347,0,4227,693,1,0,0,0,4228,4241,3,902,451,0,4229,4231,5,387,0,0,
        4230,4232,3,902,451,0,4231,4230,1,0,0,0,4231,4232,1,0,0,0,4232,4234,
        1,0,0,0,4233,4235,3,652,326,0,4234,4233,1,0,0,0,4234,4235,1,0,0,
        0,4235,4237,1,0,0,0,4236,4238,3,696,348,0,4237,4236,1,0,0,0,4237,
        4238,1,0,0,0,4238,4239,1,0,0,0,4239,4241,5,388,0,0,4240,4228,1,0,
        0,0,4240,4229,1,0,0,0,4241,695,1,0,0,0,4242,4245,3,698,349,0,4243,
        4245,3,700,350,0,4244,4242,1,0,0,0,4244,4243,1,0,0,0,4245,697,1,
        0,0,0,4246,4253,5,283,0,0,4247,4254,3,702,351,0,4248,4249,5,25,0,
        0,4249,4250,3,704,352,0,4250,4251,5,11,0,0,4251,4252,3,704,352,0,
        4252,4254,1,0,0,0,4253,4247,1,0,0,0,4253,4248,1,0,0,0,4254,699,1,
        0,0,0,4255,4262,5,251,0,0,4256,4263,3,702,351,0,4257,4258,5,25,0,
        0,4258,4259,3,704,352,0,4259,4260,5,11,0,0,4260,4261,3,704,352,0,
        4261,4263,1,0,0,0,4262,4256,1,0,0,0,4262,4257,1,0,0,0,4263,701,1,
        0,0,0,4264,4265,5,344,0,0,4265,4271,5,238,0,0,4266,4267,5,62,0,0,
        4267,4271,5,282,0,0,4268,4269,5,419,0,0,4269,4271,5,238,0,0,4270,
        4264,1,0,0,0,4270,4266,1,0,0,0,4270,4268,1,0,0,0,4271,703,1,0,0,
        0,4272,4273,7,30,0,0,4273,4277,7,31,0,0,4274,4275,5,62,0,0,4275,
        4277,5,282,0,0,4276,4272,1,0,0,0,4276,4274,1,0,0,0,4277,705,1,0,
        0,0,4278,4279,5,139,0,0,4279,4280,5,32,0,0,4280,4281,3,708,354,0,
        4281,707,1,0,0,0,4282,4286,3,712,356,0,4283,4286,3,714,357,0,4284,
        4286,3,710,355,0,4285,4282,1,0,0,0,4285,4283,1,0,0,0,4285,4284,1,
        0,0,0,4286,709,1,0,0,0,4287,4288,5,387,0,0,4288,4289,5,388,0,0,4289,
        711,1,0,0,0,4290,4293,5,281,0,0,4291,4293,5,61,0,0,4292,4290,1,0,
        0,0,4292,4291,1,0,0,0,4293,4294,1,0,0,0,4294,4295,5,387,0,0,4295,
        4300,3,802,401,0,4296,4297,5,385,0,0,4297,4299,3,802,401,0,4298,
        4296,1,0,0,0,4299,4302,1,0,0,0,4300,4298,1,0,0,0,4300,4301,1,0,0,
        0,4301,4303,1,0,0,0,4302,4300,1,0,0,0,4303,4304,5,388,0,0,4304,713,
        1,0,0,0,4305,4310,3,730,365,0,4306,4307,5,376,0,0,4307,4311,5,281,
        0,0,4308,4309,5,376,0,0,4309,4311,5,61,0,0,4310,4306,1,0,0,0,4310,
        4308,1,0,0,0,4310,4311,1,0,0,0,4311,4325,1,0,0,0,4312,4313,5,140,
        0,0,4313,4314,5,295,0,0,4314,4315,5,387,0,0,4315,4320,3,716,358,
        0,4316,4317,5,385,0,0,4317,4319,3,716,358,0,4318,4316,1,0,0,0,4319,
        4322,1,0,0,0,4320,4318,1,0,0,0,4320,4321,1,0,0,0,4321,4323,1,0,0,
        0,4322,4320,1,0,0,0,4323,4324,5,388,0,0,4324,4326,1,0,0,0,4325,4312,
        1,0,0,0,4325,4326,1,0,0,0,4326,715,1,0,0,0,4327,4330,3,718,359,0,
        4328,4330,3,720,360,0,4329,4327,1,0,0,0,4329,4328,1,0,0,0,4330,717,
        1,0,0,0,4331,4333,5,387,0,0,4332,4334,3,802,401,0,4333,4332,1,0,
        0,0,4333,4334,1,0,0,0,4334,4339,1,0,0,0,4335,4336,5,385,0,0,4336,
        4338,3,802,401,0,4337,4335,1,0,0,0,4338,4341,1,0,0,0,4339,4337,1,
        0,0,0,4339,4340,1,0,0,0,4340,4342,1,0,0,0,4341,4339,1,0,0,0,4342,
        4343,5,388,0,0,4343,719,1,0,0,0,4344,4345,3,802,401,0,4345,721,1,
        0,0,0,4346,4347,5,141,0,0,4347,4348,3,726,363,0,4348,723,1,0,0,0,
        4349,4350,5,247,0,0,4350,4351,3,802,401,0,4351,725,1,0,0,0,4352,
        4353,3,802,401,0,4353,727,1,0,0,0,4354,4355,5,387,0,0,4355,4356,
        3,730,365,0,4356,4357,5,388,0,0,4357,729,1,0,0,0,4358,4360,3,734,
        367,0,4359,4361,3,732,366,0,4360,4359,1,0,0,0,4360,4361,1,0,0,0,
        4361,731,1,0,0,0,4362,4363,5,385,0,0,4363,4365,3,734,367,0,4364,
        4362,1,0,0,0,4365,4366,1,0,0,0,4366,4364,1,0,0,0,4366,4367,1,0,0,
        0,4367,733,1,0,0,0,4368,4371,3,606,303,0,4369,4371,3,802,401,0,4370,
        4368,1,0,0,0,4370,4369,1,0,0,0,4371,735,1,0,0,0,4372,4374,3,802,
        401,0,4373,4375,5,17,0,0,4374,4373,1,0,0,0,4374,4375,1,0,0,0,4375,
        4377,1,0,0,0,4376,4378,3,902,451,0,4377,4376,1,0,0,0,4377,4378,1,
        0,0,0,4378,4383,1,0,0,0,4379,4380,5,385,0,0,4380,4382,3,738,369,
        0,4381,4379,1,0,0,0,4382,4385,1,0,0,0,4383,4381,1,0,0,0,4383,4384,
        1,0,0,0,4384,737,1,0,0,0,4385,4383,1,0,0,0,4386,4388,3,802,401,0,
        4387,4389,5,17,0,0,4388,4387,1,0,0,0,4388,4389,1,0,0,0,4389,4391,
        1,0,0,0,4390,4392,3,902,451,0,4391,4390,1,0,0,0,4391,4392,1,0,0,
        0,4392,739,1,0,0,0,4393,4396,3,728,364,0,4394,4396,3,730,365,0,4395,
        4393,1,0,0,0,4395,4394,1,0,0,0,4396,741,1,0,0,0,4397,4398,5,387,
        0,0,4398,4403,3,334,167,0,4399,4400,5,385,0,0,4400,4402,3,334,167,
        0,4401,4399,1,0,0,0,4402,4405,1,0,0,0,4403,4401,1,0,0,0,4403,4404,
        1,0,0,0,4404,4406,1,0,0,0,4405,4403,1,0,0,0,4406,4407,5,388,0,0,
        4407,743,1,0,0,0,4408,4413,3,334,167,0,4409,4410,5,385,0,0,4410,
        4412,3,334,167,0,4411,4409,1,0,0,0,4412,4415,1,0,0,0,4413,4411,1,
        0,0,0,4413,4414,1,0,0,0,4414,745,1,0,0,0,4415,4413,1,0,0,0,4416,
        4417,5,220,0,0,4417,4418,5,32,0,0,4418,4423,3,334,167,0,4419,4420,
        5,385,0,0,4420,4422,3,334,167,0,4421,4419,1,0,0,0,4422,4425,1,0,
        0,0,4423,4421,1,0,0,0,4423,4424,1,0,0,0,4424,747,1,0,0,0,4425,4423,
        1,0,0,0,4426,4427,5,41,0,0,4427,4428,5,32,0,0,4428,4429,3,740,370,
        0,4429,749,1,0,0,0,4430,4431,5,228,0,0,4431,4432,5,32,0,0,4432,4433,
        3,740,370,0,4433,751,1,0,0,0,4434,4435,5,93,0,0,4435,4436,5,32,0,
        0,4436,4437,3,740,370,0,4437,753,1,0,0,0,4438,4439,5,304,0,0,4439,
        4442,5,32,0,0,4440,4443,3,742,371,0,4441,4443,3,744,372,0,4442,4440,
        1,0,0,0,4442,4441,1,0,0,0,4443,755,1,0,0,0,4444,4445,5,339,0,0,4445,
        4449,5,387,0,0,4446,4450,5,173,0,0,4447,4450,5,333,0,0,4448,4450,
        5,29,0,0,4449,4446,1,0,0,0,4449,4447,1,0,0,0,4449,4448,1,0,0,0,4449,
        4450,1,0,0,0,4450,4452,1,0,0,0,4451,4453,3,686,343,0,4452,4451,1,
        0,0,0,4452,4453,1,0,0,0,4453,4454,1,0,0,0,4454,4455,5,134,0,0,4455,
        4456,3,686,343,0,4456,4457,5,388,0,0,4457,757,1,0,0,0,4458,4499,
        3,756,378,0,4459,4460,3,762,381,0,4460,4475,5,387,0,0,4461,4476,
        5,404,0,0,4462,4464,3,676,338,0,4463,4462,1,0,0,0,4463,4464,1,0,
        0,0,4464,4473,1,0,0,0,4465,4470,3,686,343,0,4466,4467,5,385,0,0,
        4467,4469,3,686,343,0,4468,4466,1,0,0,0,4469,4472,1,0,0,0,4470,4468,
        1,0,0,0,4470,4471,1,0,0,0,4471,4474,1,0,0,0,4472,4470,1,0,0,0,4473,
        4465,1,0,0,0,4473,4474,1,0,0,0,4474,4476,1,0,0,0,4475,4461,1,0,0,
        0,4475,4463,1,0,0,0,4476,4496,1,0,0,0,4477,4478,5,388,0,0,4478,4479,
        5,377,0,0,4479,4480,5,139,0,0,4480,4481,5,387,0,0,4481,4482,3,746,
        373,0,4482,4483,5,388,0,0,4483,4497,1,0,0,0,4484,4486,5,388,0,0,
        4485,4487,3,760,380,0,4486,4485,1,0,0,0,4486,4487,1,0,0,0,4487,4488,
        1,0,0,0,4488,4489,5,225,0,0,4489,4497,3,694,347,0,4490,4491,3,760,
        380,0,4491,4492,5,388,0,0,4492,4493,5,225,0,0,4493,4494,3,694,347,
        0,4494,4497,1,0,0,0,4495,4497,5,388,0,0,4496,4477,1,0,0,0,4496,4484,
        1,0,0,0,4496,4490,1,0,0,0,4496,4495,1,0,0,0,4497,4499,1,0,0,0,4498,
        4458,1,0,0,0,4498,4459,1,0,0,0,4499,759,1,0,0,0,4500,4501,5,272,
        0,0,4501,4505,5,211,0,0,4502,4503,5,147,0,0,4503,4505,5,211,0,0,
        4504,4500,1,0,0,0,4504,4502,1,0,0,0,4505,761,1,0,0,0,4506,4509,3,
        904,452,0,4507,4509,3,910,455,0,4508,4506,1,0,0,0,4508,4507,1,0,
        0,0,4509,763,1,0,0,0,4510,4511,5,36,0,0,4511,4512,5,387,0,0,4512,
        4513,3,802,401,0,4513,4514,5,17,0,0,4514,4517,3,374,187,0,4515,4516,
        5,132,0,0,4516,4518,5,414,0,0,4517,4515,1,0,0,0,4517,4518,1,0,0,
        0,4518,4519,1,0,0,0,4519,4520,5,388,0,0,4520,765,1,0,0,0,4521,4522,
        5,35,0,0,4522,4528,3,802,401,0,4523,4524,5,372,0,0,4524,4525,3,802,
        401,0,4525,4526,5,325,0,0,4526,4527,3,802,401,0,4527,4529,1,0,0,
        0,4528,4523,1,0,0,0,4529,4530,1,0,0,0,4530,4528,1,0,0,0,4530,4531,
        1,0,0,0,4531,4534,1,0,0,0,4532,4533,5,101,0,0,4533,4535,3,802,401,
        0,4534,4532,1,0,0,0,4534,4535,1,0,0,0,4535,4536,1,0,0,0,4536,4537,
        5,103,0,0,4537,767,1,0,0,0,4538,4544,5,35,0,0,4539,4540,5,372,0,
        0,4540,4541,3,802,401,0,4541,4542,5,325,0,0,4542,4543,3,802,401,
        0,4543,4545,1,0,0,0,4544,4539,1,0,0,0,4545,4546,1,0,0,0,4546,4544,
        1,0,0,0,4546,4547,1,0,0,0,4547,4550,1,0,0,0,4548,4549,5,101,0,0,
        4549,4551,3,802,401,0,4550,4548,1,0,0,0,4550,4551,1,0,0,0,4551,4552,
        1,0,0,0,4552,4553,5,103,0,0,4553,769,1,0,0,0,4554,4555,5,127,0,0,
        4555,4556,5,387,0,0,4556,4559,3,802,401,0,4557,4558,5,331,0,0,4558,
        4560,3,772,386,0,4559,4557,1,0,0,0,4559,4560,1,0,0,0,4560,4561,1,
        0,0,0,4561,4562,5,388,0,0,4562,771,1,0,0,0,4563,4564,7,32,0,0,4564,
        773,1,0,0,0,4565,4566,5,119,0,0,4566,4567,5,387,0,0,4567,4568,3,
        776,388,0,4568,4569,5,134,0,0,4569,4570,3,802,401,0,4570,4571,5,
        388,0,0,4571,775,1,0,0,0,4572,4573,7,33,0,0,4573,777,1,0,0,0,4574,
        4588,3,796,398,0,4575,4588,5,419,0,0,4576,4588,3,788,394,0,4577,
        4588,3,790,395,0,4578,4588,3,792,396,0,4579,4588,5,414,0,0,4580,
        4588,3,784,392,0,4581,4588,5,416,0,0,4582,4588,5,417,0,0,4583,4588,
        3,786,393,0,4584,4588,3,880,440,0,4585,4588,5,210,0,0,4586,4588,
        3,780,390,0,4587,4574,1,0,0,0,4587,4575,1,0,0,0,4587,4576,1,0,0,
        0,4587,4577,1,0,0,0,4587,4578,1,0,0,0,4587,4579,1,0,0,0,4587,4580,
        1,0,0,0,4587,4581,1,0,0,0,4587,4582,1,0,0,0,4587,4583,1,0,0,0,4587,
        4584,1,0,0,0,4587,4585,1,0,0,0,4587,4586,1,0,0,0,4588,779,1,0,0,
        0,4589,4590,3,782,391,0,4590,781,1,0,0,0,4591,4592,5,412,0,0,4592,
        783,1,0,0,0,4593,4595,5,414,0,0,4594,4596,5,414,0,0,4595,4594,1,
        0,0,0,4596,4597,1,0,0,0,4597,4595,1,0,0,0,4597,4598,1,0,0,0,4598,
        785,1,0,0,0,4599,4600,5,421,0,0,4600,4601,5,415,0,0,4601,787,1,0,
        0,0,4602,4603,5,71,0,0,4603,4606,5,414,0,0,4604,4606,5,63,0,0,4605,
        4602,1,0,0,0,4605,4604,1,0,0,0,4606,789,1,0,0,0,4607,4608,5,327,
        0,0,4608,4611,5,414,0,0,4609,4611,5,64,0,0,4610,4607,1,0,0,0,4610,
        4609,1,0,0,0,4611,791,1,0,0,0,4612,4613,5,328,0,0,4613,4614,5,414,
        0,0,4614,793,1,0,0,0,4615,4616,7,25,0,0,4616,795,1,0,0,0,4617,4618,
        3,794,397,0,4618,4619,3,800,400,0,4619,797,1,0,0,0,4620,4621,5,387,
        0,0,4621,4622,3,794,397,0,4622,4623,5,388,0,0,4623,4624,3,800,400,
        0,4624,4636,1,0,0,0,4625,4631,5,159,0,0,4626,4632,3,794,397,0,4627,
        4628,5,387,0,0,4628,4629,3,802,401,0,4629,4630,5,388,0,0,4630,4632,
        1,0,0,0,4631,4626,1,0,0,0,4631,4627,1,0,0,0,4632,4633,1,0,0,0,4633,
        4634,3,800,400,0,4634,4636,1,0,0,0,4635,4620,1,0,0,0,4635,4625,1,
        0,0,0,4636,799,1,0,0,0,4637,4638,5,381,0,0,4638,4639,5,331,0,0,4639,
        4650,5,200,0,0,4640,4641,5,73,0,0,4641,4642,5,331,0,0,4642,4650,
        5,288,0,0,4643,4650,5,381,0,0,4644,4650,5,200,0,0,4645,4650,5,73,
        0,0,4646,4650,5,144,0,0,4647,4650,5,199,0,0,4648,4650,5,288,0,0,
        4649,4637,1,0,0,0,4649,4640,1,0,0,0,4649,4643,1,0,0,0,4649,4644,
        1,0,0,0,4649,4645,1,0,0,0,4649,4646,1,0,0,0,4649,4647,1,0,0,0,4649,
        4648,1,0,0,0,4650,801,1,0,0,0,4651,4652,3,878,439,0,4652,803,1,0,
        0,0,4653,4665,3,778,389,0,4654,4665,3,798,399,0,4655,4665,3,764,
        382,0,4656,4665,3,774,387,0,4657,4665,3,770,385,0,4658,4665,3,766,
        383,0,4659,4665,3,768,384,0,4660,4665,3,840,420,0,4661,4665,3,758,
        379,0,4662,4665,3,604,302,0,4663,4665,3,728,364,0,4664,4653,1,0,
        0,0,4664,4654,1,0,0,0,4664,4655,1,0,0,0,4664,4656,1,0,0,0,4664,4657,
        1,0,0,0,4664,4658,1,0,0,0,4664,4659,1,0,0,0,4664,4660,1,0,0,0,4664,
        4661,1,0,0,0,4664,4662,1,0,0,0,4664,4663,1,0,0,0,4665,805,1,0,0,
        0,4666,4675,3,804,402,0,4667,4668,5,389,0,0,4668,4669,3,802,401,
        0,4669,4670,5,390,0,0,4670,4674,1,0,0,0,4671,4672,5,383,0,0,4672,
        4674,3,902,451,0,4673,4667,1,0,0,0,4673,4671,1,0,0,0,4674,4677,1,
        0,0,0,4675,4673,1,0,0,0,4675,4676,1,0,0,0,4676,807,1,0,0,0,4677,
        4675,1,0,0,0,4678,4679,7,34,0,0,4679,809,1,0,0,0,4680,4682,3,808,
        404,0,4681,4680,1,0,0,0,4682,4685,1,0,0,0,4683,4681,1,0,0,0,4683,
        4684,1,0,0,0,4684,4686,1,0,0,0,4685,4683,1,0,0,0,4686,4687,3,806,
        403,0,4687,811,1,0,0,0,4688,4689,5,411,0,0,4689,813,1,0,0,0,4690,
        4696,3,810,405,0,4691,4692,3,812,406,0,4692,4693,3,810,405,0,4693,
        4695,1,0,0,0,4694,4691,1,0,0,0,4695,4698,1,0,0,0,4696,4694,1,0,0,
        0,4696,4697,1,0,0,0,4697,815,1,0,0,0,4698,4696,1,0,0,0,4699,4700,
        7,35,0,0,4700,817,1,0,0,0,4701,4707,3,814,407,0,4702,4703,3,816,
        408,0,4703,4704,3,814,407,0,4704,4706,1,0,0,0,4705,4702,1,0,0,0,
        4706,4709,1,0,0,0,4707,4705,1,0,0,0,4707,4708,1,0,0,0,4708,819,1,
        0,0,0,4709,4707,1,0,0,0,4710,4711,7,36,0,0,4711,821,1,0,0,0,4712,
        4718,3,818,409,0,4713,4714,3,820,410,0,4714,4715,3,818,409,0,4715,
        4717,1,0,0,0,4716,4713,1,0,0,0,4717,4720,1,0,0,0,4718,4716,1,0,0,
        0,4718,4719,1,0,0,0,4719,823,1,0,0,0,4720,4718,1,0,0,0,4721,4722,
        5,410,0,0,4722,825,1,0,0,0,4723,4729,3,822,411,0,4724,4725,3,824,
        412,0,4725,4726,3,822,411,0,4726,4728,1,0,0,0,4727,4724,1,0,0,0,
        4728,4731,1,0,0,0,4729,4727,1,0,0,0,4729,4730,1,0,0,0,4730,827,1,
        0,0,0,4731,4729,1,0,0,0,4732,4733,5,407,0,0,4733,829,1,0,0,0,4734,
        4740,3,826,413,0,4735,4736,3,828,414,0,4736,4737,3,826,413,0,4737,
        4739,1,0,0,0,4738,4735,1,0,0,0,4739,4742,1,0,0,0,4740,4738,1,0,0,
        0,4740,4741,1,0,0,0,4741,831,1,0,0,0,4742,4740,1,0,0,0,4743,4744,
        5,409,0,0,4744,833,1,0,0,0,4745,4751,3,830,415,0,4746,4747,3,832,
        416,0,4747,4748,3,830,415,0,4748,4750,1,0,0,0,4749,4746,1,0,0,0,
        4750,4753,1,0,0,0,4751,4749,1,0,0,0,4751,4752,1,0,0,0,4752,835,1,
        0,0,0,4753,4751,1,0,0,0,4754,4755,7,37,0,0,4755,837,1,0,0,0,4756,
        4762,3,836,418,0,4757,4762,5,397,0,0,4758,4762,5,398,0,0,4759,4762,
        5,399,0,0,4760,4762,5,400,0,0,4761,4756,1,0,0,0,4761,4757,1,0,0,
        0,4761,4758,1,0,0,0,4761,4759,1,0,0,0,4761,4760,1,0,0,0,4762,839,
        1,0,0,0,4763,4764,5,387,0,0,4764,4765,3,402,201,0,4765,4766,5,388,
        0,0,4766,841,1,0,0,0,4767,4771,3,844,422,0,4768,4769,5,112,0,0,4769,
        4771,3,840,420,0,4770,4767,1,0,0,0,4770,4768,1,0,0,0,4771,843,1,
        0,0,0,4772,4774,3,834,417,0,4773,4775,3,846,423,0,4774,4773,1,0,
        0,0,4774,4775,1,0,0,0,4775,845,1,0,0,0,4776,4777,3,838,419,0,4777,
        4778,3,834,417,0,4778,4783,1,0,0,0,4779,4783,3,848,424,0,4780,4781,
        5,207,0,0,4781,4783,3,856,428,0,4782,4776,1,0,0,0,4782,4779,1,0,
        0,0,4782,4780,1,0,0,0,4783,847,1,0,0,0,4784,4785,5,149,0,0,4785,
        4796,3,854,427,0,4786,4787,5,25,0,0,4787,4788,3,834,417,0,4788,4789,
        5,11,0,0,4789,4790,3,834,417,0,4790,4796,1,0,0,0,4791,4792,5,177,
        0,0,4792,4793,7,38,0,0,4793,4796,3,728,364,0,4794,4796,3,850,425,
        0,4795,4784,1,0,0,0,4795,4786,1,0,0,0,4795,4791,1,0,0,0,4795,4794,
        1,0,0,0,4796,849,1,0,0,0,4797,4798,3,896,448,0,4798,4799,3,852,426,
        0,4799,4800,3,840,420,0,4800,851,1,0,0,0,4801,4802,7,39,0,0,4802,
        853,1,0,0,0,4803,4806,3,840,420,0,4804,4806,3,728,364,0,4805,4803,
        1,0,0,0,4805,4804,1,0,0,0,4806,855,1,0,0,0,4807,4808,3,836,418,0,
        4808,4809,3,834,417,0,4809,4812,1,0,0,0,4810,4812,3,848,424,0,4811,
        4807,1,0,0,0,4811,4810,1,0,0,0,4812,857,1,0,0,0,4813,4814,5,161,
        0,0,4814,4815,5,92,0,0,4815,4816,5,134,0,0,4816,859,1,0,0,0,4817,
        4825,5,394,0,0,4818,4825,5,395,0,0,4819,4825,5,396,0,0,4820,4821,
        5,161,0,0,4821,4822,5,207,0,0,4822,4823,5,92,0,0,4823,4825,5,134,
        0,0,4824,4817,1,0,0,0,4824,4818,1,0,0,0,4824,4819,1,0,0,0,4824,4820,
        1,0,0,0,4825,861,1,0,0,0,4826,4835,3,842,421,0,4827,4828,3,860,430,
        0,4828,4829,3,842,421,0,4829,4834,1,0,0,0,4830,4831,3,858,429,0,
        4831,4832,3,842,421,0,4832,4834,1,0,0,0,4833,4827,1,0,0,0,4833,4830,
        1,0,0,0,4834,4837,1,0,0,0,4835,4833,1,0,0,0,4835,4836,1,0,0,0,4836,
        863,1,0,0,0,4837,4835,1,0,0,0,4838,4851,5,210,0,0,4839,4851,5,340,
        0,0,4840,4851,5,120,0,0,4841,4851,5,350,0,0,4842,4843,5,207,0,0,
        4843,4851,5,210,0,0,4844,4845,5,207,0,0,4845,4851,5,340,0,0,4846,
        4847,5,207,0,0,4847,4851,5,120,0,0,4848,4849,5,207,0,0,4849,4851,
        5,350,0,0,4850,4838,1,0,0,0,4850,4839,1,0,0,0,4850,4840,1,0,0,0,
        4850,4841,1,0,0,0,4850,4842,1,0,0,0,4850,4844,1,0,0,0,4850,4846,
        1,0,0,0,4850,4848,1,0,0,0,4851,865,1,0,0,0,4852,4855,3,862,431,0,
        4853,4854,5,161,0,0,4854,4856,3,864,432,0,4855,4853,1,0,0,0,4855,
        4856,1,0,0,0,4856,867,1,0,0,0,4857,4858,5,207,0,0,4858,869,1,0,0,
        0,4859,4861,3,868,434,0,4860,4859,1,0,0,0,4861,4864,1,0,0,0,4862,
        4860,1,0,0,0,4862,4863,1,0,0,0,4863,4865,1,0,0,0,4864,4862,1,0,0,
        0,4865,4866,3,866,433,0,4866,871,1,0,0,0,4867,4868,5,11,0,0,4868,
        873,1,0,0,0,4869,4875,3,870,435,0,4870,4871,3,872,436,0,4871,4872,
        3,870,435,0,4872,4874,1,0,0,0,4873,4870,1,0,0,0,4874,4877,1,0,0,
        0,4875,4873,1,0,0,0,4875,4876,1,0,0,0,4876,875,1,0,0,0,4877,4875,
        1,0,0,0,4878,4879,5,219,0,0,4879,877,1,0,0,0,4880,4886,3,874,437,
        0,4881,4882,3,876,438,0,4882,4883,3,874,437,0,4883,4885,1,0,0,0,
        4884,4881,1,0,0,0,4885,4888,1,0,0,0,4886,4884,1,0,0,0,4886,4887,
        1,0,0,0,4887,879,1,0,0,0,4888,4886,1,0,0,0,4889,4890,7,40,0,0,4890,
        881,1,0,0,0,4891,4892,7,40,0,0,4892,883,1,0,0,0,4893,4895,3,646,
        323,0,4894,4896,3,886,443,0,4895,4894,1,0,0,0,4895,4896,1,0,0,0,
        4896,885,1,0,0,0,4897,4898,5,228,0,0,4898,4899,5,387,0,0,4899,4904,
        3,888,444,0,4900,4901,5,385,0,0,4901,4903,3,888,444,0,4902,4900,
        1,0,0,0,4903,4906,1,0,0,0,4904,4902,1,0,0,0,4904,4905,1,0,0,0,4905,
        4907,1,0,0,0,4906,4904,1,0,0,0,4907,4908,5,388,0,0,4908,887,1,0,
        0,0,4909,4912,3,902,451,0,4910,4911,5,394,0,0,4911,4913,3,778,389,
        0,4912,4910,1,0,0,0,4912,4913,1,0,0,0,4913,889,1,0,0,0,4914,4915,
        5,387,0,0,4915,4920,3,892,446,0,4916,4917,5,385,0,0,4917,4919,3,
        892,446,0,4918,4916,1,0,0,0,4919,4922,1,0,0,0,4920,4918,1,0,0,0,
        4920,4921,1,0,0,0,4921,4923,1,0,0,0,4922,4920,1,0,0,0,4923,4924,
        5,388,0,0,4924,891,1,0,0,0,4925,4926,3,902,451,0,4926,4927,3,894,
        447,0,4927,4928,3,778,389,0,4928,893,1,0,0,0,4929,4932,5,177,0,0,
        4930,4932,3,896,448,0,4931,4929,1,0,0,0,4931,4930,1,0,0,0,4932,895,
        1,0,0,0,4933,4934,7,41,0,0,4934,897,1,0,0,0,4935,4936,7,42,0,0,4936,
        899,1,0,0,0,4937,4941,3,898,449,0,4938,4941,5,414,0,0,4939,4941,
        3,904,452,0,4940,4937,1,0,0,0,4940,4938,1,0,0,0,4940,4939,1,0,0,
        0,4941,901,1,0,0,0,4942,4945,5,420,0,0,4943,4945,3,908,454,0,4944,
        4942,1,0,0,0,4944,4943,1,0,0,0,4945,903,1,0,0,0,4946,4949,3,902,
        451,0,4947,4948,5,383,0,0,4948,4950,3,902,451,0,4949,4947,1,0,0,
        0,4949,4950,1,0,0,0,4950,905,1,0,0,0,4951,4952,3,902,451,0,4952,
        907,1,0,0,0,4953,4954,7,43,0,0,4954,909,1,0,0,0,4955,4956,7,44,0,
        0,4956,911,1,0,0,0,4957,4958,3,914,457,0,4958,4959,5,0,0,1,4959,
        913,1,0,0,0,4960,4965,3,916,458,0,4961,4962,5,385,0,0,4962,4964,
        3,916,458,0,4963,4961,1,0,0,0,4964,4967,1,0,0,0,4965,4963,1,0,0,
        0,4965,4966,1,0,0,0,4966,915,1,0,0,0,4967,4965,1,0,0,0,4968,4973,
        3,918,459,0,4969,4970,5,387,0,0,4970,4971,3,920,460,0,4971,4972,
        5,388,0,0,4972,4974,1,0,0,0,4973,4969,1,0,0,0,4973,4974,1,0,0,0,
        4974,917,1,0,0,0,4975,4976,7,45,0,0,4976,919,1,0,0,0,4977,4982,3,
        922,461,0,4978,4979,5,385,0,0,4979,4981,3,922,461,0,4980,4978,1,
        0,0,0,4981,4984,1,0,0,0,4982,4980,1,0,0,0,4982,4983,1,0,0,0,4983,
        921,1,0,0,0,4984,4982,1,0,0,0,4985,4986,7,46,0,0,4986,923,1,0,0,
        0,4987,4988,5,240,0,0,4988,4989,3,902,451,0,4989,4990,5,134,0,0,
        4990,4991,3,386,193,0,4991,925,1,0,0,0,4992,4993,5,110,0,0,4993,
        4994,3,902,451,0,4994,4995,5,360,0,0,4995,4996,3,928,464,0,4996,
        927,1,0,0,0,4997,5002,3,778,389,0,4998,4999,5,385,0,0,4999,5001,
        3,778,389,0,5000,4998,1,0,0,0,5001,5004,1,0,0,0,5002,5000,1,0,0,
        0,5002,5003,1,0,0,0,5003,929,1,0,0,0,5004,5002,1,0,0,0,5005,5020,
        3,940,470,0,5006,5020,3,952,476,0,5007,5020,3,958,479,0,5008,5020,
        3,954,477,0,5009,5020,3,956,478,0,5010,5020,3,980,490,0,5011,5020,
        3,982,491,0,5012,5020,3,984,492,0,5013,5020,3,990,495,0,5014,5020,
        3,992,496,0,5015,5020,3,994,497,0,5016,5020,3,996,498,0,5017,5020,
        3,998,499,0,5018,5020,3,1000,500,0,5019,5005,1,0,0,0,5019,5006,1,
        0,0,0,5019,5007,1,0,0,0,5019,5008,1,0,0,0,5019,5009,1,0,0,0,5019,
        5010,1,0,0,0,5019,5011,1,0,0,0,5019,5012,1,0,0,0,5019,5013,1,0,0,
        0,5019,5014,1,0,0,0,5019,5015,1,0,0,0,5019,5016,1,0,0,0,5019,5017,
        1,0,0,0,5019,5018,1,0,0,0,5020,931,1,0,0,0,5021,5022,5,250,0,0,5022,
        5023,5,394,0,0,5023,5029,5,419,0,0,5024,5025,5,80,0,0,5025,5026,
        5,237,0,0,5026,5027,5,394,0,0,5027,5029,3,960,480,0,5028,5021,1,
        0,0,0,5028,5024,1,0,0,0,5029,933,1,0,0,0,5030,5035,3,932,466,0,5031,
        5032,5,385,0,0,5032,5034,3,932,466,0,5033,5031,1,0,0,0,5034,5037,
        1,0,0,0,5035,5033,1,0,0,0,5035,5036,1,0,0,0,5036,935,1,0,0,0,5037,
        5035,1,0,0,0,5038,5042,5,250,0,0,5039,5040,5,80,0,0,5040,5042,5,
        237,0,0,5041,5038,1,0,0,0,5041,5039,1,0,0,0,5042,937,1,0,0,0,5043,
        5048,3,936,468,0,5044,5045,5,385,0,0,5045,5047,3,936,468,0,5046,
        5044,1,0,0,0,5047,5050,1,0,0,0,5048,5046,1,0,0,0,5048,5049,1,0,0,
        0,5049,939,1,0,0,0,5050,5048,1,0,0,0,5051,5052,5,58,0,0,5052,5053,
        5,271,0,0,5053,5055,5,234,0,0,5054,5056,3,42,21,0,5055,5054,1,0,
        0,0,5055,5056,1,0,0,0,5056,5066,1,0,0,0,5057,5058,3,902,451,0,5058,
        5059,5,177,0,0,5059,5060,3,902,451,0,5060,5067,1,0,0,0,5061,5064,
        3,902,451,0,5062,5063,5,376,0,0,5063,5065,3,934,467,0,5064,5062,
        1,0,0,0,5064,5065,1,0,0,0,5065,5067,1,0,0,0,5066,5057,1,0,0,0,5066,
        5061,1,0,0,0,5067,941,1,0,0,0,5068,5069,5,376,0,0,5069,5070,5,269,
        0,0,5070,943,1,0,0,0,5071,5073,5,2,0,0,5072,5074,3,942,471,0,5073,
        5072,1,0,0,0,5073,5074,1,0,0,0,5074,945,1,0,0,0,5075,5076,5,102,
        0,0,5076,947,1,0,0,0,5077,5078,5,91,0,0,5078,949,1,0,0,0,5079,5080,
        5,352,0,0,5080,951,1,0,0,0,5081,5082,5,9,0,0,5082,5083,5,271,0,0,
        5083,5084,5,234,0,0,5084,5102,3,902,451,0,5085,5103,5,363,0,0,5086,
        5103,5,91,0,0,5087,5088,5,294,0,0,5088,5103,3,934,467,0,5089,5090,
        5,353,0,0,5090,5103,3,938,469,0,5091,5092,5,265,0,0,5092,5093,5,
        331,0,0,5093,5103,3,902,451,0,5094,5096,3,944,472,0,5095,5097,3,
        946,473,0,5096,5095,1,0,0,0,5096,5097,1,0,0,0,5097,5103,1,0,0,0,
        5098,5100,3,946,473,0,5099,5101,3,944,472,0,5100,5099,1,0,0,0,5100,
        5101,1,0,0,0,5101,5103,1,0,0,0,5102,5085,1,0,0,0,5102,5086,1,0,0,
        0,5102,5087,1,0,0,0,5102,5089,1,0,0,0,5102,5091,1,0,0,0,5102,5094,
        1,0,0,0,5102,5098,1,0,0,0,5103,953,1,0,0,0,5104,5105,7,14,0,0,5105,
        5106,5,379,0,0,5106,5107,5,190,0,0,5107,955,1,0,0,0,5108,5120,5,
        269,0,0,5109,5110,5,3,0,0,5110,5111,5,271,0,0,5111,5112,5,234,0,
        0,5112,5113,5,376,0,0,5113,5121,3,902,451,0,5114,5115,5,271,0,0,
        5115,5116,5,234,0,0,5116,5117,3,902,451,0,5117,5118,5,376,0,0,5118,
        5119,3,902,451,0,5119,5121,1,0,0,0,5120,5109,1,0,0,0,5120,5114,1,
        0,0,0,5121,957,1,0,0,0,5122,5123,5,98,0,0,5123,5124,5,271,0,0,5124,
        5126,5,234,0,0,5125,5127,3,38,19,0,5126,5125,1,0,0,0,5126,5127,1,
        0,0,0,5127,5128,1,0,0,0,5128,5129,3,902,451,0,5129,959,1,0,0,0,5130,
        5135,3,902,451,0,5131,5132,5,383,0,0,5132,5134,3,902,451,0,5133,
        5131,1,0,0,0,5134,5137,1,0,0,0,5135,5133,1,0,0,0,5135,5136,1,0,0,
        0,5136,961,1,0,0,0,5137,5135,1,0,0,0,5138,5139,3,970,485,0,5139,
        963,1,0,0,0,5140,5141,3,962,481,0,5141,5142,5,0,0,1,5142,965,1,0,
        0,0,5143,5148,3,968,484,0,5144,5145,5,219,0,0,5145,5147,3,968,484,
        0,5146,5144,1,0,0,0,5147,5150,1,0,0,0,5148,5146,1,0,0,0,5148,5149,
        1,0,0,0,5149,967,1,0,0,0,5150,5148,1,0,0,0,5151,5156,3,970,485,0,
        5152,5153,5,11,0,0,5153,5155,3,970,485,0,5154,5152,1,0,0,0,5155,
        5158,1,0,0,0,5156,5154,1,0,0,0,5156,5157,1,0,0,0,5157,969,1,0,0,
        0,5158,5156,1,0,0,0,5159,5160,3,902,451,0,5160,5161,3,974,487,0,
        5161,5162,3,972,486,0,5162,971,1,0,0,0,5163,5164,7,25,0,0,5164,973,
        1,0,0,0,5165,5166,5,400,0,0,5166,975,1,0,0,0,5167,5172,5,170,0,0,
        5168,5169,5,202,0,0,5169,5170,5,331,0,0,5170,5172,3,960,480,0,5171,
        5167,1,0,0,0,5171,5168,1,0,0,0,5172,977,1,0,0,0,5173,5174,3,976,
        488,0,5174,5175,5,0,0,1,5175,979,1,0,0,0,5176,5177,5,58,0,0,5177,
        5178,5,338,0,0,5178,5179,3,902,451,0,5179,5180,5,383,0,0,5180,5181,
        3,902,451,0,5181,5182,5,372,0,0,5182,5183,3,962,481,0,5183,5184,
        5,95,0,0,5184,5185,3,976,488,0,5185,981,1,0,0,0,5186,5187,5,9,0,
        0,5187,5188,5,338,0,0,5188,5189,3,902,451,0,5189,5190,5,383,0,0,
        5190,5207,3,902,451,0,5191,5192,5,372,0,0,5192,5193,3,962,481,0,
        5193,5194,5,95,0,0,5194,5195,3,976,488,0,5195,5208,1,0,0,0,5196,
        5197,5,4,0,0,5197,5201,5,331,0,0,5198,5199,5,98,0,0,5199,5201,5,
        134,0,0,5200,5196,1,0,0,0,5200,5198,1,0,0,0,5201,5205,1,0,0,0,5202,
        5203,5,237,0,0,5203,5206,3,960,480,0,5204,5206,5,352,0,0,5205,5202,
        1,0,0,0,5205,5204,1,0,0,0,5206,5208,1,0,0,0,5207,5191,1,0,0,0,5207,
        5200,1,0,0,0,5208,983,1,0,0,0,5209,5210,5,98,0,0,5210,5211,5,338,
        0,0,5211,5212,3,902,451,0,5212,5213,5,383,0,0,5213,5214,3,902,451,
        0,5214,985,1,0,0,0,5215,5216,5,8,0,0,5216,5217,5,394,0,0,5217,5228,
        5,419,0,0,5218,5219,5,250,0,0,5219,5220,5,394,0,0,5220,5228,5,419,
        0,0,5221,5222,5,285,0,0,5222,5223,5,394,0,0,5223,5228,5,414,0,0,
        5224,5225,5,231,0,0,5225,5226,5,394,0,0,5226,5228,3,960,480,0,5227,
        5215,1,0,0,0,5227,5218,1,0,0,0,5227,5221,1,0,0,0,5227,5224,1,0,0,
        0,5228,987,1,0,0,0,5229,5234,3,986,493,0,5230,5231,5,385,0,0,5231,
        5233,3,986,493,0,5232,5230,1,0,0,0,5233,5236,1,0,0,0,5234,5232,1,
        0,0,0,5234,5235,1,0,0,0,5235,989,1,0,0,0,5236,5234,1,0,0,0,5237,
        5238,5,58,0,0,5238,5239,5,237,0,0,5239,5240,3,902,451,0,5240,5241,
        5,383,0,0,5241,5242,3,960,480,0,5242,5243,5,376,0,0,5243,5244,3,
        988,494,0,5244,991,1,0,0,0,5245,5246,5,9,0,0,5246,5247,5,237,0,0,
        5247,5248,3,902,451,0,5248,5249,5,383,0,0,5249,5257,3,960,480,0,
        5250,5251,5,294,0,0,5251,5258,3,988,494,0,5252,5253,5,353,0,0,5253,
        5258,5,285,0,0,5254,5255,7,47,0,0,5255,5256,5,338,0,0,5256,5258,
        3,902,451,0,5257,5250,1,0,0,0,5257,5252,1,0,0,0,5257,5254,1,0,0,
        0,5258,993,1,0,0,0,5259,5260,5,98,0,0,5260,5261,5,237,0,0,5261,5262,
        3,902,451,0,5262,5263,5,383,0,0,5263,5264,3,960,480,0,5264,995,1,
        0,0,0,5265,5266,5,58,0,0,5266,5267,7,48,0,0,5267,5268,5,193,0,0,
        5268,5269,5,414,0,0,5269,5270,5,149,0,0,5270,5274,3,902,451,0,5271,
        5272,5,331,0,0,5272,5275,3,960,480,0,5273,5275,3,950,475,0,5274,
        5271,1,0,0,0,5274,5273,1,0,0,0,5275,5279,1,0,0,0,5276,5277,5,376,
        0,0,5277,5278,5,220,0,0,5278,5280,5,419,0,0,5279,5276,1,0,0,0,5279,
        5280,1,0,0,0,5280,997,1,0,0,0,5281,5282,5,9,0,0,5282,5283,7,48,0,
        0,5283,5284,5,193,0,0,5284,5285,5,414,0,0,5285,5286,5,149,0,0,5286,
        5290,3,902,451,0,5287,5288,5,331,0,0,5288,5291,3,960,480,0,5289,
        5291,3,950,475,0,5290,5287,1,0,0,0,5290,5289,1,0,0,0,5291,5295,1,
        0,0,0,5292,5293,5,376,0,0,5293,5294,5,220,0,0,5294,5296,5,419,0,
        0,5295,5292,1,0,0,0,5295,5296,1,0,0,0,5296,999,1,0,0,0,5297,5298,
        5,98,0,0,5298,5299,7,48,0,0,5299,5300,5,193,0,0,5300,5301,5,414,
        0,0,5301,5302,5,149,0,0,5302,5303,3,902,451,0,5303,1001,1,0,0,0,
        619,1007,1009,1016,1022,1031,1041,1044,1048,1068,1075,1080,1086,
        1090,1103,1107,1111,1116,1123,1127,1132,1139,1143,1154,1160,1167,
        1214,1243,1247,1250,1253,1258,1264,1268,1274,1276,1293,1305,1309,
        1316,1324,1327,1332,1336,1339,1349,1357,1361,1364,1368,1372,1375,
        1380,1386,1391,1396,1400,1411,1413,1417,1427,1431,1437,1440,1447,
        1452,1460,1465,1469,1477,1482,1488,1494,1497,1500,1503,1512,1520,
        1525,1533,1540,1543,1546,1548,1556,1559,1562,1565,1568,1571,1574,
        1577,1580,1583,1586,1588,1600,1604,1614,1620,1635,1652,1657,1661,
        1665,1672,1679,1685,1689,1692,1699,1722,1727,1731,1739,1748,1752,
        1758,1764,1771,1774,1780,1787,1795,1804,1813,1833,1840,1842,1849,
        1859,1867,1871,1875,1888,1897,1903,1907,1914,1917,1920,1923,1935,
        1941,1967,1975,1979,1982,1985,1988,1991,1994,1997,2000,2009,2019,
        2022,2042,2048,2054,2057,2059,2066,2073,2077,2086,2094,2099,2108,
        2116,2124,2142,2155,2176,2180,2195,2201,2204,2207,2210,2213,2217,
        2231,2239,2242,2257,2291,2299,2304,2312,2317,2322,2332,2340,2348,
        2356,2367,2371,2379,2388,2391,2400,2406,2410,2416,2420,2432,2441,
        2452,2456,2463,2475,2482,2491,2494,2501,2507,2513,2516,2522,2526,
        2530,2535,2539,2543,2547,2555,2559,2563,2567,2571,2579,2583,2587,
        2595,2600,2605,2609,2613,2620,2629,2637,2648,2666,2669,2675,2701,
        2704,2710,2718,2726,2739,2746,2752,2756,2759,2762,2765,2768,2771,
        2778,2782,2785,2788,2791,2794,2797,2800,2807,2810,2817,2820,2823,
        2826,2829,2832,2835,2838,2841,2844,2847,2851,2854,2857,2860,2863,
        2866,2869,2872,2875,2878,2881,2883,2889,2893,2900,2902,2905,2910,
        2913,2917,2922,2928,2934,2942,2950,2957,2963,2972,2975,2979,2992,
        2996,3007,3014,3018,3023,3026,3036,3038,3042,3049,3054,3074,3081,
        3104,3118,3139,3155,3168,3172,3176,3184,3197,3224,3231,3236,3241,
        3249,3255,3259,3262,3265,3271,3278,3288,3292,3297,3301,3307,3314,
        3321,3329,3338,3342,3345,3353,3356,3364,3367,3375,3379,3384,3388,
        3397,3413,3428,3430,3446,3453,3470,3473,3476,3482,3505,3519,3522,
        3527,3553,3557,3560,3563,3567,3572,3575,3578,3581,3584,3590,3593,
        3596,3599,3602,3605,3608,3611,3614,3617,3621,3623,3629,3634,3637,
        3640,3643,3649,3652,3655,3658,3661,3664,3667,3670,3673,3676,3680,
        3682,3684,3689,3695,3700,3718,3727,3738,3746,3758,3761,3767,3774,
        3781,3788,3795,3804,3808,3815,3820,3824,3840,3844,3846,3849,3862,
        3865,3868,3880,3883,3890,3899,3904,3906,3908,3925,3928,3937,3943,
        3947,3950,3953,3956,3959,3971,3975,3978,3981,3988,3991,3996,4004,
        4010,4015,4019,4024,4031,4045,4048,4052,4069,4077,4080,4093,4102,
        4105,4111,4114,4119,4122,4131,4145,4151,4153,4161,4171,4176,4178,
        4190,4196,4198,4205,4212,4221,4231,4234,4237,4240,4244,4253,4262,
        4270,4276,4285,4292,4300,4310,4320,4325,4329,4333,4339,4360,4366,
        4370,4374,4377,4383,4388,4391,4395,4403,4413,4423,4442,4449,4452,
        4463,4470,4473,4475,4486,4496,4498,4504,4508,4517,4530,4534,4546,
        4550,4559,4587,4597,4605,4610,4631,4635,4649,4664,4673,4675,4683,
        4696,4707,4718,4729,4740,4751,4761,4770,4774,4782,4795,4805,4811,
        4824,4833,4835,4850,4855,4862,4875,4886,4895,4904,4912,4920,4931,
        4940,4944,4949,4965,4973,4982,5002,5019,5028,5035,5041,5048,5055,
        5064,5066,5073,5096,5100,5102,5120,5126,5135,5148,5156,5171,5200,
        5205,5207,5227,5234,5257,5274,5279,5290,5295
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!HiveSQLParser.__ATN) {
            HiveSQLParser.__ATN = new antlr.ATNDeserializer().deserialize(HiveSQLParser._serializedATN);
        }

        return HiveSQLParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(HiveSQLParser.literalNames, HiveSQLParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return HiveSQLParser.vocabulary;
    }

    private static readonly decisionsToDFA = HiveSQLParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sqlStatement(): SqlStatementContext {
        return this.getRuleContext(0, SqlStatementContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_statement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterStatement) {
             listener.enterStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitStatement) {
             listener.exitStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explainStatement(): ExplainStatementContext[];
    public explainStatement(i: number): ExplainStatementContext | null;
    public explainStatement(i?: number): ExplainStatementContext[] | ExplainStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExplainStatementContext);
        }

        return this.getRuleContext(i, ExplainStatementContext);
    }
    public execStatement(): ExecStatementContext[];
    public execStatement(i: number): ExecStatementContext | null;
    public execStatement(i?: number): ExecStatementContext[] | ExecStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExecStatementContext);
        }

        return this.getRuleContext(i, ExecStatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_sqlStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSqlStatement) {
             listener.enterSqlStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSqlStatement) {
             listener.exitSqlStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSqlStatement) {
            return visitor.visitSqlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_EXPLAIN, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.SEMICOLON, 0)!;
    }
    public execStatement(): ExecStatementContext | null {
        return this.getRuleContext(0, ExecStatementContext);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REWRITE, 0);
    }
    public queryStatementExpression(): QueryStatementExpressionContext | null {
        return this.getRuleContext(0, QueryStatementExpressionContext);
    }
    public explainOption(): ExplainOptionContext[];
    public explainOption(i: number): ExplainOptionContext | null;
    public explainOption(i?: number): ExplainOptionContext[] | ExplainOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExplainOptionContext);
        }

        return this.getRuleContext(i, ExplainOptionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_explainStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExplainStatement) {
             listener.enterExplainStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExplainStatement) {
             listener.exitExplainStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXTENDED, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FORMATTED, 0);
    }
    public KW_DEPENDENCY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEPENDENCY, 0);
    }
    public KW_CBO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CBO, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COST, 0);
    }
    public KW_JOINCOST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_JOINCOST, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOGICAL, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AUTHORIZATION, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ANALYZE, 0);
    }
    public KW_REOPTIMIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REOPTIMIZATION, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOCKS, 0);
    }
    public KW_AST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AST, 0);
    }
    public KW_VECTORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VECTORIZATION, 0);
    }
    public vectorizationOnly(): VectorizationOnlyContext | null {
        return this.getRuleContext(0, VectorizationOnlyContext);
    }
    public vectorizatonDetail(): VectorizatonDetailContext | null {
        return this.getRuleContext(0, VectorizatonDetailContext);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEBUG, 0);
    }
    public KW_DDL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DDL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_explainOption;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExplainOption) {
             listener.enterExplainOption(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExplainOption) {
             listener.exitExplainOption(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExplainOption) {
            return visitor.visitExplainOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VectorizationOnlyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ONLY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ONLY, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_vectorizationOnly;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterVectorizationOnly) {
             listener.enterVectorizationOnly(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitVectorizationOnly) {
             listener.exitVectorizationOnly(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitVectorizationOnly) {
            return visitor.visitVectorizationOnly(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VectorizatonDetailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SUMMARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SUMMARY, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OPERATOR, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXPRESSION, 0);
    }
    public KW_DETAIL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DETAIL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_vectorizatonDetail;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterVectorizatonDetail) {
             listener.enterVectorizatonDetail(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitVectorizatonDetail) {
             listener.exitVectorizatonDetail(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitVectorizatonDetail) {
            return visitor.visitVectorizatonDetail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMICOLON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.SEMICOLON, 0)!;
    }
    public queryStatementExpression(): QueryStatementExpressionContext | null {
        return this.getRuleContext(0, QueryStatementExpressionContext);
    }
    public loadStatement(): LoadStatementContext | null {
        return this.getRuleContext(0, LoadStatementContext);
    }
    public exportStatement(): ExportStatementContext | null {
        return this.getRuleContext(0, ExportStatementContext);
    }
    public importStatement(): ImportStatementContext | null {
        return this.getRuleContext(0, ImportStatementContext);
    }
    public replDumpStatement(): ReplDumpStatementContext | null {
        return this.getRuleContext(0, ReplDumpStatementContext);
    }
    public replLoadStatement(): ReplLoadStatementContext | null {
        return this.getRuleContext(0, ReplLoadStatementContext);
    }
    public replStatusStatement(): ReplStatusStatementContext | null {
        return this.getRuleContext(0, ReplStatusStatementContext);
    }
    public ddlStatement(): DdlStatementContext | null {
        return this.getRuleContext(0, DdlStatementContext);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(0, DeleteStatementContext);
    }
    public updateStatement(): UpdateStatementContext | null {
        return this.getRuleContext(0, UpdateStatementContext);
    }
    public sqlTransactionStatement(): SqlTransactionStatementContext | null {
        return this.getRuleContext(0, SqlTransactionStatementContext);
    }
    public mergeStatement(): MergeStatementContext | null {
        return this.getRuleContext(0, MergeStatementContext);
    }
    public prepareStatement(): PrepareStatementContext | null {
        return this.getRuleContext(0, PrepareStatementContext);
    }
    public executeStatement(): ExecuteStatementContext | null {
        return this.getRuleContext(0, ExecuteStatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_execStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExecStatement) {
             listener.enterExecStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExecStatement) {
             listener.exitExecStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExecStatement) {
            return visitor.visitExecStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LOAD, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DATA, 0)!;
    }
    public KW_INPATH(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_INPATH, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_INTO, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOCAL, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OVERWRITE, 0);
    }
    public inputFileFormat(): InputFileFormatContext | null {
        return this.getRuleContext(0, InputFileFormatContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_loadStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterLoadStatement) {
             listener.enterLoadStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitLoadStatement) {
             listener.exitLoadStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitLoadStatement) {
            return visitor.visitLoadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FOR, 0)!;
    }
    public KW_REPLICATION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REPLICATION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public KW_METADATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_METADATA, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_replicationClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterReplicationClause) {
             listener.enterReplicationClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitReplicationClause) {
             listener.exitReplicationClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitReplicationClause) {
            return visitor.visitReplicationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExportStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXPORT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_EXPORT, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TO, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public replicationClause(): ReplicationClauseContext | null {
        return this.getRuleContext(0, ReplicationClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_exportStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExportStatement) {
             listener.enterExportStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExportStatement) {
             listener.exitExportStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExportStatement) {
            return visitor.visitExportStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportStatementContext extends antlr.ParserRuleContext {
    public _path?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IMPORT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_IMPORT, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FROM, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLE, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public tableLocation(): TableLocationContext | null {
        return this.getRuleContext(0, TableLocationContext);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXTERNAL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_importStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterImportStatement) {
             listener.enterImportStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitImportStatement) {
             listener.exitImportStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitImportStatement) {
            return visitor.visitImportStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplDumpStatementContext extends antlr.ParserRuleContext {
    public _dbPolicy?: ReplDbPolicyContext;
    public _oldDbPolicy?: ReplDbPolicyContext;
    public _replConf?: ReplConfigsContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REPL, 0)!;
    }
    public KW_DUMP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DUMP, 0)!;
    }
    public replDbPolicy(): ReplDbPolicyContext[];
    public replDbPolicy(i: number): ReplDbPolicyContext | null;
    public replDbPolicy(i?: number): ReplDbPolicyContext[] | ReplDbPolicyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ReplDbPolicyContext);
        }

        return this.getRuleContext(i, ReplDbPolicyContext);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REPLACE, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public replConfigs(): ReplConfigsContext | null {
        return this.getRuleContext(0, ReplConfigsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_replDumpStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterReplDumpStatement) {
             listener.enterReplDumpStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitReplDumpStatement) {
             listener.exitReplDumpStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitReplDumpStatement) {
            return visitor.visitReplDumpStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplDbPolicyContext extends antlr.ParserRuleContext {
    public _dbName?: Id_Context;
    public _tablePolicy?: ReplTableLevelPolicyContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.DOT, 0);
    }
    public replTableLevelPolicy(): ReplTableLevelPolicyContext | null {
        return this.getRuleContext(0, ReplTableLevelPolicyContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_replDbPolicy;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterReplDbPolicy) {
             listener.enterReplDbPolicy(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitReplDbPolicy) {
             listener.exitReplDbPolicy(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitReplDbPolicy) {
            return visitor.visitReplDbPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplLoadStatementContext extends antlr.ParserRuleContext {
    public _sourceDbPolicy?: ReplDbPolicyContext;
    public _dbName?: Id_Context;
    public _replConf?: ReplConfigsContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REPL, 0)!;
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LOAD, 0)!;
    }
    public replDbPolicy(): ReplDbPolicyContext {
        return this.getRuleContext(0, ReplDbPolicyContext)!;
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INTO, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public replConfigs(): ReplConfigsContext | null {
        return this.getRuleContext(0, ReplConfigsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_replLoadStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterReplLoadStatement) {
             listener.enterReplLoadStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitReplLoadStatement) {
             listener.exitReplLoadStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitReplLoadStatement) {
            return visitor.visitReplLoadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplConfigsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public replConfigsList(): ReplConfigsListContext {
        return this.getRuleContext(0, ReplConfigsListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_replConfigs;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterReplConfigs) {
             listener.enterReplConfigs(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitReplConfigs) {
             listener.exitReplConfigs(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitReplConfigs) {
            return visitor.visitReplConfigs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplConfigsListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyValueProperty(): KeyValuePropertyContext[];
    public keyValueProperty(i: number): KeyValuePropertyContext | null;
    public keyValueProperty(i?: number): KeyValuePropertyContext[] | KeyValuePropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyValuePropertyContext);
        }

        return this.getRuleContext(i, KeyValuePropertyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_replConfigsList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterReplConfigsList) {
             listener.enterReplConfigsList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitReplConfigsList) {
             listener.exitReplConfigsList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitReplConfigsList) {
            return visitor.visitReplConfigsList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplTableLevelPolicyContext extends antlr.ParserRuleContext {
    public _replTablesIncludeList?: Token | null;
    public _replTablesExcludeList?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSQLParser.StringLiteral, i);
    	}
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_replTableLevelPolicy;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterReplTableLevelPolicy) {
             listener.enterReplTableLevelPolicy(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitReplTableLevelPolicy) {
             listener.exitReplTableLevelPolicy(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitReplTableLevelPolicy) {
            return visitor.visitReplTableLevelPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplStatusStatementContext extends antlr.ParserRuleContext {
    public _dbName?: Id_Context;
    public _replConf?: ReplConfigsContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REPL, 0)!;
    }
    public KW_STATUS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_STATUS, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public replConfigs(): ReplConfigsContext | null {
        return this.getRuleContext(0, ReplConfigsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_replStatusStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterReplStatusStatement) {
             listener.enterReplStatusStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitReplStatusStatement) {
             listener.exitReplStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitReplStatusStatement) {
            return visitor.visitReplStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DdlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext | null {
        return this.getRuleContext(0, CreateDatabaseStatementContext);
    }
    public switchDatabaseStatement(): SwitchDatabaseStatementContext | null {
        return this.getRuleContext(0, SwitchDatabaseStatementContext);
    }
    public dropDatabaseStatement(): DropDatabaseStatementContext | null {
        return this.getRuleContext(0, DropDatabaseStatementContext);
    }
    public createTableStatement(): CreateTableStatementContext | null {
        return this.getRuleContext(0, CreateTableStatementContext);
    }
    public dropTableStatement(): DropTableStatementContext | null {
        return this.getRuleContext(0, DropTableStatementContext);
    }
    public truncateTableStatement(): TruncateTableStatementContext | null {
        return this.getRuleContext(0, TruncateTableStatementContext);
    }
    public alterStatement(): AlterStatementContext | null {
        return this.getRuleContext(0, AlterStatementContext);
    }
    public descStatement(): DescStatementContext | null {
        return this.getRuleContext(0, DescStatementContext);
    }
    public showStatement(): ShowStatementContext | null {
        return this.getRuleContext(0, ShowStatementContext);
    }
    public metastoreCheck(): MetastoreCheckContext | null {
        return this.getRuleContext(0, MetastoreCheckContext);
    }
    public createViewStatement(): CreateViewStatementContext | null {
        return this.getRuleContext(0, CreateViewStatementContext);
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext | null {
        return this.getRuleContext(0, CreateMaterializedViewStatementContext);
    }
    public createScheduledQueryStatement(): CreateScheduledQueryStatementContext | null {
        return this.getRuleContext(0, CreateScheduledQueryStatementContext);
    }
    public alterScheduledQueryStatement(): AlterScheduledQueryStatementContext | null {
        return this.getRuleContext(0, AlterScheduledQueryStatementContext);
    }
    public dropScheduledQueryStatement(): DropScheduledQueryStatementContext | null {
        return this.getRuleContext(0, DropScheduledQueryStatementContext);
    }
    public dropViewStatement(): DropViewStatementContext | null {
        return this.getRuleContext(0, DropViewStatementContext);
    }
    public dropMaterializedViewStatement(): DropMaterializedViewStatementContext | null {
        return this.getRuleContext(0, DropMaterializedViewStatementContext);
    }
    public createFunctionStatement(): CreateFunctionStatementContext | null {
        return this.getRuleContext(0, CreateFunctionStatementContext);
    }
    public createMacroStatement(): CreateMacroStatementContext | null {
        return this.getRuleContext(0, CreateMacroStatementContext);
    }
    public dropFunctionStatement(): DropFunctionStatementContext | null {
        return this.getRuleContext(0, DropFunctionStatementContext);
    }
    public reloadFunctionsStatement(): ReloadFunctionsStatementContext | null {
        return this.getRuleContext(0, ReloadFunctionsStatementContext);
    }
    public dropMacroStatement(): DropMacroStatementContext | null {
        return this.getRuleContext(0, DropMacroStatementContext);
    }
    public analyzeStatement(): AnalyzeStatementContext | null {
        return this.getRuleContext(0, AnalyzeStatementContext);
    }
    public lockStatement(): LockStatementContext | null {
        return this.getRuleContext(0, LockStatementContext);
    }
    public unlockStatement(): UnlockStatementContext | null {
        return this.getRuleContext(0, UnlockStatementContext);
    }
    public lockDatabase(): LockDatabaseContext | null {
        return this.getRuleContext(0, LockDatabaseContext);
    }
    public unlockDatabase(): UnlockDatabaseContext | null {
        return this.getRuleContext(0, UnlockDatabaseContext);
    }
    public createRoleStatement(): CreateRoleStatementContext | null {
        return this.getRuleContext(0, CreateRoleStatementContext);
    }
    public dropRoleStatement(): DropRoleStatementContext | null {
        return this.getRuleContext(0, DropRoleStatementContext);
    }
    public grantPrivileges(): GrantPrivilegesContext | null {
        return this.getRuleContext(0, GrantPrivilegesContext);
    }
    public revokePrivileges(): RevokePrivilegesContext | null {
        return this.getRuleContext(0, RevokePrivilegesContext);
    }
    public showGrants(): ShowGrantsContext | null {
        return this.getRuleContext(0, ShowGrantsContext);
    }
    public showRoleGrants(): ShowRoleGrantsContext | null {
        return this.getRuleContext(0, ShowRoleGrantsContext);
    }
    public showRolePrincipals(): ShowRolePrincipalsContext | null {
        return this.getRuleContext(0, ShowRolePrincipalsContext);
    }
    public showRoles(): ShowRolesContext | null {
        return this.getRuleContext(0, ShowRolesContext);
    }
    public grantRole(): GrantRoleContext | null {
        return this.getRuleContext(0, GrantRoleContext);
    }
    public revokeRole(): RevokeRoleContext | null {
        return this.getRuleContext(0, RevokeRoleContext);
    }
    public setRole(): SetRoleContext | null {
        return this.getRuleContext(0, SetRoleContext);
    }
    public showCurrentRole(): ShowCurrentRoleContext | null {
        return this.getRuleContext(0, ShowCurrentRoleContext);
    }
    public abortTransactionStatement(): AbortTransactionStatementContext | null {
        return this.getRuleContext(0, AbortTransactionStatementContext);
    }
    public abortCompactionStatement(): AbortCompactionStatementContext | null {
        return this.getRuleContext(0, AbortCompactionStatementContext);
    }
    public killQueryStatement(): KillQueryStatementContext | null {
        return this.getRuleContext(0, KillQueryStatementContext);
    }
    public resourcePlanDdlStatements(): ResourcePlanDdlStatementsContext | null {
        return this.getRuleContext(0, ResourcePlanDdlStatementsContext);
    }
    public createDataConnectorStatement(): CreateDataConnectorStatementContext | null {
        return this.getRuleContext(0, CreateDataConnectorStatementContext);
    }
    public dropDataConnectorStatement(): DropDataConnectorStatementContext | null {
        return this.getRuleContext(0, DropDataConnectorStatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_ddlStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDdlStatement) {
             listener.enterDdlStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDdlStatement) {
             listener.exitDdlStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDdlStatement) {
            return visitor.visitDdlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_ifExists;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RestrictOrCascadeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_restrictOrCascade;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRestrictOrCascade) {
             listener.enterRestrictOrCascade(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRestrictOrCascade) {
             listener.exitRestrictOrCascade(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRestrictOrCascade) {
            return visitor.visitRestrictOrCascade(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_ifNotExists;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FORCE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FORCE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_force;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterForce) {
             listener.enterForce(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitForce) {
             listener.exitForce(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitForce) {
            return visitor.visitForce(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RewriteEnabledContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ENABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ENABLE, 0)!;
    }
    public KW_REWRITE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REWRITE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rewriteEnabled;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRewriteEnabled) {
             listener.enterRewriteEnabled(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRewriteEnabled) {
             listener.exitRewriteEnabled(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRewriteEnabled) {
            return visitor.visitRewriteEnabled(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RewriteDisabledContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DISABLE, 0)!;
    }
    public KW_REWRITE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REWRITE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rewriteDisabled;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRewriteDisabled) {
             listener.enterRewriteDisabled(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRewriteDisabled) {
             listener.exitRewriteDisabled(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRewriteDisabled) {
            return visitor.visitRewriteDisabled(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StoredAsDirsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_STORED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AS, 0)!;
    }
    public KW_DIRECTORIES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DIRECTORIES, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_storedAsDirs;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterStoredAsDirs) {
             listener.enterStoredAsDirs(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitStoredAsDirs) {
             listener.exitStoredAsDirs(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitStoredAsDirs) {
            return visitor.visitStoredAsDirs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrReplaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OR, 0)!;
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REPLACE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_orReplace;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterOrReplace) {
             listener.enterOrReplace(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitOrReplace) {
             listener.exitOrReplace(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitOrReplace) {
            return visitor.visitOrReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _dbprops?: DbPropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public databaseComment(): DatabaseCommentContext | null {
        return this.getRuleContext(0, DatabaseCommentContext);
    }
    public dbLocation(): DbLocationContext | null {
        return this.getRuleContext(0, DbLocationContext);
    }
    public dbManagedLocation(): DbManagedLocationContext | null {
        return this.getRuleContext(0, DbManagedLocationContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DBPROPERTIES, 0);
    }
    public dbProperties(): DbPropertiesContext | null {
        return this.getRuleContext(0, DbPropertiesContext);
    }
    public KW_REMOTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REMOTE, 0);
    }
    public dbConnectorName(): DbConnectorNameContext | null {
        return this.getRuleContext(0, DbConnectorNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createDatabaseStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateDatabaseStatement) {
             listener.enterCreateDatabaseStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateDatabaseStatement) {
             listener.exitCreateDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabaseStatement) {
            return visitor.visitCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbLocationContext extends antlr.ParserRuleContext {
    public _locn?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LOCATION, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dbLocation;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDbLocation) {
             listener.enterDbLocation(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDbLocation) {
             listener.exitDbLocation(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDbLocation) {
            return visitor.visitDbLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbManagedLocationContext extends antlr.ParserRuleContext {
    public _locn?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MANAGEDLOCATION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MANAGEDLOCATION, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dbManagedLocation;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDbManagedLocation) {
             listener.enterDbManagedLocation(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDbManagedLocation) {
             listener.exitDbManagedLocation(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDbManagedLocation) {
            return visitor.visitDbManagedLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbPropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public dbPropertiesList(): DbPropertiesListContext {
        return this.getRuleContext(0, DbPropertiesListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dbProperties;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDbProperties) {
             listener.enterDbProperties(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDbProperties) {
             listener.exitDbProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDbProperties) {
            return visitor.visitDbProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbPropertiesListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyValueProperty(): KeyValuePropertyContext[];
    public keyValueProperty(i: number): KeyValuePropertyContext | null;
    public keyValueProperty(i?: number): KeyValuePropertyContext[] | KeyValuePropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyValuePropertyContext);
        }

        return this.getRuleContext(i, KeyValuePropertyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dbPropertiesList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDbPropertiesList) {
             listener.enterDbPropertiesList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDbPropertiesList) {
             listener.exitDbPropertiesList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDbPropertiesList) {
            return visitor.visitDbPropertiesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbConnectorNameContext extends antlr.ParserRuleContext {
    public _dcName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_USING, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dbConnectorName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDbConnectorName) {
             listener.enterDbConnectorName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDbConnectorName) {
             listener.exitDbConnectorName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDbConnectorName) {
            return visitor.visitDbConnectorName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SwitchDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_USE, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_switchDatabaseStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSwitchDatabaseStatement) {
             listener.enterSwitchDatabaseStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSwitchDatabaseStatement) {
             listener.exitSwitchDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSwitchDatabaseStatement) {
            return visitor.visitSwitchDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public restrictOrCascade(): RestrictOrCascadeContext | null {
        return this.getRuleContext(0, RestrictOrCascadeContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropDatabaseStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropDatabaseStatement) {
             listener.enterDropDatabaseStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropDatabaseStatement) {
             listener.exitDropDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropDatabaseStatement) {
            return visitor.visitDropDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCommentContext extends antlr.ParserRuleContext {
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_databaseComment;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDatabaseComment) {
             listener.enterDatabaseComment(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDatabaseComment) {
             listener.exitDatabaseComment(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDatabaseComment) {
            return visitor.visitDatabaseComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TRUNCATE, 0)!;
    }
    public tablePartitionPrefix(): TablePartitionPrefixContext {
        return this.getRuleContext(0, TablePartitionPrefixContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLE, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COLUMNS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public force(): ForceContext | null {
        return this.getRuleContext(0, ForceContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_truncateTableStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTruncateTableStatement) {
             listener.enterTruncateTableStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTruncateTableStatement) {
             listener.exitTruncateTableStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTruncateTableStatement) {
            return visitor.visitTruncateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PURGE, 0);
    }
    public replicationClause(): ReplicationClauseContext | null {
        return this.getRuleContext(0, ReplicationClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropTableStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropTableStatement) {
             listener.enterDropTableStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropTableStatement) {
             listener.exitDropTableStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropTableStatement) {
            return visitor.visitDropTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InputFileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: Token | null;
    public _serdeCls?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_INPUTFORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SERDE, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSQLParser.StringLiteral, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_inputFileFormat;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterInputFileFormat) {
             listener.enterInputFileFormat(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitInputFileFormat) {
             listener.exitInputFileFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitInputFileFormat) {
            return visitor.visitInputFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TabTypeExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.DOT);
    	} else {
    		return this.getToken(HiveSQLParser.DOT, i);
    	}
    }
    public KW_ELEM_TYPE(): antlr.TerminalNode[];
    public KW_ELEM_TYPE(i: number): antlr.TerminalNode | null;
    public KW_ELEM_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_ELEM_TYPE);
    	} else {
    		return this.getToken(HiveSQLParser.KW_ELEM_TYPE, i);
    	}
    }
    public KW_KEY_TYPE(): antlr.TerminalNode[];
    public KW_KEY_TYPE(i: number): antlr.TerminalNode | null;
    public KW_KEY_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_KEY_TYPE);
    	} else {
    		return this.getToken(HiveSQLParser.KW_KEY_TYPE, i);
    	}
    }
    public KW_VALUE_TYPE(): antlr.TerminalNode[];
    public KW_VALUE_TYPE(i: number): antlr.TerminalNode | null;
    public KW_VALUE_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_VALUE_TYPE);
    	} else {
    		return this.getToken(HiveSQLParser.KW_VALUE_TYPE, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tabTypeExpr;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTabTypeExpr) {
             listener.enterTabTypeExpr(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTabTypeExpr) {
             listener.exitTabTypeExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTabTypeExpr) {
            return visitor.visitTabTypeExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartTypeExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tabTypeExpr(): TabTypeExprContext {
        return this.getRuleContext(0, TabTypeExprContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partTypeExpr;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartTypeExpr) {
             listener.enterPartTypeExpr(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartTypeExpr) {
             listener.exitPartTypeExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartTypeExpr) {
            return visitor.visitPartTypeExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TabPartColTypeExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public extColumnName(): ExtColumnNameContext | null {
        return this.getRuleContext(0, ExtColumnNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tabPartColTypeExpr;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTabPartColTypeExpr) {
             listener.enterTabPartColTypeExpr(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTabPartColTypeExpr) {
             listener.exitTabPartColTypeExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTabPartColTypeExpr) {
            return visitor.visitTabPartColTypeExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescStatementContext extends antlr.ParserRuleContext {
    public _dbName?: Id_Context;
    public _dcName?: Id_Context;
    public _name?: DescFuncNamesContext;
    public _descOptions?: Token | null;
    public _parttype?: TabPartColTypeExprContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DESCRIBE, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DESC, 0);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATACONNECTOR, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FUNCTION, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public descFuncNames(): DescFuncNamesContext | null {
        return this.getRuleContext(0, DescFuncNamesContext);
    }
    public tabPartColTypeExpr(): TabPartColTypeExprContext | null {
        return this.getRuleContext(0, TabPartColTypeExprContext);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXTENDED, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FORMATTED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_descStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDescStatement) {
             listener.enterDescStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDescStatement) {
             listener.exitDescStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDescStatement) {
            return visitor.visitDescStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzeStatementContext extends antlr.ParserRuleContext {
    public _parttype?: TableOrPartitionContext;
    public _noscan?: Token | null;
    public _statsColumnName?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ANALYZE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMPUTE, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STATISTICS, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CACHE, 0);
    }
    public KW_METADATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_METADATA, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FOR, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COLUMNS, 0);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOSCAN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_analyzeStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAnalyzeStatement) {
             listener.enterAnalyzeStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAnalyzeStatement) {
             listener.exitAnalyzeStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeStatement) {
            return visitor.visitAnalyzeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_IN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_from_in;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFrom_in) {
             listener.enterFrom_in(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFrom_in) {
             listener.exitFrom_in(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFrom_in) {
            return visitor.visitFrom_in(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Db_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATABASE, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_db_schema;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDb_schema) {
             listener.enterDb_schema(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDb_schema) {
             listener.exitDb_schema(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDb_schema) {
            return visitor.visitDb_schema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatementContext extends antlr.ParserRuleContext {
    public _isExtended?: Token | null;
    public _db_name?: Id_Context;
    public _filter?: ShowTablesFilterExprContext;
    public _tabName?: TableNameContext;
    public _prptyName?: Token | null;
    public _dbName?: Id_Context;
    public _parttype?: PartTypeExprContext;
    public _rp_name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SHOW, 0)!;
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATABASES, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SCHEMAS, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LIKE, 0);
    }
    public showStmtIdentifier(): ShowStmtIdentifierContext | null {
        return this.getRuleContext(0, ShowStmtIdentifierContext);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLES, 0);
    }
    public from_in(): From_inContext[];
    public from_in(i: number): From_inContext | null;
    public from_in(i?: number): From_inContext[] | From_inContext | null {
        if (i === undefined) {
            return this.getRuleContexts(From_inContext);
        }

        return this.getRuleContext(i, From_inContext);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXTENDED, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public showTablesFilterExpr(): ShowTablesFilterExprContext | null {
        return this.getRuleContext(0, ShowTablesFilterExprContext);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VIEWS, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MATERIALIZED, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COLUMNS, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SORTED, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FUNCTIONS, 0);
    }
    public showFunctionIdentifier(): ShowFunctionIdentifierContext | null {
        return this.getRuleContext(0, ShowFunctionIdentifierContext);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PARTITIONS, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CREATE, 0);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLE, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TBLPROPERTIES, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOCKS, 0);
    }
    public partTypeExpr(): PartTypeExprContext | null {
        return this.getRuleContext(0, PartTypeExprContext);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMPACTIONS, 0);
    }
    public compactionId(): CompactionIdContext | null {
        return this.getRuleContext(0, CompactionIdContext);
    }
    public compactionPool(): CompactionPoolContext | null {
        return this.getRuleContext(0, CompactionPoolContext);
    }
    public compactionType(): CompactionTypeContext | null {
        return this.getRuleContext(0, CompactionTypeContext);
    }
    public compactionStatus(): CompactionStatusContext | null {
        return this.getRuleContext(0, CompactionStatusContext);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRANSACTIONS, 0);
    }
    public KW_CONF(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CONF, 0);
    }
    public KW_RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RESOURCE, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PLAN, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PLANS, 0);
    }
    public KW_DATACONNECTORS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATACONNECTORS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_showStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterShowStatement) {
             listener.enterShowStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitShowStatement) {
             listener.exitShowStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitShowStatement) {
            return visitor.visitShowStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowTablesFilterExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WHERE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.EQUAL, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LIKE, 0);
    }
    public showStmtIdentifier(): ShowStmtIdentifierContext | null {
        return this.getRuleContext(0, ShowStmtIdentifierContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_showTablesFilterExpr;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterShowTablesFilterExpr) {
             listener.enterShowTablesFilterExpr(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitShowTablesFilterExpr) {
             listener.exitShowTablesFilterExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitShowTablesFilterExpr) {
            return visitor.visitShowTablesFilterExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCK(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LOCK, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public lockMode(): LockModeContext {
        return this.getRuleContext(0, LockModeContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_lockStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterLockStatement) {
             listener.enterLockStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitLockStatement) {
             listener.exitLockStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitLockStatement) {
            return visitor.visitLockStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockDatabaseContext extends antlr.ParserRuleContext {
    public _dbName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCK(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LOCK, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public lockMode(): LockModeContext {
        return this.getRuleContext(0, LockModeContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_lockDatabase;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterLockDatabase) {
             listener.enterLockDatabase(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitLockDatabase) {
             listener.exitLockDatabase(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitLockDatabase) {
            return visitor.visitLockDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHARED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SHARED, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXCLUSIVE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_lockMode;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterLockMode) {
             listener.enterLockMode(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitLockMode) {
             listener.exitLockMode(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitLockMode) {
            return visitor.visitLockMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlockStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNLOCK(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UNLOCK, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_unlockStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterUnlockStatement) {
             listener.enterUnlockStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitUnlockStatement) {
             listener.exitUnlockStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitUnlockStatement) {
            return visitor.visitUnlockStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlockDatabaseContext extends antlr.ParserRuleContext {
    public _dbName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNLOCK(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UNLOCK, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_unlockDatabase;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterUnlockDatabase) {
             listener.enterUnlockDatabase(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitUnlockDatabase) {
             listener.exitUnlockDatabase(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitUnlockDatabase) {
            return visitor.visitUnlockDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoleStatementContext extends antlr.ParserRuleContext {
    public _roleName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ROLE, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createRoleStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateRoleStatement) {
             listener.enterCreateRoleStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateRoleStatement) {
             listener.exitCreateRoleStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateRoleStatement) {
            return visitor.visitCreateRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropRoleStatementContext extends antlr.ParserRuleContext {
    public _roleName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ROLE, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropRoleStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropRoleStatement) {
             listener.enterDropRoleStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropRoleStatement) {
             listener.exitDropRoleStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropRoleStatement) {
            return visitor.visitDropRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantPrivilegesContext extends antlr.ParserRuleContext {
    public _privList?: PrivilegeListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_GRANT, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TO, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public privilegeList(): PrivilegeListContext {
        return this.getRuleContext(0, PrivilegeListContext)!;
    }
    public privilegeObject(): PrivilegeObjectContext | null {
        return this.getRuleContext(0, PrivilegeObjectContext);
    }
    public withGrantOption(): WithGrantOptionContext | null {
        return this.getRuleContext(0, WithGrantOptionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_grantPrivileges;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterGrantPrivileges) {
             listener.enterGrantPrivileges(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitGrantPrivileges) {
             listener.exitGrantPrivileges(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitGrantPrivileges) {
            return visitor.visitGrantPrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokePrivilegesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REVOKE, 0)!;
    }
    public privilegeList(): PrivilegeListContext {
        return this.getRuleContext(0, PrivilegeListContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FROM, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public grantOptionFor(): GrantOptionForContext | null {
        return this.getRuleContext(0, GrantOptionForContext);
    }
    public privilegeObject(): PrivilegeObjectContext | null {
        return this.getRuleContext(0, PrivilegeObjectContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_revokePrivileges;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRevokePrivileges) {
             listener.enterRevokePrivileges(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRevokePrivileges) {
             listener.exitRevokePrivileges(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRevokePrivileges) {
            return visitor.visitRevokePrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_GRANT, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TO, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROLE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public withAdminOption(): WithAdminOptionContext | null {
        return this.getRuleContext(0, WithAdminOptionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_grantRole;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterGrantRole) {
             listener.enterGrantRole(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitGrantRole) {
             listener.exitGrantRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitGrantRole) {
            return visitor.visitGrantRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REVOKE, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FROM, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public adminOptionFor(): AdminOptionForContext | null {
        return this.getRuleContext(0, AdminOptionForContext);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROLE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_revokeRole;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRevokeRole) {
             listener.enterRevokeRole(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRevokeRole) {
             listener.exitRevokeRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRevokeRole) {
            return visitor.visitRevokeRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRoleGrantsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SHOW, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ROLE, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_GRANT, 0)!;
    }
    public principalName(): PrincipalNameContext {
        return this.getRuleContext(0, PrincipalNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_showRoleGrants;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterShowRoleGrants) {
             listener.enterShowRoleGrants(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitShowRoleGrants) {
             listener.exitShowRoleGrants(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitShowRoleGrants) {
            return visitor.visitShowRoleGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRolesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SHOW, 0)!;
    }
    public KW_ROLES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ROLES, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_showRoles;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterShowRoles) {
             listener.enterShowRoles(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitShowRoles) {
             listener.exitShowRoles(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitShowRoles) {
            return visitor.visitShowRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCurrentRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SHOW, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CURRENT, 0)!;
    }
    public KW_ROLES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ROLES, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_showCurrentRole;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterShowCurrentRole) {
             listener.enterShowCurrentRole(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitShowCurrentRole) {
             listener.exitShowCurrentRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitShowCurrentRole) {
            return visitor.visitShowCurrentRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetRoleContext extends antlr.ParserRuleContext {
    public _all?: Token | null;
    public _none?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ROLE, 0)!;
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ALL, 0);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NONE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_setRole;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSetRole) {
             listener.enterSetRole(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSetRole) {
             listener.exitSetRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSetRole) {
            return visitor.visitSetRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowGrantsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SHOW, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_GRANT, 0)!;
    }
    public principalName(): PrincipalNameContext | null {
        return this.getRuleContext(0, PrincipalNameContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ON, 0);
    }
    public privilegeIncludeColObject(): PrivilegeIncludeColObjectContext | null {
        return this.getRuleContext(0, PrivilegeIncludeColObjectContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_showGrants;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterShowGrants) {
             listener.enterShowGrants(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitShowGrants) {
             listener.exitShowGrants(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitShowGrants) {
            return visitor.visitShowGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRolePrincipalsContext extends antlr.ParserRuleContext {
    public _roleName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SHOW, 0)!;
    }
    public KW_PRINCIPALS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PRINCIPALS, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_showRolePrincipals;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterShowRolePrincipals) {
             listener.enterShowRolePrincipals(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitShowRolePrincipals) {
             listener.exitShowRolePrincipals(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitShowRolePrincipals) {
            return visitor.visitShowRolePrincipals(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeIncludeColObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ALL, 0);
    }
    public privObjectCols(): PrivObjectColsContext | null {
        return this.getRuleContext(0, PrivObjectColsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_privilegeIncludeColObject;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrivilegeIncludeColObject) {
             listener.enterPrivilegeIncludeColObject(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrivilegeIncludeColObject) {
             listener.exitPrivilegeIncludeColObject(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeIncludeColObject) {
            return visitor.visitPrivilegeIncludeColObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ON, 0)!;
    }
    public privObject(): PrivObjectContext {
        return this.getRuleContext(0, PrivObjectContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_privilegeObject;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrivilegeObject) {
             listener.enterPrivilegeObject(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrivilegeObject) {
             listener.exitPrivilegeObject(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeObject) {
            return visitor.visitPrivilegeObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivObjectContext extends antlr.ParserRuleContext {
    public _path?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_URI(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_URI, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SERVER, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_privObject;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrivObject) {
             listener.enterPrivObject(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrivObject) {
             listener.exitPrivObject(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrivObject) {
            return visitor.visitPrivObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivObjectColsContext extends antlr.ParserRuleContext {
    public _cols?: ColumnNameListContext;
    public _path?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public KW_URI(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_URI, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SERVER, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_privObjectCols;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrivObjectCols) {
             listener.enterPrivObjectCols(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrivObjectCols) {
             listener.exitPrivObjectCols(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrivObjectCols) {
            return visitor.visitPrivObjectCols(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privlegeDef(): PrivlegeDefContext[];
    public privlegeDef(i: number): PrivlegeDefContext | null;
    public privlegeDef(i?: number): PrivlegeDefContext[] | PrivlegeDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivlegeDefContext);
        }

        return this.getRuleContext(i, PrivlegeDefContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_privilegeList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrivilegeList) {
             listener.enterPrivilegeList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrivilegeList) {
             listener.exitPrivilegeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeList) {
            return visitor.visitPrivilegeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivlegeDefContext extends antlr.ParserRuleContext {
    public _cols?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilegeType(): PrivilegeTypeContext {
        return this.getRuleContext(0, PrivilegeTypeContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_privlegeDef;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrivlegeDef) {
             listener.enterPrivlegeDef(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrivlegeDef) {
             listener.exitPrivlegeDef(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrivlegeDef) {
            return visitor.visitPrivlegeDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ALL, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ALTER, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UPDATE, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CREATE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DROP, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOCK, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SELECT, 0);
    }
    public KW_SHOW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SHOW_DATABASE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INSERT, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DELETE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_privilegeType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrivilegeType) {
             listener.enterPrivilegeType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrivilegeType) {
             listener.exitPrivilegeType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeType) {
            return visitor.visitPrivilegeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public principalName(): PrincipalNameContext[];
    public principalName(i: number): PrincipalNameContext | null;
    public principalName(i?: number): PrincipalNameContext[] | PrincipalNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalNameContext);
        }

        return this.getRuleContext(i, PrincipalNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_principalSpecification;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrincipalSpecification) {
             listener.enterPrincipalSpecification(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrincipalSpecification) {
             listener.exitPrincipalSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrincipalSpecification) {
            return visitor.visitPrincipalSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_USER, 0);
    }
    public principalIdentifier(): PrincipalIdentifierContext | null {
        return this.getRuleContext(0, PrincipalIdentifierContext);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_GROUP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROLE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_principalName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrincipalName) {
             listener.enterPrincipalName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrincipalName) {
             listener.exitPrincipalName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrincipalName) {
            return visitor.visitPrincipalName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithGrantOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WITH, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_GRANT, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_withGrantOption;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWithGrantOption) {
             listener.enterWithGrantOption(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWithGrantOption) {
             listener.exitWithGrantOption(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWithGrantOption) {
            return visitor.visitWithGrantOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantOptionForContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_GRANT, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OPTION, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FOR, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_grantOptionFor;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterGrantOptionFor) {
             listener.enterGrantOptionFor(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitGrantOptionFor) {
             listener.exitGrantOptionFor(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitGrantOptionFor) {
            return visitor.visitGrantOptionFor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AdminOptionForContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADMIN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ADMIN, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OPTION, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FOR, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_adminOptionFor;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAdminOptionFor) {
             listener.enterAdminOptionFor(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAdminOptionFor) {
             listener.exitAdminOptionFor(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAdminOptionFor) {
            return visitor.visitAdminOptionFor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithAdminOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WITH, 0)!;
    }
    public KW_ADMIN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ADMIN, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_withAdminOption;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWithAdminOption) {
             listener.enterWithAdminOption(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWithAdminOption) {
             listener.exitWithAdminOption(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWithAdminOption) {
            return visitor.visitWithAdminOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MetastoreCheckContext extends antlr.ParserRuleContext {
    public _repair?: Token | null;
    public _opt?: Token | null;
    public _parts?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MSCK(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MSCK, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REPAIR, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PARTITIONS, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DROP, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SYNC, 0);
    }
    public partitionSelectorSpec(): PartitionSelectorSpecContext | null {
        return this.getRuleContext(0, PartitionSelectorSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_metastoreCheck;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterMetastoreCheck) {
             listener.enterMetastoreCheck(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitMetastoreCheck) {
             listener.exitMetastoreCheck(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitMetastoreCheck) {
            return visitor.visitMetastoreCheck(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public resource(): ResourceContext[];
    public resource(i: number): ResourceContext | null;
    public resource(i?: number): ResourceContext[] | ResourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }

        return this.getRuleContext(i, ResourceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_resourceList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterResourceList) {
             listener.enterResourceList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitResourceList) {
             listener.exitResourceList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitResourceList) {
            return visitor.visitResourceList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceContext extends antlr.ParserRuleContext {
    public _resType?: ResourceTypeContext;
    public _resPath?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public resourceType(): ResourceTypeContext {
        return this.getRuleContext(0, ResourceTypeContext)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_resource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterResource) {
             listener.enterResource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitResource) {
             listener.exitResource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitResource) {
            return visitor.visitResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_JAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_JAR, 0);
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FILE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ARCHIVE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_resourceType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterResourceType) {
             listener.enterResourceType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitResourceType) {
             listener.exitResourceType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitResourceType) {
            return visitor.visitResourceType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFunctionStatementContext extends antlr.ParserRuleContext {
    public _temp?: Token | null;
    public _rList?: ResourceListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FUNCTION, 0)!;
    }
    public functionIdentifier(): FunctionIdentifierContext {
        return this.getRuleContext(0, FunctionIdentifierContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_USING, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TEMPORARY, 0);
    }
    public resourceList(): ResourceListContext | null {
        return this.getRuleContext(0, ResourceListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createFunctionStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateFunctionStatement) {
             listener.enterCreateFunctionStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateFunctionStatement) {
             listener.exitCreateFunctionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateFunctionStatement) {
            return visitor.visitCreateFunctionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropFunctionStatementContext extends antlr.ParserRuleContext {
    public _temp?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FUNCTION, 0)!;
    }
    public functionIdentifier(): FunctionIdentifierContext {
        return this.getRuleContext(0, FunctionIdentifierContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TEMPORARY, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropFunctionStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropFunctionStatement) {
             listener.enterDropFunctionStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropFunctionStatement) {
             listener.exitDropFunctionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropFunctionStatement) {
            return visitor.visitDropFunctionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReloadFunctionsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RELOAD(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_RELOAD, 0)!;
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FUNCTIONS, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FUNCTION, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_reloadFunctionsStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterReloadFunctionsStatement) {
             listener.enterReloadFunctionsStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitReloadFunctionsStatement) {
             listener.exitReloadFunctionsStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitReloadFunctionsStatement) {
            return visitor.visitReloadFunctionsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMacroStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TEMPORARY, 0)!;
    }
    public KW_MACRO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MACRO, 0)!;
    }
    public Identifier(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.Identifier, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createMacroStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateMacroStatement) {
             listener.enterCreateMacroStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateMacroStatement) {
             listener.exitCreateMacroStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateMacroStatement) {
            return visitor.visitCreateMacroStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropMacroStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TEMPORARY, 0)!;
    }
    public KW_MACRO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MACRO, 0)!;
    }
    public Identifier(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.Identifier, 0)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropMacroStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropMacroStatement) {
             listener.enterDropMacroStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropMacroStatement) {
             listener.exitDropMacroStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropMacroStatement) {
            return visitor.visitDropMacroStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewStatementContext extends antlr.ParserRuleContext {
    public _name?: TableNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_VIEW, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AS, 0)!;
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext {
        return this.getRuleContext(0, SelectStatementWithCTEContext)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public orReplace(): OrReplaceContext | null {
        return this.getRuleContext(0, OrReplaceContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public columnNameCommentList(): ColumnNameCommentListContext | null {
        return this.getRuleContext(0, ColumnNameCommentListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public viewPartition(): ViewPartitionContext | null {
        return this.getRuleContext(0, ViewPartitionContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createViewStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateViewStatement) {
             listener.enterCreateViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateViewStatement) {
             listener.exitCreateViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateViewStatement) {
            return visitor.visitCreateViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewPartitionContext extends antlr.ParserRuleContext {
    public _spec?: PartitionTransformSpecContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITIONED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PARTITIONED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ON, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SPEC, 0);
    }
    public partitionTransformSpec(): PartitionTransformSpecContext | null {
        return this.getRuleContext(0, PartitionTransformSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_viewPartition;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterViewPartition) {
             listener.enterViewPartition(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitViewPartition) {
             listener.exitViewPartition(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitViewPartition) {
            return visitor.visitViewPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewOrganizationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewClusterSpec(): ViewClusterSpecContext | null {
        return this.getRuleContext(0, ViewClusterSpecContext);
    }
    public viewComplexSpec(): ViewComplexSpecContext | null {
        return this.getRuleContext(0, ViewComplexSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_viewOrganization;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterViewOrganization) {
             listener.enterViewOrganization(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitViewOrganization) {
             listener.exitViewOrganization(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitViewOrganization) {
            return visitor.visitViewOrganization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewClusterSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CLUSTERED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_viewClusterSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterViewClusterSpec) {
             listener.enterViewClusterSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitViewClusterSpec) {
             listener.exitViewClusterSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitViewClusterSpec) {
            return visitor.visitViewClusterSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewComplexSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewDistSpec(): ViewDistSpecContext {
        return this.getRuleContext(0, ViewDistSpecContext)!;
    }
    public viewSortSpec(): ViewSortSpecContext {
        return this.getRuleContext(0, ViewSortSpecContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_viewComplexSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterViewComplexSpec) {
             listener.enterViewComplexSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitViewComplexSpec) {
             listener.exitViewComplexSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitViewComplexSpec) {
            return visitor.visitViewComplexSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewDistSpecContext extends antlr.ParserRuleContext {
    public _colList?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTRIBUTED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DISTRIBUTED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_viewDistSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterViewDistSpec) {
             listener.enterViewDistSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitViewDistSpec) {
             listener.exitViewDistSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitViewDistSpec) {
            return visitor.visitViewDistSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewSortSpecContext extends antlr.ParserRuleContext {
    public _colList?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SORTED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SORTED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_viewSortSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterViewSortSpec) {
             listener.enterViewSortSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitViewSortSpec) {
             listener.exitViewSortSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitViewSortSpec) {
            return visitor.visitViewSortSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropViewStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropViewStatement) {
             listener.enterDropViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropViewStatement) {
             listener.exitDropViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropViewStatement) {
            return visitor.visitDropViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMaterializedViewStatementContext extends antlr.ParserRuleContext {
    public _name?: TableNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_VIEW, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AS, 0)!;
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext {
        return this.getRuleContext(0, SelectStatementWithCTEContext)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public rewriteDisabled(): RewriteDisabledContext | null {
        return this.getRuleContext(0, RewriteDisabledContext);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public viewPartition(): ViewPartitionContext | null {
        return this.getRuleContext(0, ViewPartitionContext);
    }
    public viewOrganization(): ViewOrganizationContext | null {
        return this.getRuleContext(0, ViewOrganizationContext);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public tableLocation(): TableLocationContext | null {
        return this.getRuleContext(0, TableLocationContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createMaterializedViewStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateMaterializedViewStatement) {
             listener.enterCreateMaterializedViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateMaterializedViewStatement) {
             listener.exitCreateMaterializedViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedViewStatement) {
            return visitor.visitCreateMaterializedViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropMaterializedViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropMaterializedViewStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropMaterializedViewStatement) {
             listener.enterDropMaterializedViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropMaterializedViewStatement) {
             listener.exitDropMaterializedViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropMaterializedViewStatement) {
            return visitor.visitDropMaterializedViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateScheduledQueryStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_SCHEDULED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SCHEDULED, 0)!;
    }
    public KW_QUERY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_QUERY, 0)!;
    }
    public scheduleSpec(): ScheduleSpecContext {
        return this.getRuleContext(0, ScheduleSpecContext)!;
    }
    public definedAsSpec(): DefinedAsSpecContext {
        return this.getRuleContext(0, DefinedAsSpecContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public executedAsSpec(): ExecutedAsSpecContext | null {
        return this.getRuleContext(0, ExecutedAsSpecContext);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createScheduledQueryStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateScheduledQueryStatement) {
             listener.enterCreateScheduledQueryStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateScheduledQueryStatement) {
             listener.exitCreateScheduledQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateScheduledQueryStatement) {
            return visitor.visitCreateScheduledQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropScheduledQueryStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_SCHEDULED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SCHEDULED, 0)!;
    }
    public KW_QUERY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_QUERY, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropScheduledQueryStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropScheduledQueryStatement) {
             listener.enterDropScheduledQueryStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropScheduledQueryStatement) {
             listener.exitDropScheduledQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropScheduledQueryStatement) {
            return visitor.visitDropScheduledQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterScheduledQueryStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _mod?: AlterScheduledQueryChangeContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ALTER, 0)!;
    }
    public KW_SCHEDULED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SCHEDULED, 0)!;
    }
    public KW_QUERY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_QUERY, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public alterScheduledQueryChange(): AlterScheduledQueryChangeContext {
        return this.getRuleContext(0, AlterScheduledQueryChangeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterScheduledQueryStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterScheduledQueryStatement) {
             listener.enterAlterScheduledQueryStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterScheduledQueryStatement) {
             listener.exitAlterScheduledQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterScheduledQueryStatement) {
            return visitor.visitAlterScheduledQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterScheduledQueryChangeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public scheduleSpec(): ScheduleSpecContext | null {
        return this.getRuleContext(0, ScheduleSpecContext);
    }
    public executedAsSpec(): ExecutedAsSpecContext | null {
        return this.getRuleContext(0, ExecutedAsSpecContext);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public definedAsSpec(): DefinedAsSpecContext | null {
        return this.getRuleContext(0, DefinedAsSpecContext);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXECUTE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterScheduledQueryChange;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterScheduledQueryChange) {
             listener.enterAlterScheduledQueryChange(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterScheduledQueryChange) {
             listener.exitAlterScheduledQueryChange(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterScheduledQueryChange) {
            return visitor.visitAlterScheduledQueryChange(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScheduleSpecContext extends antlr.ParserRuleContext {
    public _cronString?: Token | null;
    public _value?: Token | null;
    public _qualifier?: IntervalQualifiersContext;
    public _offsetTs?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CRON(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CRON, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public KW_EVERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EVERY, 0);
    }
    public intervalQualifiers(): IntervalQualifiersContext | null {
        return this.getRuleContext(0, IntervalQualifiersContext);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AT, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OFFSET, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BY, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_scheduleSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterScheduleSpec) {
             listener.enterScheduleSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitScheduleSpec) {
             listener.exitScheduleSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitScheduleSpec) {
            return visitor.visitScheduleSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecutedAsSpecContext extends antlr.ParserRuleContext {
    public _executedAs?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_EXECUTED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_executedAsSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExecutedAsSpec) {
             listener.enterExecutedAsSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExecutedAsSpec) {
             listener.exitExecutedAsSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExecutedAsSpec) {
            return visitor.visitExecutedAsSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefinedAsSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AS, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEFINED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_definedAsSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDefinedAsSpec) {
             listener.enterDefinedAsSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDefinedAsSpec) {
             listener.exitDefinedAsSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDefinedAsSpec) {
            return visitor.visitDefinedAsSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowFunctionIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionIdentifier(): FunctionIdentifierContext | null {
        return this.getRuleContext(0, FunctionIdentifierContext);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_showFunctionIdentifier;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterShowFunctionIdentifier) {
             listener.enterShowFunctionIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitShowFunctionIdentifier) {
             listener.exitShowFunctionIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitShowFunctionIdentifier) {
            return visitor.visitShowFunctionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStmtIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_showStmtIdentifier;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterShowStmtIdentifier) {
             listener.enterShowStmtIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitShowStmtIdentifier) {
             listener.exitShowStmtIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitShowStmtIdentifier) {
            return visitor.visitShowStmtIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableCommentContext extends antlr.ParserRuleContext {
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableComment;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableComment) {
             listener.enterTableComment(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableComment) {
             listener.exitTableComment(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableComment) {
            return visitor.visitTableComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableUsingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_USING, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSQLParser.StringLiteral, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableUsing;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableUsing) {
             listener.enterTableUsing(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableUsing) {
             listener.exitTableUsing(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableUsing) {
            return visitor.visitTableUsing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablePartitionSpecContext extends antlr.ParserRuleContext {
    public _opt1?: CreateTablePartitionColumnTypeSpecContext;
    public _opt2?: CreateTablePartitionColumnSpecContext;
    public _spec?: PartitionTransformSpecContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITIONED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PARTITIONED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SPEC, 0);
    }
    public partitionTransformSpec(): PartitionTransformSpecContext | null {
        return this.getRuleContext(0, PartitionTransformSpecContext);
    }
    public createTablePartitionColumnTypeSpec(): CreateTablePartitionColumnTypeSpecContext | null {
        return this.getRuleContext(0, CreateTablePartitionColumnTypeSpecContext);
    }
    public createTablePartitionColumnSpec(): CreateTablePartitionColumnSpecContext | null {
        return this.getRuleContext(0, CreateTablePartitionColumnSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createTablePartitionSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateTablePartitionSpec) {
             listener.enterCreateTablePartitionSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateTablePartitionSpec) {
             listener.exitCreateTablePartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateTablePartitionSpec) {
            return visitor.visitCreateTablePartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablePartitionColumnTypeSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameTypeConstraint(): ColumnNameTypeConstraintContext[];
    public columnNameTypeConstraint(i: number): ColumnNameTypeConstraintContext | null;
    public columnNameTypeConstraint(i?: number): ColumnNameTypeConstraintContext[] | ColumnNameTypeConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameTypeConstraintContext);
        }

        return this.getRuleContext(i, ColumnNameTypeConstraintContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createTablePartitionColumnTypeSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateTablePartitionColumnTypeSpec) {
             listener.enterCreateTablePartitionColumnTypeSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateTablePartitionColumnTypeSpec) {
             listener.exitCreateTablePartitionColumnTypeSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateTablePartitionColumnTypeSpec) {
            return visitor.visitCreateTablePartitionColumnTypeSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablePartitionColumnSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createTablePartitionColumnSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateTablePartitionColumnSpec) {
             listener.enterCreateTablePartitionColumnSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateTablePartitionColumnSpec) {
             listener.exitCreateTablePartitionColumnSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateTablePartitionColumnSpec) {
            return visitor.visitCreateTablePartitionColumnSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTransformSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameTransformConstraint(): ColumnNameTransformConstraintContext[];
    public columnNameTransformConstraint(i: number): ColumnNameTransformConstraintContext | null;
    public columnNameTransformConstraint(i?: number): ColumnNameTransformConstraintContext[] | ColumnNameTransformConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameTransformConstraintContext);
        }

        return this.getRuleContext(i, ColumnNameTransformConstraintContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionTransformSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionTransformSpec) {
             listener.enterPartitionTransformSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionTransformSpec) {
             listener.exitPartitionTransformSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionTransformSpec) {
            return visitor.visitPartitionTransformSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTransformConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionTransformType(): PartitionTransformTypeContext {
        return this.getRuleContext(0, PartitionTransformTypeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameTransformConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameTransformConstraint) {
             listener.enterColumnNameTransformConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameTransformConstraint) {
             listener.exitColumnNameTransformConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTransformConstraint) {
            return visitor.visitColumnNameTransformConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTransformTypeContext extends antlr.ParserRuleContext {
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_YEAR, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MONTH, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_HOUR, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.COMMA, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRUNCATE, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BUCKET, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionTransformType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionTransformType) {
             listener.enterPartitionTransformType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionTransformType) {
             listener.exitPartitionTransformType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionTransformType) {
            return visitor.visitPartitionTransformType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableBucketsContext extends antlr.ParserRuleContext {
    public _bucketCols?: ColumnNameListContext;
    public _sortCols?: ColumnNameOrderListContext;
    public _num?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CLUSTERED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_BY);
    	} else {
    		return this.getToken(HiveSQLParser.KW_BY, i);
    	}
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.LPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.RPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.RPAREN, i);
    	}
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_INTO, 0)!;
    }
    public KW_BUCKETS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BUCKETS, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public Number(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.Number, 0)!;
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SORTED, 0);
    }
    public columnNameOrderList(): ColumnNameOrderListContext | null {
        return this.getRuleContext(0, ColumnNameOrderListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableBuckets;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableBuckets) {
             listener.enterTableBuckets(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableBuckets) {
             listener.exitTableBuckets(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableBuckets) {
            return visitor.visitTableBuckets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableImplBucketsContext extends antlr.ParserRuleContext {
    public _num?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CLUSTERED, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_INTO, 0)!;
    }
    public KW_BUCKETS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BUCKETS, 0)!;
    }
    public Number(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.Number, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableImplBuckets;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableImplBuckets) {
             listener.enterTableImplBuckets(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableImplBuckets) {
             listener.exitTableImplBuckets(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableImplBuckets) {
            return visitor.visitTableImplBuckets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSkewedContext extends antlr.ParserRuleContext {
    public _skewedCols?: ColumnNameListContext;
    public _skewedValues?: SkewedValueElementContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SKEWED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SKEWED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.LPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.RPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.RPAREN, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ON, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public skewedValueElement(): SkewedValueElementContext {
        return this.getRuleContext(0, SkewedValueElementContext)!;
    }
    public storedAsDirs(): StoredAsDirsContext | null {
        return this.getRuleContext(0, StoredAsDirsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableSkewed;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableSkewed) {
             listener.enterTableSkewed(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableSkewed) {
             listener.exitTableSkewed(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableSkewed) {
            return visitor.visitTableSkewed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowFormatSerde(): RowFormatSerdeContext | null {
        return this.getRuleContext(0, RowFormatSerdeContext);
    }
    public rowFormatDelimited(): RowFormatDelimitedContext | null {
        return this.getRuleContext(0, RowFormatDelimitedContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rowFormat;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRowFormat) {
             listener.enterRowFormat(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRowFormat) {
             listener.exitRowFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRowFormat) {
            return visitor.visitRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RecordReaderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RECORDREADER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_RECORDREADER, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_recordReader;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRecordReader) {
             listener.enterRecordReader(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRecordReader) {
             listener.exitRecordReader(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRecordReader) {
            return visitor.visitRecordReader(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RecordWriterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_RECORDWRITER, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_recordWriter;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRecordWriter) {
             listener.enterRecordWriter(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRecordWriter) {
             listener.exitRecordWriter(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRecordWriter) {
            return visitor.visitRecordWriter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatSerdeContext extends antlr.ParserRuleContext {
    public _name?: Token | null;
    public _serdeprops?: TablePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SERDE, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SERDEPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rowFormatSerde;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRowFormatSerde) {
             listener.enterRowFormatSerde(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRowFormatSerde) {
             listener.exitRowFormatSerde(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRowFormatSerde) {
            return visitor.visitRowFormatSerde(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatDelimitedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FORMAT, 0)!;
    }
    public KW_DELIMITED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DELIMITED, 0)!;
    }
    public tableRowFormatFieldIdentifier(): TableRowFormatFieldIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatFieldIdentifierContext);
    }
    public tableRowFormatCollItemsIdentifier(): TableRowFormatCollItemsIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatCollItemsIdentifierContext);
    }
    public tableRowFormatMapKeysIdentifier(): TableRowFormatMapKeysIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatMapKeysIdentifierContext);
    }
    public tableRowFormatLinesIdentifier(): TableRowFormatLinesIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatLinesIdentifierContext);
    }
    public tableRowNullFormat(): TableRowNullFormatContext | null {
        return this.getRuleContext(0, TableRowNullFormatContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rowFormatDelimited;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRowFormatDelimited) {
             listener.enterRowFormatDelimited(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRowFormatDelimited) {
             listener.exitRowFormatDelimited(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRowFormatDelimited) {
            return visitor.visitRowFormatDelimited(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowFormatDelimited(): RowFormatDelimitedContext | null {
        return this.getRuleContext(0, RowFormatDelimitedContext);
    }
    public rowFormatSerde(): RowFormatSerdeContext | null {
        return this.getRuleContext(0, RowFormatSerdeContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableRowFormat;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableRowFormat) {
             listener.enterTableRowFormat(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableRowFormat) {
             listener.exitTableRowFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormat) {
            return visitor.visitTableRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertiesPrefixedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TBLPROPERTIES, 0)!;
    }
    public tableProperties(): TablePropertiesContext {
        return this.getRuleContext(0, TablePropertiesContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tablePropertiesPrefixed;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTablePropertiesPrefixed) {
             listener.enterTablePropertiesPrefixed(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTablePropertiesPrefixed) {
             listener.exitTablePropertiesPrefixed(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTablePropertiesPrefixed) {
            return visitor.visitTablePropertiesPrefixed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public tablePropertiesList(): TablePropertiesListContext {
        return this.getRuleContext(0, TablePropertiesListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableProperties;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableProperties) {
             listener.enterTableProperties(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableProperties) {
             listener.exitTableProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableProperties) {
            return visitor.visitTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertiesListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyValueProperty(): KeyValuePropertyContext[];
    public keyValueProperty(i: number): KeyValuePropertyContext | null;
    public keyValueProperty(i?: number): KeyValuePropertyContext[] | KeyValuePropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyValuePropertyContext);
        }

        return this.getRuleContext(i, KeyValuePropertyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public keyProperty(): KeyPropertyContext[];
    public keyProperty(i: number): KeyPropertyContext | null;
    public keyProperty(i?: number): KeyPropertyContext[] | KeyPropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyPropertyContext);
        }

        return this.getRuleContext(i, KeyPropertyContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tablePropertiesList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTablePropertiesList) {
             listener.enterTablePropertiesList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTablePropertiesList) {
             listener.exitTablePropertiesList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTablePropertiesList) {
            return visitor.visitTablePropertiesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyValuePropertyContext extends antlr.ParserRuleContext {
    public _key?: Token | null;
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.EQUAL, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSQLParser.StringLiteral, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_keyValueProperty;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterKeyValueProperty) {
             listener.enterKeyValueProperty(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitKeyValueProperty) {
             listener.exitKeyValueProperty(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitKeyValueProperty) {
            return visitor.visitKeyValueProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyPropertyContext extends antlr.ParserRuleContext {
    public _key?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_keyProperty;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterKeyProperty) {
             listener.enterKeyProperty(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitKeyProperty) {
             listener.exitKeyProperty(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitKeyProperty) {
            return visitor.visitKeyProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatFieldIdentifierContext extends antlr.ParserRuleContext {
    public _fldIdnt?: Token | null;
    public _fldEscape?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FIELDS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FIELDS, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_BY);
    	} else {
    		return this.getToken(HiveSQLParser.KW_BY, i);
    	}
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSQLParser.StringLiteral, i);
    	}
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ESCAPED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableRowFormatFieldIdentifier;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableRowFormatFieldIdentifier) {
             listener.enterTableRowFormatFieldIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableRowFormatFieldIdentifier) {
             listener.exitTableRowFormatFieldIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatFieldIdentifier) {
            return visitor.visitTableRowFormatFieldIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatCollItemsIdentifierContext extends antlr.ParserRuleContext {
    public _collIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COLLECTION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COLLECTION, 0)!;
    }
    public KW_ITEMS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ITEMS, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableRowFormatCollItemsIdentifier;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableRowFormatCollItemsIdentifier) {
             listener.enterTableRowFormatCollItemsIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableRowFormatCollItemsIdentifier) {
             listener.exitTableRowFormatCollItemsIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatCollItemsIdentifier) {
            return visitor.visitTableRowFormatCollItemsIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatMapKeysIdentifierContext extends antlr.ParserRuleContext {
    public _mapKeysIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MAP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MAP, 0)!;
    }
    public KW_KEYS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_KEYS, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableRowFormatMapKeysIdentifier;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableRowFormatMapKeysIdentifier) {
             listener.enterTableRowFormatMapKeysIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableRowFormatMapKeysIdentifier) {
             listener.exitTableRowFormatMapKeysIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatMapKeysIdentifier) {
            return visitor.visitTableRowFormatMapKeysIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatLinesIdentifierContext extends antlr.ParserRuleContext {
    public _linesIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LINES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LINES, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableRowFormatLinesIdentifier;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableRowFormatLinesIdentifier) {
             listener.enterTableRowFormatLinesIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableRowFormatLinesIdentifier) {
             listener.exitTableRowFormatLinesIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatLinesIdentifier) {
            return visitor.visitTableRowFormatLinesIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowNullFormatContext extends antlr.ParserRuleContext {
    public _nullIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_NULL, 0)!;
    }
    public KW_DEFINED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DEFINED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableRowNullFormat;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableRowNullFormat) {
             listener.enterTableRowNullFormat(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableRowNullFormat) {
             listener.exitTableRowNullFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableRowNullFormat) {
            return visitor.visitTableRowNullFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: Token | null;
    public _outFmt?: Token | null;
    public _inDriver?: Token | null;
    public _outDriver?: Token | null;
    public _storageHandler?: Token | null;
    public _serdeprops?: TablePropertiesContext;
    public _fileformat?: Id_Context;
    public _genericSpec?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode[];
    public KW_STORED(i: number): antlr.TerminalNode | null;
    public KW_STORED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_STORED);
    	} else {
    		return this.getToken(HiveSQLParser.KW_STORED, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INPUTFORMAT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OUTPUTFORMAT, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSQLParser.StringLiteral, i);
    	}
    }
    public KW_INPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INPUTDRIVER, 0);
    }
    public KW_OUTPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OUTPUTDRIVER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BY, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SERDEPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableFileFormat;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableFileFormat) {
             listener.enterTableFileFormat(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableFileFormat) {
             listener.exitTableFileFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableFileFormat) {
            return visitor.visitTableFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableLocationContext extends antlr.ParserRuleContext {
    public _locn?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LOCATION, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableLocation;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableLocation) {
             listener.enterTableLocation(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableLocation) {
             listener.exitTableLocation(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableLocation) {
            return visitor.visitTableLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameType(): ColumnNameTypeContext[];
    public columnNameType(i: number): ColumnNameTypeContext | null;
    public columnNameType(i?: number): ColumnNameTypeContext[] | ColumnNameTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameTypeContext);
        }

        return this.getRuleContext(i, ColumnNameTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameTypeList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameTypeList) {
             listener.enterColumnNameTypeList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameTypeList) {
             listener.exitColumnNameTypeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeList) {
            return visitor.visitColumnNameTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeOrConstraintListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameTypeOrConstraint(): ColumnNameTypeOrConstraintContext[];
    public columnNameTypeOrConstraint(i: number): ColumnNameTypeOrConstraintContext | null;
    public columnNameTypeOrConstraint(i?: number): ColumnNameTypeOrConstraintContext[] | ColumnNameTypeOrConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameTypeOrConstraintContext);
        }

        return this.getRuleContext(i, ColumnNameTypeOrConstraintContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameTypeOrConstraintList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameTypeOrConstraintList) {
             listener.enterColumnNameTypeOrConstraintList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameTypeOrConstraintList) {
             listener.exitColumnNameTypeOrConstraintList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeOrConstraintList) {
            return visitor.visitColumnNameTypeOrConstraintList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameColonTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameColonType(): ColumnNameColonTypeContext[];
    public columnNameColonType(i: number): ColumnNameColonTypeContext | null;
    public columnNameColonType(i?: number): ColumnNameColonTypeContext[] | ColumnNameColonTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameColonTypeContext);
        }

        return this.getRuleContext(i, ColumnNameColonTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameColonTypeList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameColonTypeList) {
             listener.enterColumnNameColonTypeList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameColonTypeList) {
             listener.exitColumnNameColonTypeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameColonTypeList) {
            return visitor.visitColumnNameColonTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameList) {
             listener.enterColumnNameList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameList) {
             listener.exitColumnNameList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameList) {
            return visitor.visitColumnNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.DOT);
    	} else {
    		return this.getToken(HiveSQLParser.DOT, i);
    	}
    }
    public KW_ELEM_TYPE(): antlr.TerminalNode[];
    public KW_ELEM_TYPE(i: number): antlr.TerminalNode | null;
    public KW_ELEM_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_ELEM_TYPE);
    	} else {
    		return this.getToken(HiveSQLParser.KW_ELEM_TYPE, i);
    	}
    }
    public KW_KEY_TYPE(): antlr.TerminalNode[];
    public KW_KEY_TYPE(i: number): antlr.TerminalNode | null;
    public KW_KEY_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_KEY_TYPE);
    	} else {
    		return this.getToken(HiveSQLParser.KW_KEY_TYPE, i);
    	}
    }
    public KW_VALUE_TYPE(): antlr.TerminalNode[];
    public KW_VALUE_TYPE(i: number): antlr.TerminalNode | null;
    public KW_VALUE_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_VALUE_TYPE);
    	} else {
    		return this.getToken(HiveSQLParser.KW_VALUE_TYPE, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_extColumnName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExtColumnName) {
             listener.enterExtColumnName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExtColumnName) {
             listener.exitExtColumnName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExtColumnName) {
            return visitor.visitExtColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameOrderListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameOrder(): ColumnNameOrderContext[];
    public columnNameOrder(i: number): ColumnNameOrderContext | null;
    public columnNameOrder(i?: number): ColumnNameOrderContext[] | ColumnNameOrderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameOrderContext);
        }

        return this.getRuleContext(i, ColumnNameOrderContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameOrderList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameOrderList) {
             listener.enterColumnNameOrderList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameOrderList) {
             listener.exitColumnNameOrderList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameOrderList) {
            return visitor.visitColumnNameOrderList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnParenthesesListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnParenthesesList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnParenthesesList) {
             listener.enterColumnParenthesesList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnParenthesesList) {
             listener.exitColumnParenthesesList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnParenthesesList) {
            return visitor.visitColumnParenthesesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnableValidateSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public validateSpecification(): ValidateSpecificationContext | null {
        return this.getRuleContext(0, ValidateSpecificationContext);
    }
    public enforcedSpecification(): EnforcedSpecificationContext | null {
        return this.getRuleContext(0, EnforcedSpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_enableValidateSpecification;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterEnableValidateSpecification) {
             listener.enterEnableValidateSpecification(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitEnableValidateSpecification) {
             listener.exitEnableValidateSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitEnableValidateSpecification) {
            return visitor.visitEnableValidateSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnableSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ENABLE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DISABLE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_enableSpecification;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterEnableSpecification) {
             listener.enterEnableSpecification(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitEnableSpecification) {
             listener.exitEnableSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitEnableSpecification) {
            return visitor.visitEnableSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValidateSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VALIDATE, 0);
    }
    public KW_NOVALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOVALIDATE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_validateSpecification;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterValidateSpecification) {
             listener.enterValidateSpecification(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitValidateSpecification) {
             listener.exitValidateSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitValidateSpecification) {
            return visitor.visitValidateSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnforcedSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ENFORCED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ENFORCED, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_enforcedSpecification;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterEnforcedSpecification) {
             listener.enterEnforcedSpecification(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitEnforcedSpecification) {
             listener.exitEnforcedSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitEnforcedSpecification) {
            return visitor.visitEnforcedSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RELY, 0);
    }
    public KW_NORELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NORELY, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_relySpecification;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRelySpecification) {
             listener.enterRelySpecification(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRelySpecification) {
             listener.exitRelySpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRelySpecification) {
            return visitor.visitRelySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableLevelConstraint(): TableLevelConstraintContext {
        return this.getRuleContext(0, TableLevelConstraintContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateConstraint) {
             listener.enterCreateConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateConstraint) {
             listener.exitCreateConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateConstraint) {
            return visitor.visitCreateConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterConstraintWithNameContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CONSTRAINT, 0)!;
    }
    public tableLevelConstraint(): TableLevelConstraintContext {
        return this.getRuleContext(0, TableLevelConstraintContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterConstraintWithName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterConstraintWithName) {
             listener.enterAlterConstraintWithName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterConstraintWithName) {
             listener.exitAlterConstraintWithName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterConstraintWithName) {
            return visitor.visitAlterConstraintWithName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableLevelConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pkUkConstraint(): PkUkConstraintContext | null {
        return this.getRuleContext(0, PkUkConstraintContext);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(0, CheckConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableLevelConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableLevelConstraint) {
             listener.enterTableLevelConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableLevelConstraint) {
             listener.exitTableLevelConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableLevelConstraint) {
            return visitor.visitTableLevelConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PkUkConstraintContext extends antlr.ParserRuleContext {
    public _pkCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableConstraintType(): TableConstraintTypeContext {
        return this.getRuleContext(0, TableConstraintTypeContext)!;
    }
    public columnParenthesesList(): ColumnParenthesesListContext {
        return this.getRuleContext(0, ColumnParenthesesListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_pkUkConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPkUkConstraint) {
             listener.enterPkUkConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPkUkConstraint) {
             listener.exitPkUkConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPkUkConstraint) {
            return visitor.visitPkUkConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHECK(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CHECK, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_checkConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCheckConstraint) {
             listener.enterCheckConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCheckConstraint) {
             listener.exitCheckConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCheckConstraint) {
            return visitor.visitCheckConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateForeignKeyContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _fkCols?: ColumnParenthesesListContext;
    public _tabName?: TableNameContext;
    public _parCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FOREIGN, 0)!;
    }
    public KW_KEY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_KEY, 0)!;
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REFERENCES, 0)!;
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createForeignKey;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateForeignKey) {
             listener.enterCreateForeignKey(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateForeignKey) {
             listener.exitCreateForeignKey(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateForeignKey) {
            return visitor.visitCreateForeignKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterForeignKeyWithNameContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _fkCols?: ColumnParenthesesListContext;
    public _tabName?: TableNameContext;
    public _parCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CONSTRAINT, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FOREIGN, 0)!;
    }
    public KW_KEY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_KEY, 0)!;
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REFERENCES, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterForeignKeyWithName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterForeignKeyWithName) {
             listener.enterAlterForeignKeyWithName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterForeignKeyWithName) {
             listener.exitAlterForeignKeyWithName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterForeignKeyWithName) {
            return visitor.visitAlterForeignKeyWithName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedValueElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewedColumnValues(): SkewedColumnValuesContext | null {
        return this.getRuleContext(0, SkewedColumnValuesContext);
    }
    public skewedColumnValuePairList(): SkewedColumnValuePairListContext | null {
        return this.getRuleContext(0, SkewedColumnValuePairListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_skewedValueElement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSkewedValueElement) {
             listener.enterSkewedValueElement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSkewedValueElement) {
             listener.exitSkewedValueElement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSkewedValueElement) {
            return visitor.visitSkewedValueElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedColumnValuePairListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewedColumnValuePair(): SkewedColumnValuePairContext[];
    public skewedColumnValuePair(i: number): SkewedColumnValuePairContext | null;
    public skewedColumnValuePair(i?: number): SkewedColumnValuePairContext[] | SkewedColumnValuePairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewedColumnValuePairContext);
        }

        return this.getRuleContext(i, SkewedColumnValuePairContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_skewedColumnValuePairList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSkewedColumnValuePairList) {
             listener.enterSkewedColumnValuePairList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSkewedColumnValuePairList) {
             listener.exitSkewedColumnValuePairList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSkewedColumnValuePairList) {
            return visitor.visitSkewedColumnValuePairList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedColumnValuePairContext extends antlr.ParserRuleContext {
    public _colValues?: SkewedColumnValuesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public skewedColumnValues(): SkewedColumnValuesContext {
        return this.getRuleContext(0, SkewedColumnValuesContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_skewedColumnValuePair;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSkewedColumnValuePair) {
             listener.enterSkewedColumnValuePair(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSkewedColumnValuePair) {
             listener.exitSkewedColumnValuePair(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSkewedColumnValuePair) {
            return visitor.visitSkewedColumnValuePair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedColumnValuesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewedColumnValue(): SkewedColumnValueContext[];
    public skewedColumnValue(i: number): SkewedColumnValueContext | null;
    public skewedColumnValue(i?: number): SkewedColumnValueContext[] | SkewedColumnValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewedColumnValueContext);
        }

        return this.getRuleContext(i, SkewedColumnValueContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_skewedColumnValues;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSkewedColumnValues) {
             listener.enterSkewedColumnValues(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSkewedColumnValues) {
             listener.exitSkewedColumnValues(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSkewedColumnValues) {
            return visitor.visitSkewedColumnValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedColumnValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext {
        return this.getRuleContext(0, ConstantContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_skewedColumnValue;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSkewedColumnValue) {
             listener.enterSkewedColumnValue(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSkewedColumnValue) {
             listener.exitSkewedColumnValue(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSkewedColumnValue) {
            return visitor.visitSkewedColumnValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedValueLocationElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewedColumnValue(): SkewedColumnValueContext | null {
        return this.getRuleContext(0, SkewedColumnValueContext);
    }
    public skewedColumnValuePair(): SkewedColumnValuePairContext | null {
        return this.getRuleContext(0, SkewedColumnValuePairContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_skewedValueLocationElement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSkewedValueLocationElement) {
             listener.enterSkewedValueLocationElement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSkewedValueLocationElement) {
             listener.exitSkewedValueLocationElement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSkewedValueLocationElement) {
            return visitor.visitSkewedValueLocationElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_orderSpecification;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterOrderSpecification) {
             listener.enterOrderSpecification(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitOrderSpecification) {
             listener.exitOrderSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitOrderSpecification) {
            return visitor.visitOrderSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullOrderingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_NULLS, 0)!;
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LAST, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_nullOrdering;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterNullOrdering) {
             listener.enterNullOrdering(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitNullOrdering) {
             listener.exitNullOrdering(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitNullOrdering) {
            return visitor.visitNullOrdering(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameOrderContext extends antlr.ParserRuleContext {
    public _orderSpec?: OrderSpecificationContext;
    public _nullSpec?: NullOrderingContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public orderSpecification(): OrderSpecificationContext | null {
        return this.getRuleContext(0, OrderSpecificationContext);
    }
    public nullOrdering(): NullOrderingContext | null {
        return this.getRuleContext(0, NullOrderingContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameOrder;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameOrder) {
             listener.enterColumnNameOrder(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameOrder) {
             listener.exitColumnNameOrder(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameOrder) {
            return visitor.visitColumnNameOrder(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCommentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameComment(): ColumnNameCommentContext[];
    public columnNameComment(i: number): ColumnNameCommentContext | null;
    public columnNameComment(i?: number): ColumnNameCommentContext[] | ColumnNameCommentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameCommentContext);
        }

        return this.getRuleContext(i, ColumnNameCommentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameCommentList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameCommentList) {
             listener.enterColumnNameCommentList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameCommentList) {
             listener.exitColumnNameCommentList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCommentList) {
            return visitor.visitColumnNameCommentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCommentContext extends antlr.ParserRuleContext {
    public _colName?: Id_Context;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameComment;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameComment) {
             listener.enterColumnNameComment(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameComment) {
             listener.exitColumnNameComment(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameComment) {
            return visitor.visitColumnNameComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderSpecificationRewriteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_orderSpecificationRewrite;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterOrderSpecificationRewrite) {
             listener.enterOrderSpecificationRewrite(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitOrderSpecificationRewrite) {
             listener.exitOrderSpecificationRewrite(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitOrderSpecificationRewrite) {
            return visitor.visitOrderSpecificationRewrite(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnRefOrderContext extends antlr.ParserRuleContext {
    public _orderSpec?: OrderSpecificationRewriteContext;
    public _nullSpec?: NullOrderingContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public orderSpecificationRewrite(): OrderSpecificationRewriteContext | null {
        return this.getRuleContext(0, OrderSpecificationRewriteContext);
    }
    public nullOrdering(): NullOrderingContext | null {
        return this.getRuleContext(0, NullOrderingContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnRefOrder;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnRefOrder) {
             listener.enterColumnRefOrder(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnRefOrder) {
             listener.exitColumnRefOrder(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnRefOrder) {
            return visitor.visitColumnRefOrder(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeContext extends antlr.ParserRuleContext {
    public _colName?: Id_Context;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colType(): ColTypeContext {
        return this.getRuleContext(0, ColTypeContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameType) {
             listener.enterColumnNameType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameType) {
             listener.exitColumnNameType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameType) {
            return visitor.visitColumnNameType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeOrConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableConstraint(): TableConstraintContext | null {
        return this.getRuleContext(0, TableConstraintContext);
    }
    public columnNameTypeConstraint(): ColumnNameTypeConstraintContext | null {
        return this.getRuleContext(0, ColumnNameTypeConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameTypeOrConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameTypeOrConstraint) {
             listener.enterColumnNameTypeOrConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameTypeOrConstraint) {
             listener.exitColumnNameTypeOrConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeOrConstraint) {
            return visitor.visitColumnNameTypeOrConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createForeignKey(): CreateForeignKeyContext | null {
        return this.getRuleContext(0, CreateForeignKeyContext);
    }
    public createConstraint(): CreateConstraintContext | null {
        return this.getRuleContext(0, CreateConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableConstraint) {
             listener.enterTableConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableConstraint) {
             listener.exitTableConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableConstraint) {
            return visitor.visitTableConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeConstraintContext extends antlr.ParserRuleContext {
    public _colName?: Id_Context;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colType(): ColTypeContext {
        return this.getRuleContext(0, ColTypeContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public columnConstraint(): ColumnConstraintContext | null {
        return this.getRuleContext(0, ColumnConstraintContext);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameTypeConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameTypeConstraint) {
             listener.enterColumnNameTypeConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameTypeConstraint) {
             listener.exitColumnNameTypeConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeConstraint) {
            return visitor.visitColumnNameTypeConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public foreignKeyConstraint(): ForeignKeyConstraintContext | null {
        return this.getRuleContext(0, ForeignKeyConstraintContext);
    }
    public colConstraint(): ColConstraintContext | null {
        return this.getRuleContext(0, ColConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnConstraint) {
             listener.enterColumnConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnConstraint) {
             listener.exitColumnConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnConstraint) {
            return visitor.visitColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForeignKeyConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _tabName?: TableNameContext;
    public _colName?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REFERENCES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_foreignKeyConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterForeignKeyConstraint) {
             listener.enterForeignKeyConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitForeignKeyConstraint) {
             listener.exitForeignKeyConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitForeignKeyConstraint) {
            return visitor.visitForeignKeyConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnConstraintType(): ColumnConstraintTypeContext {
        return this.getRuleContext(0, ColumnConstraintTypeContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_colConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColConstraint) {
             listener.enterColConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColConstraint) {
             listener.exitColConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColConstraint) {
            return visitor.visitColConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColumnConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterForeignKeyConstraint(): AlterForeignKeyConstraintContext | null {
        return this.getRuleContext(0, AlterForeignKeyConstraintContext);
    }
    public alterColConstraint(): AlterColConstraintContext | null {
        return this.getRuleContext(0, AlterColConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterColumnConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterColumnConstraint) {
             listener.enterAlterColumnConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterColumnConstraint) {
             listener.exitAlterColumnConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterColumnConstraint) {
            return visitor.visitAlterColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterForeignKeyConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _tabName?: TableNameContext;
    public _colName?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REFERENCES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterForeignKeyConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterForeignKeyConstraint) {
             listener.enterAlterForeignKeyConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterForeignKeyConstraint) {
             listener.exitAlterForeignKeyConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterForeignKeyConstraint) {
            return visitor.visitAlterForeignKeyConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnConstraintType(): ColumnConstraintTypeContext {
        return this.getRuleContext(0, ColumnConstraintTypeContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterColConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterColConstraint) {
             listener.enterAlterColConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterColConstraint) {
             listener.exitAlterColConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterColConstraint) {
            return visitor.visitAlterColConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnConstraintTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEFAULT, 0);
    }
    public defaultVal(): DefaultValContext | null {
        return this.getRuleContext(0, DefaultValContext);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(0, CheckConstraintContext);
    }
    public tableConstraintType(): TableConstraintTypeContext | null {
        return this.getRuleContext(0, TableConstraintTypeContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnConstraintType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnConstraintType) {
             listener.enterColumnConstraintType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnConstraintType) {
             listener.exitColumnConstraintType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnConstraintType) {
            return visitor.visitColumnConstraintType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public function_(): Function_Context | null {
        return this.getRuleContext(0, Function_Context);
    }
    public castExpression(): CastExpressionContext | null {
        return this.getRuleContext(0, CastExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_defaultVal;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDefaultVal) {
             listener.enterDefaultVal(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDefaultVal) {
             listener.exitDefaultVal(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDefaultVal) {
            return visitor.visitDefaultVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableConstraintTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PRIMARY, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_KEY, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNIQUE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableConstraintType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableConstraintType) {
             listener.enterTableConstraintType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableConstraintType) {
             listener.exitTableConstraintType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableConstraintType) {
            return visitor.visitTableConstraintType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintOptsCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enableValidateSpecification(): EnableValidateSpecificationContext {
        return this.getRuleContext(0, EnableValidateSpecificationContext)!;
    }
    public relySpecification(): RelySpecificationContext | null {
        return this.getRuleContext(0, RelySpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_constraintOptsCreate;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterConstraintOptsCreate) {
             listener.enterConstraintOptsCreate(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitConstraintOptsCreate) {
             listener.exitConstraintOptsCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitConstraintOptsCreate) {
            return visitor.visitConstraintOptsCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintOptsAlterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enableValidateSpecification(): EnableValidateSpecificationContext {
        return this.getRuleContext(0, EnableValidateSpecificationContext)!;
    }
    public relySpecification(): RelySpecificationContext | null {
        return this.getRuleContext(0, RelySpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_constraintOptsAlter;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterConstraintOptsAlter) {
             listener.enterConstraintOptsAlter(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitConstraintOptsAlter) {
             listener.exitConstraintOptsAlter(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitConstraintOptsAlter) {
            return visitor.visitConstraintOptsAlter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameColonTypeContext extends antlr.ParserRuleContext {
    public _colName?: Id_Context;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.COLON, 0)!;
    }
    public colType(): ColTypeContext {
        return this.getRuleContext(0, ColTypeContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnNameColonType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnNameColonType) {
             listener.enterColumnNameColonType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnNameColonType) {
             listener.exitColumnNameColonType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameColonType) {
            return visitor.visitColumnNameColonType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_colType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColType) {
             listener.enterColType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColType) {
             listener.exitColType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColType) {
            return visitor.visitColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colType(): ColTypeContext[];
    public colType(i: number): ColTypeContext | null;
    public colType(i?: number): ColTypeContext[] | ColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColTypeContext);
        }

        return this.getRuleContext(i, ColTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_colTypeList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColTypeList) {
             listener.enterColTypeList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColTypeList) {
             listener.exitColTypeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColTypeList) {
            return visitor.visitColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primitiveType(): PrimitiveTypeContext | null {
        return this.getRuleContext(0, PrimitiveTypeContext);
    }
    public listType(): ListTypeContext | null {
        return this.getRuleContext(0, ListTypeContext);
    }
    public structType(): StructTypeContext | null {
        return this.getRuleContext(0, StructTypeContext);
    }
    public mapType(): MapTypeContext | null {
        return this.getRuleContext(0, MapTypeContext);
    }
    public unionType(): UnionTypeContext | null {
        return this.getRuleContext(0, UnionTypeContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_type;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterType) {
             listener.enterType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitType) {
             listener.exitType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitType) {
            return visitor.visitType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimitiveTypeContext extends antlr.ParserRuleContext {
    public _prec?: Token | null;
    public _scale?: Token | null;
    public _length?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TINYINT, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SMALLINT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INT, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BIGINT, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BOOLEAN, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FLOAT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REAL, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DOUBLE, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PRECISION, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATE, 0);
    }
    public KW_DATETIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATETIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMPLOCALTZ(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TIMESTAMPLOCALTZ, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOCAL, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ZONE, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STRING, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BINARY, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DECIMAL, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.Number);
    	} else {
    		return this.getToken(HiveSQLParser.Number, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.COMMA, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VARCHAR, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CHAR, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_primitiveType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrimitiveType) {
             listener.enterPrimitiveType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrimitiveType) {
             listener.exitPrimitiveType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrimitiveType) {
            return visitor.visitPrimitiveType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ARRAY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ARRAY, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LESSTHAN, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.GREATERTHAN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_listType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterListType) {
             listener.enterListType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitListType) {
             listener.exitListType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitListType) {
            return visitor.visitListType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StructTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STRUCT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_STRUCT, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LESSTHAN, 0)!;
    }
    public columnNameColonTypeList(): ColumnNameColonTypeListContext {
        return this.getRuleContext(0, ColumnNameColonTypeListContext)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.GREATERTHAN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_structType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterStructType) {
             listener.enterStructType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitStructType) {
             listener.exitStructType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitStructType) {
            return visitor.visitStructType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MapTypeContext extends antlr.ParserRuleContext {
    public _left?: PrimitiveTypeContext;
    public _right?: TypeContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MAP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MAP, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LESSTHAN, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.COMMA, 0)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.GREATERTHAN, 0)!;
    }
    public primitiveType(): PrimitiveTypeContext {
        return this.getRuleContext(0, PrimitiveTypeContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_mapType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterMapType) {
             listener.enterMapType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitMapType) {
             listener.exitMapType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitMapType) {
            return visitor.visitMapType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNIONTYPE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UNIONTYPE, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LESSTHAN, 0)!;
    }
    public colTypeList(): ColTypeListContext {
        return this.getRuleContext(0, ColTypeListContext)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.GREATERTHAN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_unionType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterUnionType) {
             listener.enterUnionType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitUnionType) {
             listener.exitUnionType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitUnionType) {
            return visitor.visitUnionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNION, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INTERSECT, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXCEPT, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MINUS, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_setOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSetOperator) {
             listener.enterSetOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSetOperator) {
             listener.exitSetOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSetOperator) {
            return visitor.visitSetOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryStatementExpressionContext extends antlr.ParserRuleContext {
    public _w?: WithClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryStatementExpressionBody(): QueryStatementExpressionBodyContext {
        return this.getRuleContext(0, QueryStatementExpressionBodyContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_queryStatementExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterQueryStatementExpression) {
             listener.enterQueryStatementExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitQueryStatementExpression) {
             listener.exitQueryStatementExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitQueryStatementExpression) {
            return visitor.visitQueryStatementExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryStatementExpressionBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fromStatement(): FromStatementContext | null {
        return this.getRuleContext(0, FromStatementContext);
    }
    public regularBody(): RegularBodyContext | null {
        return this.getRuleContext(0, RegularBodyContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_queryStatementExpressionBody;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterQueryStatementExpressionBody) {
             listener.enterQueryStatementExpressionBody(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitQueryStatementExpressionBody) {
             listener.exitQueryStatementExpressionBody(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitQueryStatementExpressionBody) {
            return visitor.visitQueryStatementExpressionBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WITH, 0)!;
    }
    public cteStatement(): CteStatementContext[];
    public cteStatement(i: number): CteStatementContext | null;
    public cteStatement(i?: number): CteStatementContext[] | CteStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CteStatementContext);
        }

        return this.getRuleContext(i, CteStatementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_withClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWithClause) {
             listener.enterWithClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWithClause) {
             listener.exitWithClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CteStatementContext extends antlr.ParserRuleContext {
    public _colAliases?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.LPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.LPAREN, i);
    	}
    }
    public queryStatementExpression(): QueryStatementExpressionContext {
        return this.getRuleContext(0, QueryStatementExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.RPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.RPAREN, i);
    	}
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_cteStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCteStatement) {
             listener.enterCteStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCteStatement) {
             listener.exitCteStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCteStatement) {
            return visitor.visitCteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromStatementContext extends antlr.ParserRuleContext {
    public _u?: SetOperatorContext;
    public _r?: SingleFromStatementContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleFromStatement(): SingleFromStatementContext[];
    public singleFromStatement(i: number): SingleFromStatementContext | null;
    public singleFromStatement(i?: number): SingleFromStatementContext[] | SingleFromStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SingleFromStatementContext);
        }

        return this.getRuleContext(i, SingleFromStatementContext);
    }
    public setOperator(): SetOperatorContext[];
    public setOperator(i: number): SetOperatorContext | null;
    public setOperator(i?: number): SetOperatorContext[] | SetOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetOperatorContext);
        }

        return this.getRuleContext(i, SetOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_fromStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFromStatement) {
             listener.enterFromStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFromStatement) {
             listener.exitFromStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFromStatement) {
            return visitor.visitFromStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleFromStatementContext extends antlr.ParserRuleContext {
    public _body?: BodyContext;
    public _b: BodyContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public body(): BodyContext[];
    public body(i: number): BodyContext | null;
    public body(i?: number): BodyContext[] | BodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BodyContext);
        }

        return this.getRuleContext(i, BodyContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_singleFromStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSingleFromStatement) {
             listener.enterSingleFromStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSingleFromStatement) {
             listener.exitSingleFromStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSingleFromStatement) {
            return visitor.visitSingleFromStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RegularBodyContext extends antlr.ParserRuleContext {
    public _i?: InsertClauseContext;
    public _s?: SelectStatementContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertClause(): InsertClauseContext | null {
        return this.getRuleContext(0, InsertClauseContext);
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_regularBody;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRegularBody) {
             listener.enterRegularBody(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRegularBody) {
             listener.exitRegularBody(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRegularBody) {
            return visitor.visitRegularBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomSelectStatementContext extends antlr.ParserRuleContext {
    public _s?: SelectClauseContext;
    public _f?: FromClauseContext;
    public _w?: WhereClauseContext;
    public _g?: GroupByClauseContext;
    public _h?: HavingClauseContext;
    public _win?: Window_clauseContext;
    public _q?: QualifyClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(0, QualifyClauseContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public valuesSource(): ValuesSourceContext | null {
        return this.getRuleContext(0, ValuesSourceContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_atomSelectStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAtomSelectStatement) {
             listener.enterAtomSelectStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAtomSelectStatement) {
             listener.exitAtomSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAtomSelectStatement) {
            return visitor.visitAtomSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public _a?: AtomSelectStatementContext;
    public _set_?: SetOpSelectStatementContext;
    public _o?: OrderByClauseContext;
    public _c?: ClusterByClauseContext;
    public _d?: DistributeByClauseContext;
    public _where?: WhereClauseContext;
    public _sort?: SortByClauseContext;
    public _l?: LimitClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomSelectStatement(): AtomSelectStatementContext {
        return this.getRuleContext(0, AtomSelectStatementContext)!;
    }
    public setOpSelectStatement(): SetOpSelectStatementContext | null {
        return this.getRuleContext(0, SetOpSelectStatementContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_selectStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSelectStatement) {
             listener.enterSelectStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSelectStatement) {
             listener.exitSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetOpSelectStatementContext extends antlr.ParserRuleContext {
    public _u?: SetOperatorContext;
    public _b?: AtomSelectStatementContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public setOperator(): SetOperatorContext[];
    public setOperator(i: number): SetOperatorContext | null;
    public setOperator(i?: number): SetOperatorContext[] | SetOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetOperatorContext);
        }

        return this.getRuleContext(i, SetOperatorContext);
    }
    public atomSelectStatement(): AtomSelectStatementContext[];
    public atomSelectStatement(i: number): AtomSelectStatementContext | null;
    public atomSelectStatement(i?: number): AtomSelectStatementContext[] | AtomSelectStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AtomSelectStatementContext);
        }

        return this.getRuleContext(i, AtomSelectStatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_setOpSelectStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSetOpSelectStatement) {
             listener.enterSetOpSelectStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSetOpSelectStatement) {
             listener.exitSetOpSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSetOpSelectStatement) {
            return visitor.visitSetOpSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementWithCTEContext extends antlr.ParserRuleContext {
    public _w?: WithClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_selectStatementWithCTE;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSelectStatementWithCTE) {
             listener.enterSelectStatementWithCTE(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSelectStatementWithCTE) {
             listener.exitSelectStatementWithCTE(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectStatementWithCTE) {
            return visitor.visitSelectStatementWithCTE(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertClause(): InsertClauseContext | null {
        return this.getRuleContext(0, InsertClauseContext);
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public lateralView(): LateralViewContext | null {
        return this.getRuleContext(0, LateralViewContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(0, QualifyClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_body;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterBody) {
             listener.enterBody(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitBody) {
             listener.exitBody(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitBody) {
            return visitor.visitBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertClauseContext extends antlr.ParserRuleContext {
    public _targetCols?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_INSERT, 0)!;
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OVERWRITE, 0);
    }
    public destination(): DestinationContext | null {
        return this.getRuleContext(0, DestinationContext);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INTO, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_insertClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterInsertClause) {
             listener.enterInsertClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitInsertClause) {
             listener.exitInsertClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertClause) {
            return visitor.visitInsertClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DestinationContext extends antlr.ParserRuleContext {
    public _local?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DIRECTORY, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOCAL, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLE, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_destination;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDestination) {
             listener.enterDestination(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDestination) {
             listener.exitDestination(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDestination) {
            return visitor.visitDestination(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public _offset?: Token | null;
    public _num?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIMIT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LIMIT, 0)!;
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OFFSET, 0);
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.Number);
    	} else {
    		return this.getToken(HiveSQLParser.Number, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_limitClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterLimitClause) {
             listener.enterLimitClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitLimitClause) {
             listener.exitLimitClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DELETE, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FROM, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_deleteStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDeleteStatement) {
             listener.enterDeleteStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDeleteStatement) {
             listener.exitDeleteStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAssignmentClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableOrColumn(): TableOrColumnContext {
        return this.getRuleContext(0, TableOrColumnContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.EQUAL, 0)!;
    }
    public precedencePlusExpressionOrDefault(): PrecedencePlusExpressionOrDefaultContext {
        return this.getRuleContext(0, PrecedencePlusExpressionOrDefaultContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnAssignmentClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnAssignmentClause) {
             listener.enterColumnAssignmentClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnAssignmentClause) {
             listener.exitColumnAssignmentClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnAssignmentClause) {
            return visitor.visitColumnAssignmentClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedencePlusExpressionOrDefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public defaultValue(): DefaultValueContext | null {
        return this.getRuleContext(0, DefaultValueContext);
    }
    public precedencePlusExpression(): PrecedencePlusExpressionContext | null {
        return this.getRuleContext(0, PrecedencePlusExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedencePlusExpressionOrDefault;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedencePlusExpressionOrDefault) {
             listener.enterPrecedencePlusExpressionOrDefault(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedencePlusExpressionOrDefault) {
             listener.exitPrecedencePlusExpressionOrDefault(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedencePlusExpressionOrDefault) {
            return visitor.visitPrecedencePlusExpressionOrDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetColumnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public columnAssignmentClause(): ColumnAssignmentClauseContext[];
    public columnAssignmentClause(i: number): ColumnAssignmentClauseContext | null;
    public columnAssignmentClause(i?: number): ColumnAssignmentClauseContext[] | ColumnAssignmentClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnAssignmentClauseContext);
        }

        return this.getRuleContext(i, ColumnAssignmentClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_setColumnsClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSetColumnsClause) {
             listener.enterSetColumnsClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSetColumnsClause) {
             listener.exitSetColumnsClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSetColumnsClause) {
            return visitor.visitSetColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UPDATE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public setColumnsClause(): SetColumnsClauseContext {
        return this.getRuleContext(0, SetColumnsClauseContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_updateStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterUpdateStatement) {
             listener.enterUpdateStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitUpdateStatement) {
             listener.exitUpdateStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitUpdateStatement) {
            return visitor.visitUpdateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlTransactionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public startTransactionStatement(): StartTransactionStatementContext | null {
        return this.getRuleContext(0, StartTransactionStatementContext);
    }
    public commitStatement(): CommitStatementContext | null {
        return this.getRuleContext(0, CommitStatementContext);
    }
    public rollbackStatement(): RollbackStatementContext | null {
        return this.getRuleContext(0, RollbackStatementContext);
    }
    public setAutoCommitStatement(): SetAutoCommitStatementContext | null {
        return this.getRuleContext(0, SetAutoCommitStatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_sqlTransactionStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSqlTransactionStatement) {
             listener.enterSqlTransactionStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSqlTransactionStatement) {
             listener.exitSqlTransactionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSqlTransactionStatement) {
            return visitor.visitSqlTransactionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartTransactionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_START(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_START, 0)!;
    }
    public KW_TRANSACTION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TRANSACTION, 0)!;
    }
    public transactionMode(): TransactionModeContext[];
    public transactionMode(i: number): TransactionModeContext | null;
    public transactionMode(i?: number): TransactionModeContext[] | TransactionModeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeContext);
        }

        return this.getRuleContext(i, TransactionModeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_startTransactionStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterStartTransactionStatement) {
             listener.enterStartTransactionStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitStartTransactionStatement) {
             listener.exitStartTransactionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitStartTransactionStatement) {
            return visitor.visitStartTransactionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public isolationLevel(): IsolationLevelContext | null {
        return this.getRuleContext(0, IsolationLevelContext);
    }
    public transactionAccessMode(): TransactionAccessModeContext | null {
        return this.getRuleContext(0, TransactionAccessModeContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_transactionMode;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTransactionMode) {
             listener.enterTransactionMode(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTransactionMode) {
             listener.exitTransactionMode(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTransactionMode) {
            return visitor.visitTransactionMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionAccessModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_READ(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_READ, 0)!;
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ONLY, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WRITE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_transactionAccessMode;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTransactionAccessMode) {
             listener.enterTransactionAccessMode(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTransactionAccessMode) {
             listener.exitTransactionAccessMode(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTransactionAccessMode) {
            return visitor.visitTransactionAccessMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsolationLevelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ISOLATION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ISOLATION, 0)!;
    }
    public KW_LEVEL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LEVEL, 0)!;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        return this.getRuleContext(0, LevelOfIsolationContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_isolationLevel;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterIsolationLevel) {
             listener.enterIsolationLevel(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitIsolationLevel) {
             listener.exitIsolationLevel(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitIsolationLevel) {
            return visitor.visitIsolationLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LevelOfIsolationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SNAPSHOT, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_levelOfIsolation;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterLevelOfIsolation) {
             listener.enterLevelOfIsolation(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitLevelOfIsolation) {
             listener.exitLevelOfIsolation(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitLevelOfIsolation) {
            return visitor.visitLevelOfIsolation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommitStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMIT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COMMIT, 0)!;
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WORK, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_commitStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCommitStatement) {
             listener.enterCommitStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCommitStatement) {
             listener.exitCommitStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCommitStatement) {
            return visitor.visitCommitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollbackStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROLLBACK(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ROLLBACK, 0)!;
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WORK, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rollbackStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRollbackStatement) {
             listener.enterRollbackStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRollbackStatement) {
             listener.exitRollbackStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRollbackStatement) {
            return visitor.visitRollbackStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetAutoCommitStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_AUTOCOMMIT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AUTOCOMMIT, 0)!;
    }
    public booleanValueTok(): BooleanValueTokContext {
        return this.getRuleContext(0, BooleanValueTokContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_setAutoCommitStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSetAutoCommitStatement) {
             listener.enterSetAutoCommitStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSetAutoCommitStatement) {
             listener.exitSetAutoCommitStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSetAutoCommitStatement) {
            return visitor.visitSetAutoCommitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AbortTransactionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABORT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ABORT, 0)!;
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TRANSACTIONS, 0)!;
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.Number);
    	} else {
    		return this.getToken(HiveSQLParser.Number, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_abortTransactionStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAbortTransactionStatement) {
             listener.enterAbortTransactionStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAbortTransactionStatement) {
             listener.exitAbortTransactionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAbortTransactionStatement) {
            return visitor.visitAbortTransactionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AbortCompactionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABORT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ABORT, 0)!;
    }
    public KW_COMPACTIONS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COMPACTIONS, 0)!;
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.Number);
    	} else {
    		return this.getToken(HiveSQLParser.Number, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_abortCompactionStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAbortCompactionStatement) {
             listener.enterAbortCompactionStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAbortCompactionStatement) {
             listener.exitAbortCompactionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAbortCompactionStatement) {
            return visitor.visitAbortCompactionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MERGE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MERGE, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_INTO, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_USING, 0)!;
    }
    public joinSourcePart(): JoinSourcePartContext {
        return this.getRuleContext(0, JoinSourcePartContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ON, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public whenClauses(): WhenClausesContext {
        return this.getRuleContext(0, WhenClausesContext)!;
    }
    public QUERY_HINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.QUERY_HINT, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_mergeStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterMergeStatement) {
             listener.enterMergeStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitMergeStatement) {
             listener.exitMergeStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitMergeStatement) {
            return visitor.visitMergeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClausesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public whenMatchedAndClause(): WhenMatchedAndClauseContext[];
    public whenMatchedAndClause(i: number): WhenMatchedAndClauseContext | null;
    public whenMatchedAndClause(i?: number): WhenMatchedAndClauseContext[] | WhenMatchedAndClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenMatchedAndClauseContext);
        }

        return this.getRuleContext(i, WhenMatchedAndClauseContext);
    }
    public whenMatchedThenClause(): WhenMatchedThenClauseContext[];
    public whenMatchedThenClause(i: number): WhenMatchedThenClauseContext | null;
    public whenMatchedThenClause(i?: number): WhenMatchedThenClauseContext[] | WhenMatchedThenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenMatchedThenClauseContext);
        }

        return this.getRuleContext(i, WhenMatchedThenClauseContext);
    }
    public whenNotMatchedClause(): WhenNotMatchedClauseContext | null {
        return this.getRuleContext(0, WhenNotMatchedClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_whenClauses;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWhenClauses) {
             listener.enterWhenClauses(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWhenClauses) {
             listener.exitWhenClauses(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWhenClauses) {
            return visitor.visitWhenClauses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenNotMatchedClauseContext extends antlr.ParserRuleContext {
    public _targetCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_THEN, 0)!;
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_INSERT, 0)!;
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_VALUES, 0)!;
    }
    public valueRowConstructor(): ValueRowConstructorContext {
        return this.getRuleContext(0, ValueRowConstructorContext)!;
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AND, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public columnParenthesesList(): ColumnParenthesesListContext | null {
        return this.getRuleContext(0, ColumnParenthesesListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_whenNotMatchedClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWhenNotMatchedClause) {
             listener.enterWhenNotMatchedClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWhenNotMatchedClause) {
             listener.exitWhenNotMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWhenNotMatchedClause) {
            return visitor.visitWhenNotMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenMatchedAndClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MATCHED, 0)!;
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AND, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_THEN, 0)!;
    }
    public updateOrDelete(): UpdateOrDeleteContext {
        return this.getRuleContext(0, UpdateOrDeleteContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_whenMatchedAndClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWhenMatchedAndClause) {
             listener.enterWhenMatchedAndClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWhenMatchedAndClause) {
             listener.exitWhenMatchedAndClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWhenMatchedAndClause) {
            return visitor.visitWhenMatchedAndClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenMatchedThenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_THEN, 0)!;
    }
    public updateOrDelete(): UpdateOrDeleteContext {
        return this.getRuleContext(0, UpdateOrDeleteContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_whenMatchedThenClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWhenMatchedThenClause) {
             listener.enterWhenMatchedThenClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWhenMatchedThenClause) {
             listener.exitWhenMatchedThenClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWhenMatchedThenClause) {
            return visitor.visitWhenMatchedThenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateOrDeleteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UPDATE, 0);
    }
    public setColumnsClause(): SetColumnsClauseContext | null {
        return this.getRuleContext(0, SetColumnsClauseContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DELETE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_updateOrDelete;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterUpdateOrDelete) {
             listener.enterUpdateOrDelete(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitUpdateOrDelete) {
             listener.exitUpdateOrDelete(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitUpdateOrDelete) {
            return visitor.visitUpdateOrDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KillQueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_KILL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_KILL, 0)!;
    }
    public KW_QUERY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_QUERY, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSQLParser.StringLiteral, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_killQueryStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterKillQueryStatement) {
             listener.enterKillQueryStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitKillQueryStatement) {
             listener.exitKillQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitKillQueryStatement) {
            return visitor.visitKillQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactionIdContext extends antlr.ParserRuleContext {
    public _compactId?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMPACT_ID(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COMPACT_ID, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.EQUAL, 0)!;
    }
    public Number(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.Number, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_compactionId;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCompactionId) {
             listener.enterCompactionId(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCompactionId) {
             listener.exitCompactionId(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCompactionId) {
            return visitor.visitCompactionId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactionPoolContext extends antlr.ParserRuleContext {
    public _poolName?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_POOL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_POOL, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_compactionPool;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCompactionPool) {
             listener.enterCompactionPool(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCompactionPool) {
             listener.exitCompactionPool(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCompactionPool) {
            return visitor.visitCompactionPool(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactionTypeContext extends antlr.ParserRuleContext {
    public _compactType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TYPE, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_compactionType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCompactionType) {
             listener.enterCompactionType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCompactionType) {
             listener.exitCompactionType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCompactionType) {
            return visitor.visitCompactionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactionStatusContext extends antlr.ParserRuleContext {
    public _status?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STATUS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_STATUS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_compactionStatus;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCompactionStatus) {
             listener.enterCompactionStatus(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCompactionStatus) {
             listener.exitCompactionStatus(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCompactionStatus) {
            return visitor.visitCompactionStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementContext extends antlr.ParserRuleContext {
    public _tableNameTree?: TableNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public alterTableStatementSuffix(): AlterTableStatementSuffixContext | null {
        return this.getRuleContext(0, AlterTableStatementSuffixContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VIEW, 0);
    }
    public alterViewStatementSuffix(): AlterViewStatementSuffixContext | null {
        return this.getRuleContext(0, AlterViewStatementSuffixContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MATERIALIZED, 0);
    }
    public alterMaterializedViewStatementSuffix(): AlterMaterializedViewStatementSuffixContext | null {
        return this.getRuleContext(0, AlterMaterializedViewStatementSuffixContext);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public alterDatabaseStatementSuffix(): AlterDatabaseStatementSuffixContext | null {
        return this.getRuleContext(0, AlterDatabaseStatementSuffixContext);
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATACONNECTOR, 0);
    }
    public alterDataConnectorStatementSuffix(): AlterDataConnectorStatementSuffixContext | null {
        return this.getRuleContext(0, AlterDataConnectorStatementSuffixContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatement) {
             listener.enterAlterStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatement) {
             listener.exitAlterStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatement) {
            return visitor.visitAlterStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableStatementSuffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterStatementSuffixRename(): AlterStatementSuffixRenameContext | null {
        return this.getRuleContext(0, AlterStatementSuffixRenameContext);
    }
    public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext | null {
        return this.getRuleContext(0, AlterStatementSuffixDropPartitionsContext);
    }
    public alterStatementSuffixAddPartitions(): AlterStatementSuffixAddPartitionsContext | null {
        return this.getRuleContext(0, AlterStatementSuffixAddPartitionsContext);
    }
    public alterStatementSuffixTouch(): AlterStatementSuffixTouchContext | null {
        return this.getRuleContext(0, AlterStatementSuffixTouchContext);
    }
    public alterStatementSuffixArchive(): AlterStatementSuffixArchiveContext | null {
        return this.getRuleContext(0, AlterStatementSuffixArchiveContext);
    }
    public alterStatementSuffixUnArchive(): AlterStatementSuffixUnArchiveContext | null {
        return this.getRuleContext(0, AlterStatementSuffixUnArchiveContext);
    }
    public alterStatementSuffixProperties(): AlterStatementSuffixPropertiesContext | null {
        return this.getRuleContext(0, AlterStatementSuffixPropertiesContext);
    }
    public alterStatementSuffixSkewedby(): AlterStatementSuffixSkewedbyContext | null {
        return this.getRuleContext(0, AlterStatementSuffixSkewedbyContext);
    }
    public alterStatementSuffixExchangePartition(): AlterStatementSuffixExchangePartitionContext | null {
        return this.getRuleContext(0, AlterStatementSuffixExchangePartitionContext);
    }
    public alterStatementPartitionKeyType(): AlterStatementPartitionKeyTypeContext | null {
        return this.getRuleContext(0, AlterStatementPartitionKeyTypeContext);
    }
    public alterStatementSuffixDropConstraint(): AlterStatementSuffixDropConstraintContext | null {
        return this.getRuleContext(0, AlterStatementSuffixDropConstraintContext);
    }
    public alterStatementSuffixAddConstraint(): AlterStatementSuffixAddConstraintContext | null {
        return this.getRuleContext(0, AlterStatementSuffixAddConstraintContext);
    }
    public alterTblPartitionStatementSuffix(): AlterTblPartitionStatementSuffixContext | null {
        return this.getRuleContext(0, AlterTblPartitionStatementSuffixContext);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public alterStatementSuffixSetOwner(): AlterStatementSuffixSetOwnerContext | null {
        return this.getRuleContext(0, AlterStatementSuffixSetOwnerContext);
    }
    public alterStatementSuffixSetPartSpec(): AlterStatementSuffixSetPartSpecContext | null {
        return this.getRuleContext(0, AlterStatementSuffixSetPartSpecContext);
    }
    public alterStatementSuffixExecute(): AlterStatementSuffixExecuteContext | null {
        return this.getRuleContext(0, AlterStatementSuffixExecuteContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterTableStatementSuffix;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterTableStatementSuffix) {
             listener.enterAlterTableStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterTableStatementSuffix) {
             listener.exitAlterTableStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterTableStatementSuffix) {
            return visitor.visitAlterTableStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTblPartitionStatementSuffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterStatementSuffixFileFormat(): AlterStatementSuffixFileFormatContext | null {
        return this.getRuleContext(0, AlterStatementSuffixFileFormatContext);
    }
    public alterStatementSuffixLocation(): AlterStatementSuffixLocationContext | null {
        return this.getRuleContext(0, AlterStatementSuffixLocationContext);
    }
    public alterStatementSuffixMergeFiles(): AlterStatementSuffixMergeFilesContext | null {
        return this.getRuleContext(0, AlterStatementSuffixMergeFilesContext);
    }
    public alterStatementSuffixSerdeProperties(): AlterStatementSuffixSerdePropertiesContext | null {
        return this.getRuleContext(0, AlterStatementSuffixSerdePropertiesContext);
    }
    public alterStatementSuffixRenamePart(): AlterStatementSuffixRenamePartContext | null {
        return this.getRuleContext(0, AlterStatementSuffixRenamePartContext);
    }
    public alterStatementSuffixBucketNum(): AlterStatementSuffixBucketNumContext | null {
        return this.getRuleContext(0, AlterStatementSuffixBucketNumContext);
    }
    public alterTblPartitionStatementSuffixSkewedLocation(): AlterTblPartitionStatementSuffixSkewedLocationContext | null {
        return this.getRuleContext(0, AlterTblPartitionStatementSuffixSkewedLocationContext);
    }
    public alterStatementSuffixClusterbySortby(): AlterStatementSuffixClusterbySortbyContext | null {
        return this.getRuleContext(0, AlterStatementSuffixClusterbySortbyContext);
    }
    public alterStatementSuffixCompact(): AlterStatementSuffixCompactContext | null {
        return this.getRuleContext(0, AlterStatementSuffixCompactContext);
    }
    public alterStatementSuffixUpdateStatsCol(): AlterStatementSuffixUpdateStatsColContext | null {
        return this.getRuleContext(0, AlterStatementSuffixUpdateStatsColContext);
    }
    public alterStatementSuffixUpdateStats(): AlterStatementSuffixUpdateStatsContext | null {
        return this.getRuleContext(0, AlterStatementSuffixUpdateStatsContext);
    }
    public alterStatementSuffixRenameCol(): AlterStatementSuffixRenameColContext | null {
        return this.getRuleContext(0, AlterStatementSuffixRenameColContext);
    }
    public alterStatementSuffixAddCol(): AlterStatementSuffixAddColContext | null {
        return this.getRuleContext(0, AlterStatementSuffixAddColContext);
    }
    public alterStatementSuffixUpdateColumns(): AlterStatementSuffixUpdateColumnsContext | null {
        return this.getRuleContext(0, AlterStatementSuffixUpdateColumnsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterTblPartitionStatementSuffix;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterTblPartitionStatementSuffix) {
             listener.enterAlterTblPartitionStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterTblPartitionStatementSuffix) {
             listener.exitAlterTblPartitionStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterTblPartitionStatementSuffix) {
            return visitor.visitAlterTblPartitionStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementPartitionKeyTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PARTITION, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COLUMN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public columnNameType(): ColumnNameTypeContext {
        return this.getRuleContext(0, ColumnNameTypeContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementPartitionKeyType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementPartitionKeyType) {
             listener.enterAlterStatementPartitionKeyType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementPartitionKeyType) {
             listener.exitAlterStatementPartitionKeyType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementPartitionKeyType) {
            return visitor.visitAlterStatementPartitionKeyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterViewStatementSuffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterViewSuffixProperties(): AlterViewSuffixPropertiesContext | null {
        return this.getRuleContext(0, AlterViewSuffixPropertiesContext);
    }
    public alterStatementSuffixRename(): AlterStatementSuffixRenameContext | null {
        return this.getRuleContext(0, AlterStatementSuffixRenameContext);
    }
    public alterStatementSuffixAddPartitions(): AlterStatementSuffixAddPartitionsContext | null {
        return this.getRuleContext(0, AlterStatementSuffixAddPartitionsContext);
    }
    public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext | null {
        return this.getRuleContext(0, AlterStatementSuffixDropPartitionsContext);
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext | null {
        return this.getRuleContext(0, SelectStatementWithCTEContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterViewStatementSuffix;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterViewStatementSuffix) {
             listener.enterAlterViewStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterViewStatementSuffix) {
             listener.exitAlterViewStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterViewStatementSuffix) {
            return visitor.visitAlterViewStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterMaterializedViewStatementSuffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterMaterializedViewSuffixRewrite(): AlterMaterializedViewSuffixRewriteContext | null {
        return this.getRuleContext(0, AlterMaterializedViewSuffixRewriteContext);
    }
    public alterMaterializedViewSuffixRebuild(): AlterMaterializedViewSuffixRebuildContext | null {
        return this.getRuleContext(0, AlterMaterializedViewSuffixRebuildContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterMaterializedViewStatementSuffix;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterMaterializedViewStatementSuffix) {
             listener.enterAlterMaterializedViewStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterMaterializedViewStatementSuffix) {
             listener.exitAlterMaterializedViewStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterMaterializedViewStatementSuffix) {
            return visitor.visitAlterMaterializedViewStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterMaterializedViewSuffixRewriteContext extends antlr.ParserRuleContext {
    public _mvRewriteFlag?: RewriteEnabledContext;
    public _mvRewriteFlag2?: RewriteDisabledContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rewriteEnabled(): RewriteEnabledContext | null {
        return this.getRuleContext(0, RewriteEnabledContext);
    }
    public rewriteDisabled(): RewriteDisabledContext | null {
        return this.getRuleContext(0, RewriteDisabledContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterMaterializedViewSuffixRewrite;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterMaterializedViewSuffixRewrite) {
             listener.enterAlterMaterializedViewSuffixRewrite(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterMaterializedViewSuffixRewrite) {
             listener.exitAlterMaterializedViewSuffixRewrite(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterMaterializedViewSuffixRewrite) {
            return visitor.visitAlterMaterializedViewSuffixRewrite(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterMaterializedViewSuffixRebuildContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REBUILD(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REBUILD, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterMaterializedViewSuffixRebuild;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterMaterializedViewSuffixRebuild) {
             listener.enterAlterMaterializedViewSuffixRebuild(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterMaterializedViewSuffixRebuild) {
             listener.exitAlterMaterializedViewSuffixRebuild(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterMaterializedViewSuffixRebuild) {
            return visitor.visitAlterMaterializedViewSuffixRebuild(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseStatementSuffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterDatabaseSuffixProperties(): AlterDatabaseSuffixPropertiesContext | null {
        return this.getRuleContext(0, AlterDatabaseSuffixPropertiesContext);
    }
    public alterDatabaseSuffixSetOwner(): AlterDatabaseSuffixSetOwnerContext | null {
        return this.getRuleContext(0, AlterDatabaseSuffixSetOwnerContext);
    }
    public alterScopeProperties(): AlterScopePropertiesContext | null {
        return this.getRuleContext(0, AlterScopePropertiesContext);
    }
    public alterDatabaseSuffixSetLocation(): AlterDatabaseSuffixSetLocationContext | null {
        return this.getRuleContext(0, AlterDatabaseSuffixSetLocationContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterDatabaseStatementSuffix;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterDatabaseStatementSuffix) {
             listener.enterAlterDatabaseStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterDatabaseStatementSuffix) {
             listener.exitAlterDatabaseStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseStatementSuffix) {
            return visitor.visitAlterDatabaseStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseSuffixPropertiesContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DBPROPERTIES, 0)!;
    }
    public dbProperties(): DbPropertiesContext {
        return this.getRuleContext(0, DbPropertiesContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterDatabaseSuffixProperties;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterDatabaseSuffixProperties) {
             listener.enterAlterDatabaseSuffixProperties(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterDatabaseSuffixProperties) {
             listener.exitAlterDatabaseSuffixProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseSuffixProperties) {
            return visitor.visitAlterDatabaseSuffixProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterScopePropertiesContext extends antlr.ParserRuleContext {
    public _name?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.EQUAL, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterScopeProperties;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterScopeProperties) {
             listener.enterAlterScopeProperties(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterScopeProperties) {
             listener.exitAlterScopeProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterScopeProperties) {
            return visitor.visitAlterScopeProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseSuffixSetOwnerContext extends antlr.ParserRuleContext {
    public _dbName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_OWNER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OWNER, 0)!;
    }
    public principalName(): PrincipalNameContext {
        return this.getRuleContext(0, PrincipalNameContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterDatabaseSuffixSetOwner;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterDatabaseSuffixSetOwner) {
             listener.enterAlterDatabaseSuffixSetOwner(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterDatabaseSuffixSetOwner) {
             listener.exitAlterDatabaseSuffixSetOwner(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseSuffixSetOwner) {
            return visitor.visitAlterDatabaseSuffixSetOwner(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseSuffixSetLocationContext extends antlr.ParserRuleContext {
    public _dbName?: Id_Context;
    public _newLocation?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOCATION, 0);
    }
    public KW_MANAGEDLOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MANAGEDLOCATION, 0);
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterDatabaseSuffixSetLocation;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterDatabaseSuffixSetLocation) {
             listener.enterAlterDatabaseSuffixSetLocation(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterDatabaseSuffixSetLocation) {
             listener.exitAlterDatabaseSuffixSetLocation(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseSuffixSetLocation) {
            return visitor.visitAlterDatabaseSuffixSetLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseSuffixSetManagedLocationContext extends antlr.ParserRuleContext {
    public _dbName?: Id_Context;
    public _newLocation?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_MANAGEDLOCATION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MANAGEDLOCATION, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterDatabaseSuffixSetManagedLocation;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterDatabaseSuffixSetManagedLocation) {
             listener.enterAlterDatabaseSuffixSetManagedLocation(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterDatabaseSuffixSetManagedLocation) {
             listener.exitAlterDatabaseSuffixSetManagedLocation(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseSuffixSetManagedLocation) {
            return visitor.visitAlterDatabaseSuffixSetManagedLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixRenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TO, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixRename;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixRename) {
             listener.enterAlterStatementSuffixRename(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixRename) {
             listener.exitAlterStatementSuffixRename(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixRename) {
            return visitor.visitAlterStatementSuffixRename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixAddColContext extends antlr.ParserRuleContext {
    public _add?: Token | null;
    public _replace?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COLUMNS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public columnNameTypeList(): ColumnNameTypeListContext {
        return this.getRuleContext(0, ColumnNameTypeListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ADD, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REPLACE, 0);
    }
    public restrictOrCascade(): RestrictOrCascadeContext | null {
        return this.getRuleContext(0, RestrictOrCascadeContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixAddCol;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixAddCol) {
             listener.enterAlterStatementSuffixAddCol(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixAddCol) {
             listener.exitAlterStatementSuffixAddCol(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixAddCol) {
            return visitor.visitAlterStatementSuffixAddCol(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixAddConstraintContext extends antlr.ParserRuleContext {
    public _fk?: AlterForeignKeyWithNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ADD, 0)!;
    }
    public alterConstraintWithName(): AlterConstraintWithNameContext | null {
        return this.getRuleContext(0, AlterConstraintWithNameContext);
    }
    public alterForeignKeyWithName(): AlterForeignKeyWithNameContext | null {
        return this.getRuleContext(0, AlterForeignKeyWithNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixAddConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixAddConstraint) {
             listener.enterAlterStatementSuffixAddConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixAddConstraint) {
             listener.exitAlterStatementSuffixAddConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixAddConstraint) {
            return visitor.visitAlterStatementSuffixAddConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixUpdateColumnsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UPDATE, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COLUMNS, 0)!;
    }
    public restrictOrCascade(): RestrictOrCascadeContext | null {
        return this.getRuleContext(0, RestrictOrCascadeContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixUpdateColumns;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixUpdateColumns) {
             listener.enterAlterStatementSuffixUpdateColumns(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixUpdateColumns) {
             listener.exitAlterStatementSuffixUpdateColumns(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixUpdateColumns) {
            return visitor.visitAlterStatementSuffixUpdateColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixDropConstraintContext extends antlr.ParserRuleContext {
    public _cName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CONSTRAINT, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixDropConstraint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixDropConstraint) {
             listener.enterAlterStatementSuffixDropConstraint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixDropConstraint) {
             listener.exitAlterStatementSuffixDropConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixDropConstraint) {
            return visitor.visitAlterStatementSuffixDropConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixRenameColContext extends antlr.ParserRuleContext {
    public _oldName?: Id_Context;
    public _newName?: Id_Context;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHANGE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CHANGE, 0)!;
    }
    public colType(): ColTypeContext {
        return this.getRuleContext(0, ColTypeContext)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COLUMN, 0);
    }
    public alterColumnConstraint(): AlterColumnConstraintContext | null {
        return this.getRuleContext(0, AlterColumnConstraintContext);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0);
    }
    public alterStatementChangeColPosition(): AlterStatementChangeColPositionContext | null {
        return this.getRuleContext(0, AlterStatementChangeColPositionContext);
    }
    public restrictOrCascade(): RestrictOrCascadeContext | null {
        return this.getRuleContext(0, RestrictOrCascadeContext);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixRenameCol;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixRenameCol) {
             listener.enterAlterStatementSuffixRenameCol(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixRenameCol) {
             listener.exitAlterStatementSuffixRenameCol(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixRenameCol) {
            return visitor.visitAlterStatementSuffixRenameCol(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixUpdateStatsColContext extends antlr.ParserRuleContext {
    public _colName?: Id_Context;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UPDATE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_STATISTICS, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FOR, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public tableProperties(): TablePropertiesContext {
        return this.getRuleContext(0, TablePropertiesContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COLUMN, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixUpdateStatsCol;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixUpdateStatsCol) {
             listener.enterAlterStatementSuffixUpdateStatsCol(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixUpdateStatsCol) {
             listener.exitAlterStatementSuffixUpdateStatsCol(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixUpdateStatsCol) {
            return visitor.visitAlterStatementSuffixUpdateStatsCol(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixUpdateStatsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UPDATE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_STATISTICS, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public tableProperties(): TablePropertiesContext {
        return this.getRuleContext(0, TablePropertiesContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixUpdateStats;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixUpdateStats) {
             listener.enterAlterStatementSuffixUpdateStats(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixUpdateStats) {
             listener.exitAlterStatementSuffixUpdateStats(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixUpdateStats) {
            return visitor.visitAlterStatementSuffixUpdateStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementChangeColPositionContext extends antlr.ParserRuleContext {
    public _first?: Token | null;
    public _afterCol?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FIRST, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AFTER, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementChangeColPosition;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementChangeColPosition) {
             listener.enterAlterStatementChangeColPosition(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementChangeColPosition) {
             listener.exitAlterStatementChangeColPosition(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementChangeColPosition) {
            return visitor.visitAlterStatementChangeColPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixAddPartitionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ADD, 0)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public alterStatementSuffixAddPartitionsElement(): AlterStatementSuffixAddPartitionsElementContext[];
    public alterStatementSuffixAddPartitionsElement(i: number): AlterStatementSuffixAddPartitionsElementContext | null;
    public alterStatementSuffixAddPartitionsElement(i?: number): AlterStatementSuffixAddPartitionsElementContext[] | AlterStatementSuffixAddPartitionsElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterStatementSuffixAddPartitionsElementContext);
        }

        return this.getRuleContext(i, AlterStatementSuffixAddPartitionsElementContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixAddPartitions;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixAddPartitions) {
             listener.enterAlterStatementSuffixAddPartitions(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixAddPartitions) {
             listener.exitAlterStatementSuffixAddPartitions(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixAddPartitions) {
            return visitor.visitAlterStatementSuffixAddPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixAddPartitionsElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionSpec(): PartitionSpecContext {
        return this.getRuleContext(0, PartitionSpecContext)!;
    }
    public partitionLocation(): PartitionLocationContext | null {
        return this.getRuleContext(0, PartitionLocationContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixAddPartitionsElement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixAddPartitionsElement) {
             listener.enterAlterStatementSuffixAddPartitionsElement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixAddPartitionsElement) {
             listener.exitAlterStatementSuffixAddPartitionsElement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixAddPartitionsElement) {
            return visitor.visitAlterStatementSuffixAddPartitionsElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixTouchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TOUCH(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TOUCH, 0)!;
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixTouch;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixTouch) {
             listener.enterAlterStatementSuffixTouch(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixTouch) {
             listener.exitAlterStatementSuffixTouch(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixTouch) {
            return visitor.visitAlterStatementSuffixTouch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixArchiveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ARCHIVE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ARCHIVE, 0)!;
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixArchive;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixArchive) {
             listener.enterAlterStatementSuffixArchive(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixArchive) {
             listener.exitAlterStatementSuffixArchive(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixArchive) {
            return visitor.visitAlterStatementSuffixArchive(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixUnArchiveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UNARCHIVE, 0)!;
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixUnArchive;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixUnArchive) {
             listener.enterAlterStatementSuffixUnArchive(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixUnArchive) {
             listener.exitAlterStatementSuffixUnArchive(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixUnArchive) {
            return visitor.visitAlterStatementSuffixUnArchive(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionLocationContext extends antlr.ParserRuleContext {
    public _locn?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LOCATION, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionLocation;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionLocation) {
             listener.enterPartitionLocation(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionLocation) {
             listener.exitPartitionLocation(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionLocation) {
            return visitor.visitPartitionLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixDropPartitionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_PARTITION(): antlr.TerminalNode[];
    public KW_PARTITION(i: number): antlr.TerminalNode | null;
    public KW_PARTITION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_PARTITION);
    	} else {
    		return this.getToken(HiveSQLParser.KW_PARTITION, i);
    	}
    }
    public partitionSelectorSpec(): PartitionSelectorSpecContext[];
    public partitionSelectorSpec(i: number): PartitionSelectorSpecContext | null;
    public partitionSelectorSpec(i?: number): PartitionSelectorSpecContext[] | PartitionSelectorSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSelectorSpecContext);
        }

        return this.getRuleContext(i, PartitionSelectorSpecContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PURGE, 0);
    }
    public replicationClause(): ReplicationClauseContext | null {
        return this.getRuleContext(0, ReplicationClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixDropPartitions;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixDropPartitions) {
             listener.enterAlterStatementSuffixDropPartitions(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixDropPartitions) {
             listener.exitAlterStatementSuffixDropPartitions(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixDropPartitions) {
            return visitor.visitAlterStatementSuffixDropPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixPropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TBLPROPERTIES, 0)!;
    }
    public tableProperties(): TablePropertiesContext {
        return this.getRuleContext(0, TablePropertiesContext)!;
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNSET, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixProperties;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixProperties) {
             listener.enterAlterStatementSuffixProperties(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixProperties) {
             listener.exitAlterStatementSuffixProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixProperties) {
            return visitor.visitAlterStatementSuffixProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterViewSuffixPropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TBLPROPERTIES, 0)!;
    }
    public tableProperties(): TablePropertiesContext {
        return this.getRuleContext(0, TablePropertiesContext)!;
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNSET, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterViewSuffixProperties;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterViewSuffixProperties) {
             listener.enterAlterViewSuffixProperties(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterViewSuffixProperties) {
             listener.exitAlterViewSuffixProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterViewSuffixProperties) {
            return visitor.visitAlterViewSuffixProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixSerdePropertiesContext extends antlr.ParserRuleContext {
    public _serdeName?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SET, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SERDEPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNSET, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixSerdeProperties;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixSerdeProperties) {
             listener.enterAlterStatementSuffixSerdeProperties(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixSerdeProperties) {
             listener.exitAlterStatementSuffixSerdeProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixSerdeProperties) {
            return visitor.visitAlterStatementSuffixSerdeProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePartitionPrefixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tablePartitionPrefix;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTablePartitionPrefix) {
             listener.enterTablePartitionPrefix(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTablePartitionPrefix) {
             listener.exitTablePartitionPrefix(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTablePartitionPrefix) {
            return visitor.visitTablePartitionPrefix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixFileFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_FILEFORMAT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FILEFORMAT, 0)!;
    }
    public fileFormat(): FileFormatContext {
        return this.getRuleContext(0, FileFormatContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixFileFormat;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixFileFormat) {
             listener.enterAlterStatementSuffixFileFormat(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixFileFormat) {
             listener.exitAlterStatementSuffixFileFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixFileFormat) {
            return visitor.visitAlterStatementSuffixFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixClusterbySortbyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOT, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CLUSTERED, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SORTED, 0);
    }
    public tableBuckets(): TableBucketsContext | null {
        return this.getRuleContext(0, TableBucketsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixClusterbySortby;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixClusterbySortby) {
             listener.enterAlterStatementSuffixClusterbySortby(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixClusterbySortby) {
             listener.exitAlterStatementSuffixClusterbySortby(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixClusterbySortby) {
            return visitor.visitAlterStatementSuffixClusterbySortby(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTblPartitionStatementSuffixSkewedLocationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_SKEWED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SKEWED, 0)!;
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LOCATION, 0)!;
    }
    public skewedLocations(): SkewedLocationsContext {
        return this.getRuleContext(0, SkewedLocationsContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterTblPartitionStatementSuffixSkewedLocation;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterTblPartitionStatementSuffixSkewedLocation) {
             listener.enterAlterTblPartitionStatementSuffixSkewedLocation(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterTblPartitionStatementSuffixSkewedLocation) {
             listener.exitAlterTblPartitionStatementSuffixSkewedLocation(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterTblPartitionStatementSuffixSkewedLocation) {
            return visitor.visitAlterTblPartitionStatementSuffixSkewedLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedLocationsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public skewedLocationsList(): SkewedLocationsListContext {
        return this.getRuleContext(0, SkewedLocationsListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_skewedLocations;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSkewedLocations) {
             listener.enterSkewedLocations(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSkewedLocations) {
             listener.exitSkewedLocations(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSkewedLocations) {
            return visitor.visitSkewedLocations(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedLocationsListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewedLocationMap(): SkewedLocationMapContext[];
    public skewedLocationMap(i: number): SkewedLocationMapContext | null;
    public skewedLocationMap(i?: number): SkewedLocationMapContext[] | SkewedLocationMapContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewedLocationMapContext);
        }

        return this.getRuleContext(i, SkewedLocationMapContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_skewedLocationsList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSkewedLocationsList) {
             listener.enterSkewedLocationsList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSkewedLocationsList) {
             listener.exitSkewedLocationsList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSkewedLocationsList) {
            return visitor.visitSkewedLocationsList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedLocationMapContext extends antlr.ParserRuleContext {
    public _key?: SkewedValueLocationElementContext;
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.EQUAL, 0)!;
    }
    public skewedValueLocationElement(): SkewedValueLocationElementContext {
        return this.getRuleContext(0, SkewedValueLocationElementContext)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_skewedLocationMap;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSkewedLocationMap) {
             listener.enterSkewedLocationMap(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSkewedLocationMap) {
             listener.exitSkewedLocationMap(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSkewedLocationMap) {
            return visitor.visitSkewedLocationMap(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixLocationContext extends antlr.ParserRuleContext {
    public _newLoc?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LOCATION, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixLocation;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixLocation) {
             listener.enterAlterStatementSuffixLocation(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixLocation) {
             listener.exitAlterStatementSuffixLocation(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixLocation) {
            return visitor.visitAlterStatementSuffixLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixSkewedbyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableSkewed(): TableSkewedContext | null {
        return this.getRuleContext(0, TableSkewedContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOT, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SKEWED, 0);
    }
    public storedAsDirs(): StoredAsDirsContext | null {
        return this.getRuleContext(0, StoredAsDirsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixSkewedby;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixSkewedby) {
             listener.enterAlterStatementSuffixSkewedby(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixSkewedby) {
             listener.exitAlterStatementSuffixSkewedby(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixSkewedby) {
            return visitor.visitAlterStatementSuffixSkewedby(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixExchangePartitionContext extends antlr.ParserRuleContext {
    public _exchangename?: TableNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXCHANGE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_EXCHANGE, 0)!;
    }
    public partitionSpec(): PartitionSpecContext {
        return this.getRuleContext(0, PartitionSpecContext)!;
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WITH, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixExchangePartition;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixExchangePartition) {
             listener.enterAlterStatementSuffixExchangePartition(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixExchangePartition) {
             listener.exitAlterStatementSuffixExchangePartition(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixExchangePartition) {
            return visitor.visitAlterStatementSuffixExchangePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixRenamePartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TO, 0)!;
    }
    public partitionSpec(): PartitionSpecContext {
        return this.getRuleContext(0, PartitionSpecContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixRenamePart;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixRenamePart) {
             listener.enterAlterStatementSuffixRenamePart(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixRenamePart) {
             listener.exitAlterStatementSuffixRenamePart(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixRenamePart) {
            return visitor.visitAlterStatementSuffixRenamePart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixStatsPartContext extends antlr.ParserRuleContext {
    public _colName?: Id_Context;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UPDATE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_STATISTICS, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FOR, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public tableProperties(): TablePropertiesContext {
        return this.getRuleContext(0, TablePropertiesContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COLUMN, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixStatsPart;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixStatsPart) {
             listener.enterAlterStatementSuffixStatsPart(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixStatsPart) {
             listener.exitAlterStatementSuffixStatsPart(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixStatsPart) {
            return visitor.visitAlterStatementSuffixStatsPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixMergeFilesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CONCATENATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CONCATENATE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixMergeFiles;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixMergeFiles) {
             listener.enterAlterStatementSuffixMergeFiles(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixMergeFiles) {
             listener.exitAlterStatementSuffixMergeFiles(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixMergeFiles) {
            return visitor.visitAlterStatementSuffixMergeFiles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixBucketNumContext extends antlr.ParserRuleContext {
    public _num?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_INTO, 0)!;
    }
    public KW_BUCKETS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BUCKETS, 0)!;
    }
    public Number(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.Number, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixBucketNum;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixBucketNum) {
             listener.enterAlterStatementSuffixBucketNum(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixBucketNum) {
             listener.exitAlterStatementSuffixBucketNum(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixBucketNum) {
            return visitor.visitAlterStatementSuffixBucketNum(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BlockingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AND, 0)!;
    }
    public KW_WAIT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WAIT, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_blocking;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterBlocking) {
             listener.enterBlocking(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitBlocking) {
             listener.exitBlocking(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitBlocking) {
            return visitor.visitBlocking(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactPoolContext extends antlr.ParserRuleContext {
    public _poolName?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_POOL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_POOL, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_compactPool;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCompactPool) {
             listener.enterCompactPool(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCompactPool) {
             listener.exitCompactPool(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCompactPool) {
            return visitor.visitCompactPool(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixCompactContext extends antlr.ParserRuleContext {
    public _compactType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMPACT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COMPACT, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public tableImplBuckets(): TableImplBucketsContext | null {
        return this.getRuleContext(0, TableImplBucketsContext);
    }
    public blocking(): BlockingContext | null {
        return this.getRuleContext(0, BlockingContext);
    }
    public compactPool(): CompactPoolContext | null {
        return this.getRuleContext(0, CompactPoolContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OVERWRITE, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TBLPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixCompact;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixCompact) {
             listener.enterAlterStatementSuffixCompact(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixCompact) {
             listener.exitAlterStatementSuffixCompact(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixCompact) {
            return visitor.visitAlterStatementSuffixCompact(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixSetOwnerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_OWNER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OWNER, 0)!;
    }
    public principalName(): PrincipalNameContext {
        return this.getRuleContext(0, PrincipalNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixSetOwner;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixSetOwner) {
             listener.enterAlterStatementSuffixSetOwner(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixSetOwner) {
             listener.exitAlterStatementSuffixSetOwner(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixSetOwner) {
            return visitor.visitAlterStatementSuffixSetOwner(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixSetPartSpecContext extends antlr.ParserRuleContext {
    public _spec?: PartitionTransformSpecContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PARTITION, 0)!;
    }
    public KW_SPEC(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SPEC, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public partitionTransformSpec(): PartitionTransformSpecContext {
        return this.getRuleContext(0, PartitionTransformSpecContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixSetPartSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixSetPartSpec) {
             listener.enterAlterStatementSuffixSetPartSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixSetPartSpec) {
             listener.exitAlterStatementSuffixSetPartSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixSetPartSpec) {
            return visitor.visitAlterStatementSuffixSetPartSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixExecuteContext extends antlr.ParserRuleContext {
    public _rollbackParam?: Token | null;
    public _expireParam?: Token | null;
    public _snapshotParam?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_EXECUTE, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROLLBACK, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public KW_EXPIRE_SNAPSHOTS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXPIRE_SNAPSHOTS, 0);
    }
    public KW_SET_CURRENT_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SET_CURRENT_SNAPSHOT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterStatementSuffixExecute;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterStatementSuffixExecute) {
             listener.enterAlterStatementSuffixExecute(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterStatementSuffixExecute) {
             listener.exitAlterStatementSuffixExecute(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixExecute) {
            return visitor.visitAlterStatementSuffixExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: Token | null;
    public _outFmt?: Token | null;
    public _serdeCls?: Token | null;
    public _inDriver?: Token | null;
    public _outDriver?: Token | null;
    public _genericSpec?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INPUTFORMAT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SERDE, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSQLParser.StringLiteral, i);
    	}
    }
    public KW_INPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INPUTDRIVER, 0);
    }
    public KW_OUTPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OUTPUTDRIVER, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_fileFormat;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFileFormat) {
             listener.enterFileFormat(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFileFormat) {
             listener.exitFileFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFileFormat) {
            return visitor.visitFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDataConnectorStatementSuffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterDataConnectorSuffixProperties(): AlterDataConnectorSuffixPropertiesContext | null {
        return this.getRuleContext(0, AlterDataConnectorSuffixPropertiesContext);
    }
    public alterDataConnectorSuffixSetOwner(): AlterDataConnectorSuffixSetOwnerContext | null {
        return this.getRuleContext(0, AlterDataConnectorSuffixSetOwnerContext);
    }
    public alterDataConnectorSuffixSetUrl(): AlterDataConnectorSuffixSetUrlContext | null {
        return this.getRuleContext(0, AlterDataConnectorSuffixSetUrlContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterDataConnectorStatementSuffix;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterDataConnectorStatementSuffix) {
             listener.enterAlterDataConnectorStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterDataConnectorStatementSuffix) {
             listener.exitAlterDataConnectorStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterDataConnectorStatementSuffix) {
            return visitor.visitAlterDataConnectorStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDataConnectorSuffixPropertiesContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_DCPROPERTIES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DCPROPERTIES, 0)!;
    }
    public dcProperties(): DcPropertiesContext {
        return this.getRuleContext(0, DcPropertiesContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterDataConnectorSuffixProperties;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterDataConnectorSuffixProperties) {
             listener.enterAlterDataConnectorSuffixProperties(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterDataConnectorSuffixProperties) {
             listener.exitAlterDataConnectorSuffixProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterDataConnectorSuffixProperties) {
            return visitor.visitAlterDataConnectorSuffixProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDataConnectorSuffixSetOwnerContext extends antlr.ParserRuleContext {
    public _dcName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_OWNER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OWNER, 0)!;
    }
    public principalName(): PrincipalNameContext {
        return this.getRuleContext(0, PrincipalNameContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterDataConnectorSuffixSetOwner;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterDataConnectorSuffixSetOwner) {
             listener.enterAlterDataConnectorSuffixSetOwner(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterDataConnectorSuffixSetOwner) {
             listener.exitAlterDataConnectorSuffixSetOwner(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterDataConnectorSuffixSetOwner) {
            return visitor.visitAlterDataConnectorSuffixSetOwner(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDataConnectorSuffixSetUrlContext extends antlr.ParserRuleContext {
    public _dcName?: Id_Context;
    public _newUri?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SET, 0)!;
    }
    public KW_URL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_URL, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterDataConnectorSuffixSetUrl;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterDataConnectorSuffixSetUrl) {
             listener.enterAlterDataConnectorSuffixSetUrl(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterDataConnectorSuffixSetUrl) {
             listener.exitAlterDataConnectorSuffixSetUrl(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterDataConnectorSuffixSetUrl) {
            return visitor.visitAlterDataConnectorSuffixSetUrl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeTableOrFileContext extends antlr.ParserRuleContext {
    public _format?: Id_Context;
    public _uri?: Token | null;
    public _likeName?: TableNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LIKE, 0)!;
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FILE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_likeTableOrFile;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterLikeTableOrFile) {
             listener.enterLikeTableOrFile(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitLikeTableOrFile) {
             listener.exitLikeTableOrFile(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitLikeTableOrFile) {
            return visitor.visitLikeTableOrFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableStatementContext extends antlr.ParserRuleContext {
    public _temp?: Token | null;
    public _trans?: Token | null;
    public _ext?: Token | null;
    public _name?: TableNameContext;
    public _mgd?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public likeTableOrFile(): LikeTableOrFileContext | null {
        return this.getRuleContext(0, LikeTableOrFileContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TEMPORARY, 0);
    }
    public KW_TRANSACTIONAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRANSACTIONAL, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXTERNAL, 0);
    }
    public createTablePartitionSpec(): CreateTablePartitionSpecContext | null {
        return this.getRuleContext(0, CreateTablePartitionSpecContext);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public tableLocation(): TableLocationContext | null {
        return this.getRuleContext(0, TableLocationContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public columnNameTypeOrConstraintList(): ColumnNameTypeOrConstraintListContext | null {
        return this.getRuleContext(0, ColumnNameTypeOrConstraintListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public tableUsing(): TableUsingContext | null {
        return this.getRuleContext(0, TableUsingContext);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public tableBuckets(): TableBucketsContext | null {
        return this.getRuleContext(0, TableBucketsContext);
    }
    public tableSkewed(): TableSkewedContext | null {
        return this.getRuleContext(0, TableSkewedContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext | null {
        return this.getRuleContext(0, SelectStatementWithCTEContext);
    }
    public KW_MANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MANAGED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createTableStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateTableStatement) {
             listener.enterCreateTableStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateTableStatement) {
             listener.exitCreateTableStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateTableStatement) {
            return visitor.visitCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDataConnectorStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _dcprops?: DcPropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DATACONNECTOR, 0)!;
    }
    public dataConnectorType(): DataConnectorTypeContext {
        return this.getRuleContext(0, DataConnectorTypeContext)!;
    }
    public dataConnectorUrl(): DataConnectorUrlContext {
        return this.getRuleContext(0, DataConnectorUrlContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public dataConnectorComment(): DataConnectorCommentContext | null {
        return this.getRuleContext(0, DataConnectorCommentContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public KW_DCPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DCPROPERTIES, 0);
    }
    public dcProperties(): DcPropertiesContext | null {
        return this.getRuleContext(0, DcPropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createDataConnectorStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateDataConnectorStatement) {
             listener.enterCreateDataConnectorStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateDataConnectorStatement) {
             listener.exitCreateDataConnectorStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateDataConnectorStatement) {
            return visitor.visitCreateDataConnectorStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataConnectorCommentContext extends antlr.ParserRuleContext {
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dataConnectorComment;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDataConnectorComment) {
             listener.enterDataConnectorComment(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDataConnectorComment) {
             listener.exitDataConnectorComment(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDataConnectorComment) {
            return visitor.visitDataConnectorComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataConnectorUrlContext extends antlr.ParserRuleContext {
    public _url?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_URL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_URL, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dataConnectorUrl;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDataConnectorUrl) {
             listener.enterDataConnectorUrl(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDataConnectorUrl) {
             listener.exitDataConnectorUrl(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDataConnectorUrl) {
            return visitor.visitDataConnectorUrl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataConnectorTypeContext extends antlr.ParserRuleContext {
    public _dcType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TYPE, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dataConnectorType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDataConnectorType) {
             listener.enterDataConnectorType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDataConnectorType) {
             listener.exitDataConnectorType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDataConnectorType) {
            return visitor.visitDataConnectorType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DcPropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public dbPropertiesList(): DbPropertiesListContext {
        return this.getRuleContext(0, DbPropertiesListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dcProperties;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDcProperties) {
             listener.enterDcProperties(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDcProperties) {
             listener.exitDcProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDcProperties) {
            return visitor.visitDcProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropDataConnectorStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DATACONNECTOR, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropDataConnectorStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropDataConnectorStatement) {
             listener.enterDropDataConnectorStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropDataConnectorStatement) {
             listener.exitDropDataConnectorStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropDataConnectorStatement) {
            return visitor.visitDropDataConnectorStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAllColumnsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.STAR, 0)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableAllColumns;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableAllColumns) {
             listener.enterTableAllColumns(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableAllColumns) {
             listener.exitTableAllColumns(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableAllColumns) {
            return visitor.visitTableAllColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableOrColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableOrColumn;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableOrColumn) {
             listener.enterTableOrColumn(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableOrColumn) {
             listener.exitTableOrColumn(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableOrColumn) {
            return visitor.visitTableOrColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFAULT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DEFAULT, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_defaultValue;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDefaultValue) {
             listener.enterDefaultValue(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDefaultValue) {
             listener.exitDefaultValue(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDefaultValue) {
            return visitor.visitDefaultValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_expressionList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExpressionList) {
             listener.enterExpressionList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExpressionList) {
             listener.exitExpressionList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExpressionList) {
            return visitor.visitExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_aliasList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAliasList) {
             listener.enterAliasList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAliasList) {
             listener.exitAliasList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAliasList) {
            return visitor.visitAliasList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FROM, 0)!;
    }
    public fromSource(): FromSourceContext {
        return this.getRuleContext(0, FromSourceContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_fromClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uniqueJoinToken(): UniqueJoinTokenContext | null {
        return this.getRuleContext(0, UniqueJoinTokenContext);
    }
    public uniqueJoinSource(): UniqueJoinSourceContext[];
    public uniqueJoinSource(i: number): UniqueJoinSourceContext | null;
    public uniqueJoinSource(i?: number): UniqueJoinSourceContext[] | UniqueJoinSourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UniqueJoinSourceContext);
        }

        return this.getRuleContext(i, UniqueJoinSourceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public joinSource(): JoinSourceContext | null {
        return this.getRuleContext(0, JoinSourceContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_fromSource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFromSource) {
             listener.enterFromSource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFromSource) {
             listener.exitFromSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFromSource) {
            return visitor.visitFromSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomjoinSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableSource(): TableSourceContext | null {
        return this.getRuleContext(0, TableSourceContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public virtualTableSource(): VirtualTableSourceContext | null {
        return this.getRuleContext(0, VirtualTableSourceContext);
    }
    public subQuerySource(): SubQuerySourceContext | null {
        return this.getRuleContext(0, SubQuerySourceContext);
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext | null {
        return this.getRuleContext(0, PartitionedTableFunctionContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public joinSource(): JoinSourceContext | null {
        return this.getRuleContext(0, JoinSourceContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_atomjoinSource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAtomjoinSource) {
             listener.enterAtomjoinSource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAtomjoinSource) {
             listener.exitAtomjoinSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAtomjoinSource) {
            return visitor.visitAtomjoinSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomjoinSource(): AtomjoinSourceContext {
        return this.getRuleContext(0, AtomjoinSourceContext)!;
    }
    public joinToken(): JoinTokenContext[];
    public joinToken(i: number): JoinTokenContext | null;
    public joinToken(i?: number): JoinTokenContext[] | JoinTokenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinTokenContext);
        }

        return this.getRuleContext(i, JoinTokenContext);
    }
    public joinSourcePart(): JoinSourcePartContext[];
    public joinSourcePart(i: number): JoinSourcePartContext | null;
    public joinSourcePart(i?: number): JoinSourcePartContext[] | JoinSourcePartContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinSourcePartContext);
        }

        return this.getRuleContext(i, JoinSourcePartContext);
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_ON);
    	} else {
    		return this.getToken(HiveSQLParser.KW_ON, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode[];
    public KW_USING(i: number): antlr.TerminalNode | null;
    public KW_USING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_USING);
    	} else {
    		return this.getToken(HiveSQLParser.KW_USING, i);
    	}
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_joinSource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterJoinSource) {
             listener.enterJoinSource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitJoinSource) {
             listener.exitJoinSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitJoinSource) {
            return visitor.visitJoinSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinSourcePartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableSource(): TableSourceContext | null {
        return this.getRuleContext(0, TableSourceContext);
    }
    public virtualTableSource(): VirtualTableSourceContext | null {
        return this.getRuleContext(0, VirtualTableSourceContext);
    }
    public subQuerySource(): SubQuerySourceContext | null {
        return this.getRuleContext(0, SubQuerySourceContext);
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext | null {
        return this.getRuleContext(0, PartitionedTableFunctionContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_joinSourcePart;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterJoinSourcePart) {
             listener.enterJoinSourcePart(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitJoinSourcePart) {
             listener.exitJoinSourcePart(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitJoinSourcePart) {
            return visitor.visitJoinSourcePart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UniqueJoinSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uniqueJoinTableSource(): UniqueJoinTableSourceContext {
        return this.getRuleContext(0, UniqueJoinTableSourceContext)!;
    }
    public uniqueJoinExpr(): UniqueJoinExprContext {
        return this.getRuleContext(0, UniqueJoinExprContext)!;
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PRESERVE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_uniqueJoinSource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterUniqueJoinSource) {
             listener.enterUniqueJoinSource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitUniqueJoinSource) {
             listener.exitUniqueJoinSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitUniqueJoinSource) {
            return visitor.visitUniqueJoinSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UniqueJoinExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public expressionList(): ExpressionListContext {
        return this.getRuleContext(0, ExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_uniqueJoinExpr;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterUniqueJoinExpr) {
             listener.enterUniqueJoinExpr(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitUniqueJoinExpr) {
             listener.exitUniqueJoinExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitUniqueJoinExpr) {
            return visitor.visitUniqueJoinExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UniqueJoinTokenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNIQUEJOIN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UNIQUEJOIN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_uniqueJoinToken;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterUniqueJoinToken) {
             listener.enterUniqueJoinToken(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitUniqueJoinToken) {
             listener.exitUniqueJoinToken(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitUniqueJoinToken) {
            return visitor.visitUniqueJoinToken(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTokenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.COMMA, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_JOIN, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INNER, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CROSS, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RIGHT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FULL, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OUTER, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SEMI, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ANTI, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_joinToken;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterJoinToken) {
             listener.enterJoinToken(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitJoinToken) {
             listener.exitJoinToken(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitJoinToken) {
            return visitor.visitJoinToken(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LateralViewContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_LATERAL, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VIEW, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OUTER, 0);
    }
    public function_(): Function_Context | null {
        return this.getRuleContext(0, Function_Context);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLE, 0);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.LPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.LPAREN, i);
    	}
    }
    public valuesClause(): ValuesClauseContext | null {
        return this.getRuleContext(0, ValuesClauseContext);
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.RPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.RPAREN, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_lateralView;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterLateralView) {
             listener.enterLateralView(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitLateralView) {
             listener.exitLateralView(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitLateralView) {
            return visitor.visitLateralView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableAlias;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableBucketSampleContext extends antlr.ParserRuleContext {
    public _numerator?: Token | null;
    public _denominator?: Token | null;
    public _expression?: ExpressionContext;
    public _expr: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLESAMPLE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public KW_BUCKET(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BUCKET, 0)!;
    }
    public KW_OUT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OUT, 0)!;
    }
    public KW_OF(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OF, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.Number);
    	} else {
    		return this.getToken(HiveSQLParser.Number, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ON, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableBucketSample;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableBucketSample) {
             listener.enterTableBucketSample(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableBucketSample) {
             listener.exitTableBucketSample(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableBucketSample) {
            return visitor.visitTableBucketSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SplitSampleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLESAMPLE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public ByteLengthLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.ByteLengthLiteral, 0);
    }
    public KW_PERCENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PERCENT, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROWS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_splitSample;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSplitSample) {
             listener.enterSplitSample(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSplitSample) {
             listener.exitSplitSample(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSplitSample) {
            return visitor.visitSplitSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSampleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableBucketSample(): TableBucketSampleContext | null {
        return this.getRuleContext(0, TableBucketSampleContext);
    }
    public splitSample(): SplitSampleContext | null {
        return this.getRuleContext(0, SplitSampleContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableSample;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableSample) {
             listener.enterTableSample(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableSample) {
             listener.exitTableSample(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableSample) {
            return visitor.visitTableSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSourceContext extends antlr.ParserRuleContext {
    public _tabname?: TableNameContext;
    public _props?: TablePropertiesContext;
    public _ts?: TableSampleContext;
    public _asOf?: AsOfClauseContext;
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public tableSample(): TableSampleContext | null {
        return this.getRuleContext(0, TableSampleContext);
    }
    public asOfClause(): AsOfClauseContext | null {
        return this.getRuleContext(0, AsOfClauseContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableSource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableSource) {
             listener.enterTableSource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableSource) {
             listener.exitTableSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableSource) {
            return visitor.visitTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AsOfClauseContext extends antlr.ParserRuleContext {
    public _asOfTime?: ExpressionContext;
    public _asOfVersion?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode[];
    public KW_FOR(i: number): antlr.TerminalNode | null;
    public KW_FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_FOR);
    	} else {
    		return this.getToken(HiveSQLParser.KW_FOR, i);
    	}
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SYSTEM_TIME, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OF, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SYSTEM_VERSION, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_asOfClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAsOfClause) {
             listener.enterAsOfClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAsOfClause) {
             listener.exitAsOfClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAsOfClause) {
            return visitor.visitAsOfClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UniqueJoinTableSourceContext extends antlr.ParserRuleContext {
    public _tabname?: TableNameContext;
    public _ts?: TableSampleContext;
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableSample(): TableSampleContext | null {
        return this.getRuleContext(0, TableSampleContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_uniqueJoinTableSource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterUniqueJoinTableSource) {
             listener.enterUniqueJoinTableSource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitUniqueJoinTableSource) {
             listener.exitUniqueJoinTableSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitUniqueJoinTableSource) {
            return visitor.visitUniqueJoinTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public _db?: Id_Context;
    public _tab?: Id_Context;
    public _meta?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.DOT);
    	} else {
    		return this.getToken(HiveSQLParser.DOT, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameContext extends antlr.ParserRuleContext {
    public _db?: Id_Context;
    public _view?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_viewName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubQuerySourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public queryStatementExpression(): QueryStatementExpressionContext {
        return this.getRuleContext(0, QueryStatementExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_subQuerySource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSubQuerySource) {
             listener.enterSubQuerySource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSubQuerySource) {
             listener.exitSubQuerySource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSubQuerySource) {
            return visitor.visitSubQuerySource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitioningSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionByClause(): PartitionByClauseContext | null {
        return this.getRuleContext(0, PartitionByClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitioningSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitioningSpec) {
             listener.enterPartitioningSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitioningSpec) {
             listener.exitPartitioningSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitioningSpec) {
            return visitor.visitPartitioningSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTableFunctionSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subQuerySource(): SubQuerySourceContext | null {
        return this.getRuleContext(0, SubQuerySourceContext);
    }
    public tableSource(): TableSourceContext | null {
        return this.getRuleContext(0, TableSourceContext);
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext | null {
        return this.getRuleContext(0, PartitionedTableFunctionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionTableFunctionSource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionTableFunctionSource) {
             listener.enterPartitionTableFunctionSource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionTableFunctionSource) {
             listener.exitPartitionTableFunctionSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionTableFunctionSource) {
            return visitor.visitPartitionTableFunctionSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionedTableFunctionContext extends antlr.ParserRuleContext {
    public _n?: Id_Context;
    public _ptfsrc?: PartitionTableFunctionSourceContext;
    public _spec?: PartitioningSpecContext;
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.LPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.LPAREN, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ON, 0)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.RPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.RPAREN, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public partitionTableFunctionSource(): PartitionTableFunctionSourceContext {
        return this.getRuleContext(0, PartitionTableFunctionSourceContext)!;
    }
    public Identifier(): antlr.TerminalNode[];
    public Identifier(i: number): antlr.TerminalNode | null;
    public Identifier(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.Identifier);
    	} else {
    		return this.getToken(HiveSQLParser.Identifier, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public partitioningSpec(): PartitioningSpecContext | null {
        return this.getRuleContext(0, PartitioningSpecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionedTableFunction;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionedTableFunction) {
             listener.enterPartitionedTableFunction(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionedTableFunction) {
             listener.exitPartitionedTableFunction(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionedTableFunction) {
            return visitor.visitPartitionedTableFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WHERE, 0)!;
    }
    public searchCondition(): SearchConditionContext {
        return this.getRuleContext(0, SearchConditionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_whereClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_searchCondition;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSearchCondition) {
             listener.enterSearchCondition(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSearchCondition) {
             listener.exitSearchCondition(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSearchCondition) {
            return visitor.visitSearchCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valuesClause(): ValuesClauseContext {
        return this.getRuleContext(0, ValuesClauseContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_valuesSource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterValuesSource) {
             listener.enterValuesSource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitValuesSource) {
             listener.exitValuesSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitValuesSource) {
            return visitor.visitValuesSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_VALUES, 0)!;
    }
    public valuesTableConstructor(): ValuesTableConstructorContext {
        return this.getRuleContext(0, ValuesTableConstructorContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_valuesClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterValuesClause) {
             listener.enterValuesClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitValuesClause) {
             listener.exitValuesClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitValuesClause) {
            return visitor.visitValuesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesTableConstructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueRowConstructor(): ValueRowConstructorContext[];
    public valueRowConstructor(i: number): ValueRowConstructorContext | null;
    public valueRowConstructor(i?: number): ValueRowConstructorContext[] | ValueRowConstructorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueRowConstructorContext);
        }

        return this.getRuleContext(i, ValueRowConstructorContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public firstValueRowConstructor(): FirstValueRowConstructorContext | null {
        return this.getRuleContext(0, FirstValueRowConstructorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_valuesTableConstructor;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterValuesTableConstructor) {
             listener.enterValuesTableConstructor(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitValuesTableConstructor) {
             listener.exitValuesTableConstructor(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitValuesTableConstructor) {
            return visitor.visitValuesTableConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueRowConstructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext {
        return this.getRuleContext(0, ExpressionsInParenthesisContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_valueRowConstructor;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterValueRowConstructor) {
             listener.enterValueRowConstructor(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitValueRowConstructor) {
             listener.exitValueRowConstructor(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitValueRowConstructor) {
            return visitor.visitValueRowConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FirstValueRowConstructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public firstExpressionsWithAlias(): FirstExpressionsWithAliasContext {
        return this.getRuleContext(0, FirstExpressionsWithAliasContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_firstValueRowConstructor;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFirstValueRowConstructor) {
             listener.enterFirstValueRowConstructor(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFirstValueRowConstructor) {
             listener.exitFirstValueRowConstructor(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFirstValueRowConstructor) {
            return visitor.visitFirstValueRowConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VirtualTableSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TABLE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.LPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.LPAREN, i);
    	}
    }
    public valuesClause(): ValuesClauseContext {
        return this.getRuleContext(0, ValuesClauseContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.RPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.RPAREN, i);
    	}
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_virtualTableSource;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterVirtualTableSource) {
             listener.enterVirtualTableSource(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitVirtualTableSource) {
             listener.exitVirtualTableSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitVirtualTableSource) {
            return visitor.visitVirtualTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SELECT, 0);
    }
    public selectList(): SelectListContext | null {
        return this.getRuleContext(0, SelectListContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRANSFORM, 0);
    }
    public selectTrfmClause(): SelectTrfmClauseContext | null {
        return this.getRuleContext(0, SelectTrfmClauseContext);
    }
    public QUERY_HINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.QUERY_HINT, 0);
    }
    public all_distinct(): All_distinctContext | null {
        return this.getRuleContext(0, All_distinctContext);
    }
    public trfmClause(): TrfmClauseContext | null {
        return this.getRuleContext(0, TrfmClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_selectClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSelectClause) {
             listener.enterSelectClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSelectClause) {
             listener.exitSelectClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class All_distinctContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_all_distinct;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAll_distinct) {
             listener.enterAll_distinct(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAll_distinct) {
             listener.exitAll_distinct(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAll_distinct) {
            return visitor.visitAll_distinct(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectItem(): SelectItemContext[];
    public selectItem(i: number): SelectItemContext | null;
    public selectItem(i?: number): SelectItemContext[] | SelectItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }

        return this.getRuleContext(i, SelectItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_selectList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSelectList) {
             listener.enterSelectList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSelectList) {
             listener.exitSelectList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectList) {
            return visitor.visitSelectList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectTrfmClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.LPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.LPAREN, i);
    	}
    }
    public selectExpressionList(): SelectExpressionListContext {
        return this.getRuleContext(0, SelectExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.RPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.RPAREN, i);
    	}
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public recordWriter(): RecordWriterContext {
        return this.getRuleContext(0, RecordWriterContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_USING, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public recordReader(): RecordReaderContext {
        return this.getRuleContext(0, RecordReaderContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public aliasList(): AliasListContext | null {
        return this.getRuleContext(0, AliasListContext);
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_selectTrfmClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSelectTrfmClause) {
             listener.enterSelectTrfmClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSelectTrfmClause) {
             listener.exitSelectTrfmClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectTrfmClause) {
            return visitor.visitSelectTrfmClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableAllColumns(): TableAllColumnsContext | null {
        return this.getRuleContext(0, TableAllColumnsContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_selectItem;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSelectItem) {
             listener.enterSelectItem(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSelectItem) {
             listener.exitSelectItem(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectItem) {
            return visitor.visitSelectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrfmClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectExpressionList(): SelectExpressionListContext {
        return this.getRuleContext(0, SelectExpressionListContext)!;
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public recordWriter(): RecordWriterContext {
        return this.getRuleContext(0, RecordWriterContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_USING, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public recordReader(): RecordReaderContext {
        return this.getRuleContext(0, RecordReaderContext)!;
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MAP, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REDUCE, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public aliasList(): AliasListContext | null {
        return this.getRuleContext(0, AliasListContext);
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_trfmClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTrfmClause) {
             listener.enterTrfmClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTrfmClause) {
             listener.exitTrfmClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTrfmClause) {
            return visitor.visitTrfmClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableAllColumns(): TableAllColumnsContext | null {
        return this.getRuleContext(0, TableAllColumnsContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_selectExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSelectExpression) {
             listener.enterSelectExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSelectExpression) {
             listener.exitSelectExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectExpression) {
            return visitor.visitSelectExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectExpression(): SelectExpressionContext[];
    public selectExpression(i: number): SelectExpressionContext | null;
    public selectExpression(i?: number): SelectExpressionContext[] | SelectExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectExpressionContext);
        }

        return this.getRuleContext(i, SelectExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_selectExpressionList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSelectExpressionList) {
             listener.enterSelectExpressionList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSelectExpressionList) {
             listener.exitSelectExpressionList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectExpressionList) {
            return visitor.visitSelectExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WINDOW, 0)!;
    }
    public window_defn(): Window_defnContext[];
    public window_defn(i: number): Window_defnContext | null;
    public window_defn(i?: number): Window_defnContext[] | Window_defnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_defnContext);
        }

        return this.getRuleContext(i, Window_defnContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_window_clause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWindow_clause) {
             listener.enterWindow_clause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWindow_clause) {
             listener.exitWindow_clause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_clause) {
            return visitor.visitWindow_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_defnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AS, 0)!;
    }
    public window_specification(): Window_specificationContext {
        return this.getRuleContext(0, Window_specificationContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_window_defn;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWindow_defn) {
             listener.enterWindow_defn(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWindow_defn) {
             listener.exitWindow_defn(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_defn) {
            return visitor.visitWindow_defn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public partitioningSpec(): PartitioningSpecContext | null {
        return this.getRuleContext(0, PartitioningSpecContext);
    }
    public window_frame(): Window_frameContext | null {
        return this.getRuleContext(0, Window_frameContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_window_specification;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWindow_specification) {
             listener.enterWindow_specification(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWindow_specification) {
             listener.exitWindow_specification(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_specification) {
            return visitor.visitWindow_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_range_expression(): Window_range_expressionContext | null {
        return this.getRuleContext(0, Window_range_expressionContext);
    }
    public window_value_expression(): Window_value_expressionContext | null {
        return this.getRuleContext(0, Window_value_expressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_window_frame;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWindow_frame) {
             listener.enterWindow_frame(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWindow_frame) {
             listener.exitWindow_frame(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame) {
            return visitor.visitWindow_frame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_range_expressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROWS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ROWS, 0)!;
    }
    public window_frame_start_boundary(): Window_frame_start_boundaryContext | null {
        return this.getRuleContext(0, Window_frame_start_boundaryContext);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BETWEEN, 0);
    }
    public window_frame_boundary(): Window_frame_boundaryContext[];
    public window_frame_boundary(i: number): Window_frame_boundaryContext | null;
    public window_frame_boundary(i?: number): Window_frame_boundaryContext[] | Window_frame_boundaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_frame_boundaryContext);
        }

        return this.getRuleContext(i, Window_frame_boundaryContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AND, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_window_range_expression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWindow_range_expression) {
             listener.enterWindow_range_expression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWindow_range_expression) {
             listener.exitWindow_range_expression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_range_expression) {
            return visitor.visitWindow_range_expression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_value_expressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANGE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_RANGE, 0)!;
    }
    public window_frame_start_boundary(): Window_frame_start_boundaryContext | null {
        return this.getRuleContext(0, Window_frame_start_boundaryContext);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BETWEEN, 0);
    }
    public window_frame_boundary(): Window_frame_boundaryContext[];
    public window_frame_boundary(i: number): Window_frame_boundaryContext | null;
    public window_frame_boundary(i?: number): Window_frame_boundaryContext[] | Window_frame_boundaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_frame_boundaryContext);
        }

        return this.getRuleContext(i, Window_frame_boundaryContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AND, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_window_value_expression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWindow_value_expression) {
             listener.enterWindow_value_expression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWindow_value_expression) {
             listener.exitWindow_value_expression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_value_expression) {
            return visitor.visitWindow_value_expression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_start_boundaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNBOUNDED, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PRECEDING, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROW, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_window_frame_start_boundary;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWindow_frame_start_boundary) {
             listener.enterWindow_frame_start_boundary(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWindow_frame_start_boundary) {
             listener.exitWindow_frame_start_boundary(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_start_boundary) {
            return visitor.visitWindow_frame_start_boundary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_boundaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNBOUNDED, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FOLLOWING, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROW, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_window_frame_boundary;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWindow_frame_boundary) {
             listener.enterWindow_frame_boundary(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWindow_frame_boundary) {
             listener.exitWindow_frame_boundary(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_boundary) {
            return visitor.visitWindow_frame_boundary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public groupby_expression(): Groupby_expressionContext {
        return this.getRuleContext(0, Groupby_expressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_groupByClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Groupby_expressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rollupStandard(): RollupStandardContext | null {
        return this.getRuleContext(0, RollupStandardContext);
    }
    public rollupOldSyntax(): RollupOldSyntaxContext | null {
        return this.getRuleContext(0, RollupOldSyntaxContext);
    }
    public groupByEmpty(): GroupByEmptyContext | null {
        return this.getRuleContext(0, GroupByEmptyContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_groupby_expression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterGroupby_expression) {
             listener.enterGroupby_expression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitGroupby_expression) {
             listener.exitGroupby_expression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupby_expression) {
            return visitor.visitGroupby_expression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByEmptyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_groupByEmpty;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterGroupByEmpty) {
             listener.enterGroupByEmpty(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitGroupByEmpty) {
             listener.exitGroupByEmpty(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupByEmpty) {
            return visitor.visitGroupByEmpty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollupStandardContext extends antlr.ParserRuleContext {
    public _rollup?: Token | null;
    public _cube?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CUBE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rollupStandard;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRollupStandard) {
             listener.enterRollupStandard(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRollupStandard) {
             listener.exitRollupStandard(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRollupStandard) {
            return visitor.visitRollupStandard(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollupOldSyntaxContext extends antlr.ParserRuleContext {
    public _expr?: ExpressionsNotInParenthesisContext;
    public _rollup?: Token | null;
    public _cube?: Token | null;
    public _sets?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
        return this.getRuleContext(0, ExpressionsNotInParenthesisContext)!;
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CUBE, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SETS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public groupingSetExpression(): GroupingSetExpressionContext[];
    public groupingSetExpression(i: number): GroupingSetExpressionContext | null;
    public groupingSetExpression(i?: number): GroupingSetExpressionContext[] | GroupingSetExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetExpressionContext);
        }

        return this.getRuleContext(i, GroupingSetExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_GROUPING, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rollupOldSyntax;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRollupOldSyntax) {
             listener.enterRollupOldSyntax(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRollupOldSyntax) {
             listener.exitRollupOldSyntax(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRollupOldSyntax) {
            return visitor.visitRollupOldSyntax(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingSetExpressionMultiple(): GroupingSetExpressionMultipleContext | null {
        return this.getRuleContext(0, GroupingSetExpressionMultipleContext);
    }
    public groupingExpressionSingle(): GroupingExpressionSingleContext | null {
        return this.getRuleContext(0, GroupingExpressionSingleContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_groupingSetExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterGroupingSetExpression) {
             listener.enterGroupingSetExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitGroupingSetExpression) {
             listener.exitGroupingSetExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupingSetExpression) {
            return visitor.visitGroupingSetExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetExpressionMultipleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_groupingSetExpressionMultiple;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterGroupingSetExpressionMultiple) {
             listener.enterGroupingSetExpressionMultiple(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitGroupingSetExpressionMultiple) {
             listener.exitGroupingSetExpressionMultiple(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupingSetExpressionMultiple) {
            return visitor.visitGroupingSetExpressionMultiple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingExpressionSingleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_groupingExpressionSingle;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterGroupingExpressionSingle) {
             listener.enterGroupingExpressionSingle(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitGroupingExpressionSingle) {
             listener.exitGroupingExpressionSingle(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupingExpressionSingle) {
            return visitor.visitGroupingExpressionSingle(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HAVING(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_HAVING, 0)!;
    }
    public havingCondition(): HavingConditionContext {
        return this.getRuleContext(0, HavingConditionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_havingClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_QUALIFY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_QUALIFY, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_qualifyClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterQualifyClause) {
             listener.enterQualifyClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitQualifyClause) {
             listener.exitQualifyClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitQualifyClause) {
            return visitor.visitQualifyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_havingCondition;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterHavingCondition) {
             listener.enterHavingCondition(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitHavingCondition) {
             listener.exitHavingCondition(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitHavingCondition) {
            return visitor.visitHavingCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsInParenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
        return this.getRuleContext(0, ExpressionsNotInParenthesisContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_expressionsInParenthesis;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExpressionsInParenthesis) {
             listener.enterExpressionsInParenthesis(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExpressionsInParenthesis) {
             listener.exitExpressionsInParenthesis(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExpressionsInParenthesis) {
            return visitor.visitExpressionsInParenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsNotInParenthesisContext extends antlr.ParserRuleContext {
    public _first?: ExpressionOrDefaultContext;
    public _more?: ExpressionPartContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionOrDefault(): ExpressionOrDefaultContext {
        return this.getRuleContext(0, ExpressionOrDefaultContext)!;
    }
    public expressionPart(): ExpressionPartContext | null {
        return this.getRuleContext(0, ExpressionPartContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_expressionsNotInParenthesis;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExpressionsNotInParenthesis) {
             listener.enterExpressionsNotInParenthesis(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExpressionsNotInParenthesis) {
             listener.exitExpressionsNotInParenthesis(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExpressionsNotInParenthesis) {
            return visitor.visitExpressionsNotInParenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public expressionOrDefault(): ExpressionOrDefaultContext[];
    public expressionOrDefault(i: number): ExpressionOrDefaultContext | null;
    public expressionOrDefault(i?: number): ExpressionOrDefaultContext[] | ExpressionOrDefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionOrDefaultContext);
        }

        return this.getRuleContext(i, ExpressionOrDefaultContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_expressionPart;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExpressionPart) {
             listener.enterExpressionPart(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExpressionPart) {
             listener.exitExpressionPart(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExpressionPart) {
            return visitor.visitExpressionPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionOrDefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public defaultValue(): DefaultValueContext | null {
        return this.getRuleContext(0, DefaultValueContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_expressionOrDefault;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExpressionOrDefault) {
             listener.enterExpressionOrDefault(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExpressionOrDefault) {
             listener.exitExpressionOrDefault(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExpressionOrDefault) {
            return visitor.visitExpressionOrDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FirstExpressionsWithAliasContext extends antlr.ParserRuleContext {
    public _first?: ExpressionContext;
    public _colAlias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public expressionWithAlias(): ExpressionWithAliasContext[];
    public expressionWithAlias(i: number): ExpressionWithAliasContext | null;
    public expressionWithAlias(i?: number): ExpressionWithAliasContext[] | ExpressionWithAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionWithAliasContext);
        }

        return this.getRuleContext(i, ExpressionWithAliasContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_firstExpressionsWithAlias;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFirstExpressionsWithAlias) {
             listener.enterFirstExpressionsWithAlias(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFirstExpressionsWithAlias) {
             listener.exitFirstExpressionsWithAlias(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFirstExpressionsWithAlias) {
            return visitor.visitFirstExpressionsWithAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionWithAliasContext extends antlr.ParserRuleContext {
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AS, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_expressionWithAlias;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExpressionWithAlias) {
             listener.enterExpressionWithAlias(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExpressionWithAlias) {
             listener.exitExpressionWithAlias(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExpressionWithAlias) {
            return visitor.visitExpressionWithAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsNotInParenthesisContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_expressions;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExpressions) {
             listener.enterExpressions(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExpressions) {
             listener.exitExpressions(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExpressions) {
            return visitor.visitExpressions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnRefOrderInParenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public columnRefOrder(): ColumnRefOrderContext[];
    public columnRefOrder(i: number): ColumnRefOrderContext | null;
    public columnRefOrder(i?: number): ColumnRefOrderContext[] | ColumnRefOrderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnRefOrderContext);
        }

        return this.getRuleContext(i, ColumnRefOrderContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnRefOrderInParenthesis;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnRefOrderInParenthesis) {
             listener.enterColumnRefOrderInParenthesis(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnRefOrderInParenthesis) {
             listener.exitColumnRefOrderInParenthesis(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnRefOrderInParenthesis) {
            return visitor.visitColumnRefOrderInParenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnRefOrderNotInParenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRefOrder(): ColumnRefOrderContext[];
    public columnRefOrder(i: number): ColumnRefOrderContext | null;
    public columnRefOrder(i?: number): ColumnRefOrderContext[] | ColumnRefOrderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnRefOrderContext);
        }

        return this.getRuleContext(i, ColumnRefOrderContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_columnRefOrderNotInParenthesis;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterColumnRefOrderNotInParenthesis) {
             listener.enterColumnRefOrderNotInParenthesis(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitColumnRefOrderNotInParenthesis) {
             listener.exitColumnRefOrderNotInParenthesis(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnRefOrderNotInParenthesis) {
            return visitor.visitColumnRefOrderNotInParenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public columnRefOrder(): ColumnRefOrderContext[];
    public columnRefOrder(i: number): ColumnRefOrderContext | null;
    public columnRefOrder(i?: number): ColumnRefOrderContext[] | ColumnRefOrderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnRefOrderContext);
        }

        return this.getRuleContext(i, ColumnRefOrderContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_orderByClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterOrderByClause) {
             listener.enterOrderByClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitOrderByClause) {
             listener.exitOrderByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitOrderByClause) {
            return visitor.visitOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CLUSTER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public expressions(): ExpressionsContext {
        return this.getRuleContext(0, ExpressionsContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_clusterByClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterClusterByClause) {
             listener.enterClusterByClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitClusterByClause) {
             listener.exitClusterByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitClusterByClause) {
            return visitor.visitClusterByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PARTITION, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public expressions(): ExpressionsContext {
        return this.getRuleContext(0, ExpressionsContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionByClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionByClause) {
             listener.enterPartitionByClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionByClause) {
             listener.exitPartitionByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionByClause) {
            return visitor.visitPartitionByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DistributeByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DISTRIBUTE, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public expressions(): ExpressionsContext {
        return this.getRuleContext(0, ExpressionsContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_distributeByClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDistributeByClause) {
             listener.enterDistributeByClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDistributeByClause) {
             listener.exitDistributeByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDistributeByClause) {
            return visitor.visitDistributeByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SORT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_SORT, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_BY, 0)!;
    }
    public columnRefOrderInParenthesis(): ColumnRefOrderInParenthesisContext | null {
        return this.getRuleContext(0, ColumnRefOrderInParenthesisContext);
    }
    public columnRefOrderNotInParenthesis(): ColumnRefOrderNotInParenthesisContext | null {
        return this.getRuleContext(0, ColumnRefOrderNotInParenthesisContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_sortByClause;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSortByClause) {
             listener.enterSortByClause(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSortByClause) {
             listener.exitSortByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSortByClause) {
            return visitor.visitSortByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimFunctionContext extends antlr.ParserRuleContext {
    public _leading?: Token | null;
    public _trailing?: Token | null;
    public _trim_characters?: SelectExpressionContext;
    public _str?: SelectExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRIM(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TRIM, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FROM, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public selectExpression(): SelectExpressionContext[];
    public selectExpression(i: number): SelectExpressionContext | null;
    public selectExpression(i?: number): SelectExpressionContext[] | SelectExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectExpressionContext);
        }

        return this.getRuleContext(i, SelectExpressionContext);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BOTH, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRAILING, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_trimFunction;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTrimFunction) {
             listener.enterTrimFunction(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTrimFunction) {
             listener.exitTrimFunction(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTrimFunction) {
            return visitor.visitTrimFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_Context extends antlr.ParserRuleContext {
    public _star?: Token | null;
    public _dist?: All_distinctContext;
    public _within?: Token | null;
    public _ordBy?: OrderByClauseContext;
    public _nt?: Null_treatmentContext;
    public _ws?: Window_specificationContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public trimFunction(): TrimFunctionContext | null {
        return this.getRuleContext(0, TrimFunctionContext);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.LPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.RPAREN);
    	} else {
    		return this.getToken(HiveSQLParser.RPAREN, i);
    	}
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_GROUP, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OVER, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.STAR, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITHIN, 0);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public null_treatment(): Null_treatmentContext | null {
        return this.getRuleContext(0, Null_treatmentContext);
    }
    public selectExpression(): SelectExpressionContext[];
    public selectExpression(i: number): SelectExpressionContext | null;
    public selectExpression(i?: number): SelectExpressionContext[] | SelectExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectExpressionContext);
        }

        return this.getRuleContext(i, SelectExpressionContext);
    }
    public all_distinct(): All_distinctContext | null {
        return this.getRuleContext(0, All_distinctContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_function_;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFunction_) {
             listener.enterFunction_(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFunction_) {
             listener.exitFunction_(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFunction_) {
            return visitor.visitFunction_(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Null_treatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RESPECT, 0);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_NULLS, 0)!;
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_IGNORE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_null_treatment;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterNull_treatment) {
             listener.enterNull_treatment(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitNull_treatment) {
             listener.exitNull_treatment(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitNull_treatment) {
            return visitor.visitNull_treatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionIdentifier(): FunctionIdentifierContext | null {
        return this.getRuleContext(0, FunctionIdentifierContext);
    }
    public sql11ReservedKeywordsUsedAsFunctionName(): Sql11ReservedKeywordsUsedAsFunctionNameContext | null {
        return this.getRuleContext(0, Sql11ReservedKeywordsUsedAsFunctionNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_functionName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CastExpressionContext extends antlr.ParserRuleContext {
    public _toType?: PrimitiveTypeContext;
    public _fmt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CAST(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AS, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public primitiveType(): PrimitiveTypeContext {
        return this.getRuleContext(0, PrimitiveTypeContext)!;
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FORMAT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_castExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCastExpression) {
             listener.enterCastExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCastExpression) {
             listener.exitCastExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCastExpression) {
            return visitor.visitCastExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CASE, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_END, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode[];
    public KW_WHEN(i: number): antlr.TerminalNode | null;
    public KW_WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_WHEN);
    	} else {
    		return this.getToken(HiveSQLParser.KW_WHEN, i);
    	}
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_THEN);
    	} else {
    		return this.getToken(HiveSQLParser.KW_THEN, i);
    	}
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ELSE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_caseExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCaseExpression) {
             listener.enterCaseExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCaseExpression) {
             listener.exitCaseExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCaseExpression) {
            return visitor.visitCaseExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CASE, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_END, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode[];
    public KW_WHEN(i: number): antlr.TerminalNode | null;
    public KW_WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_WHEN);
    	} else {
    		return this.getToken(HiveSQLParser.KW_WHEN, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_THEN);
    	} else {
    		return this.getToken(HiveSQLParser.KW_THEN, i);
    	}
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ELSE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_whenExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWhenExpression) {
             listener.enterWhenExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWhenExpression) {
             listener.exitWhenExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWhenExpression) {
            return visitor.visitWhenExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloorExpressionContext extends antlr.ParserRuleContext {
    public _floorUnit?: FloorDateQualifiersContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FLOOR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FLOOR, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TO, 0);
    }
    public floorDateQualifiers(): FloorDateQualifiersContext | null {
        return this.getRuleContext(0, FloorDateQualifiersContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_floorExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFloorExpression) {
             listener.enterFloorExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFloorExpression) {
             listener.exitFloorExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFloorExpression) {
            return visitor.visitFloorExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloorDateQualifiersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_YEAR, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_QUARTER, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MONTH, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WEEK, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SECOND, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_floorDateQualifiers;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFloorDateQualifiers) {
             listener.enterFloorDateQualifiers(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFloorDateQualifiers) {
             listener.exitFloorDateQualifiers(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFloorDateQualifiers) {
            return visitor.visitFloorDateQualifiers(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtractExpressionContext extends antlr.ParserRuleContext {
    public _timeUnit?: TimeQualifiersContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXTRACT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_EXTRACT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FROM, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public timeQualifiers(): TimeQualifiersContext {
        return this.getRuleContext(0, TimeQualifiersContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_extractExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExtractExpression) {
             listener.enterExtractExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExtractExpression) {
             listener.exitExtractExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExtractExpression) {
            return visitor.visitExtractExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeQualifiersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_YEAR, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_QUARTER, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MONTH, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WEEK, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DAY, 0);
    }
    public KW_DOW(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DOW, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SECOND, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_timeQualifiers;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTimeQualifiers) {
             listener.enterTimeQualifiers(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTimeQualifiers) {
             listener.exitTimeQualifiers(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTimeQualifiers) {
            return visitor.visitTimeQualifiers(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalLiteral(): IntervalLiteralContext | null {
        return this.getRuleContext(0, IntervalLiteralContext);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public dateLiteral(): DateLiteralContext | null {
        return this.getRuleContext(0, DateLiteralContext);
    }
    public timestampLiteral(): TimestampLiteralContext | null {
        return this.getRuleContext(0, TimestampLiteralContext);
    }
    public timestampLocalTZLiteral(): TimestampLocalTZLiteralContext | null {
        return this.getRuleContext(0, TimestampLocalTZLiteralContext);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public stringLiteralSequence(): StringLiteralSequenceContext | null {
        return this.getRuleContext(0, StringLiteralSequenceContext);
    }
    public IntegralLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.IntegralLiteral, 0);
    }
    public NumberLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.NumberLiteral, 0);
    }
    public charSetStringLiteral(): CharSetStringLiteralContext | null {
        return this.getRuleContext(0, CharSetStringLiteralContext);
    }
    public booleanValue(): BooleanValueContext | null {
        return this.getRuleContext(0, BooleanValueContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NULL, 0);
    }
    public prepareStmtParam(): PrepareStmtParamContext | null {
        return this.getRuleContext(0, PrepareStmtParamContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_constant;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterConstant) {
             listener.enterConstant(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitConstant) {
             listener.exitConstant(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitConstant) {
            return visitor.visitConstant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrepareStmtParamContext extends antlr.ParserRuleContext {
    public _p?: ParameterIdxContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parameterIdx(): ParameterIdxContext {
        return this.getRuleContext(0, ParameterIdxContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_prepareStmtParam;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrepareStmtParam) {
             listener.enterPrepareStmtParam(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrepareStmtParam) {
             listener.exitPrepareStmtParam(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrepareStmtParam) {
            return visitor.visitPrepareStmtParam(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParameterIdxContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUESTION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.QUESTION, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_parameterIdx;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterParameterIdx) {
             listener.enterParameterIdx(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitParameterIdx) {
             listener.exitParameterIdx(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitParameterIdx) {
            return visitor.visitParameterIdx(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLiteralSequenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSQLParser.StringLiteral, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_stringLiteralSequence;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterStringLiteralSequence) {
             listener.enterStringLiteralSequence(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitStringLiteralSequence) {
             listener.exitStringLiteralSequence(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitStringLiteralSequence) {
            return visitor.visitStringLiteralSequence(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharSetStringLiteralContext extends antlr.ParserRuleContext {
    public _csName?: Token | null;
    public _csLiteral?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CharSetName(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.CharSetName, 0)!;
    }
    public CharSetLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.CharSetLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_charSetStringLiteral;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCharSetStringLiteral) {
             listener.enterCharSetStringLiteral(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCharSetStringLiteral) {
             listener.exitCharSetStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCharSetStringLiteral) {
            return visitor.visitCharSetStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATE, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CURRENT_DATE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dateLiteral;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDateLiteral) {
             listener.enterDateLiteral(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDateLiteral) {
             listener.exitDateLiteral(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDateLiteral) {
            return visitor.visitDateLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimestampLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TIMESTAMP, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_timestampLiteral;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTimestampLiteral) {
             listener.enterTimestampLiteral(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTimestampLiteral) {
             listener.exitTimestampLiteral(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTimestampLiteral) {
            return visitor.visitTimestampLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimestampLocalTZLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIMESTAMPLOCALTZ(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TIMESTAMPLOCALTZ, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_timestampLocalTZLiteral;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTimestampLocalTZLiteral) {
             listener.enterTimestampLocalTZLiteral(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTimestampLocalTZLiteral) {
             listener.exitTimestampLocalTZLiteral(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTimestampLocalTZLiteral) {
            return visitor.visitTimestampLocalTZLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_intervalValue;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterIntervalValue) {
             listener.enterIntervalValue(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitIntervalValue) {
             listener.exitIntervalValue(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitIntervalValue) {
            return visitor.visitIntervalValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalLiteralContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public _qualifiers?: IntervalQualifiersContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalValue(): IntervalValueContext {
        return this.getRuleContext(0, IntervalValueContext)!;
    }
    public intervalQualifiers(): IntervalQualifiersContext {
        return this.getRuleContext(0, IntervalQualifiersContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_intervalLiteral;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterIntervalLiteral) {
             listener.enterIntervalLiteral(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitIntervalLiteral) {
             listener.exitIntervalLiteral(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitIntervalLiteral) {
            return visitor.visitIntervalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalExpressionContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public _qualifiers?: IntervalQualifiersContext;
    public _expr?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public intervalValue(): IntervalValueContext | null {
        return this.getRuleContext(0, IntervalValueContext);
    }
    public intervalQualifiers(): IntervalQualifiersContext {
        return this.getRuleContext(0, IntervalQualifiersContext)!;
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INTERVAL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_intervalExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterIntervalExpression) {
             listener.enterIntervalExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitIntervalExpression) {
             listener.exitIntervalExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitIntervalExpression) {
            return visitor.visitIntervalExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalQualifiersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_YEAR, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TO, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MONTH, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DAY, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SECOND, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MINUTE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_intervalQualifiers;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterIntervalQualifiers) {
             listener.enterIntervalQualifiers(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitIntervalQualifiers) {
             listener.exitIntervalQualifiers(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitIntervalQualifiers) {
            return visitor.visitIntervalQualifiers(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceOrExpression(): PrecedenceOrExpressionContext {
        return this.getRuleContext(0, PrecedenceOrExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_expression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public intervalExpression(): IntervalExpressionContext | null {
        return this.getRuleContext(0, IntervalExpressionContext);
    }
    public castExpression(): CastExpressionContext | null {
        return this.getRuleContext(0, CastExpressionContext);
    }
    public extractExpression(): ExtractExpressionContext | null {
        return this.getRuleContext(0, ExtractExpressionContext);
    }
    public floorExpression(): FloorExpressionContext | null {
        return this.getRuleContext(0, FloorExpressionContext);
    }
    public caseExpression(): CaseExpressionContext | null {
        return this.getRuleContext(0, CaseExpressionContext);
    }
    public whenExpression(): WhenExpressionContext | null {
        return this.getRuleContext(0, WhenExpressionContext);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public function_(): Function_Context | null {
        return this.getRuleContext(0, Function_Context);
    }
    public tableOrColumn(): TableOrColumnContext | null {
        return this.getRuleContext(0, TableOrColumnContext);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_atomExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAtomExpression) {
             listener.enterAtomExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAtomExpression) {
             listener.exitAtomExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAtomExpression) {
            return visitor.visitAtomExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceFieldExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomExpression(): AtomExpressionContext {
        return this.getRuleContext(0, AtomExpressionContext)!;
    }
    public LSQUARE(): antlr.TerminalNode[];
    public LSQUARE(i: number): antlr.TerminalNode | null;
    public LSQUARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.LSQUARE);
    	} else {
    		return this.getToken(HiveSQLParser.LSQUARE, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RSQUARE(): antlr.TerminalNode[];
    public RSQUARE(i: number): antlr.TerminalNode | null;
    public RSQUARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.RSQUARE);
    	} else {
    		return this.getToken(HiveSQLParser.RSQUARE, i);
    	}
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.DOT);
    	} else {
    		return this.getToken(HiveSQLParser.DOT, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceFieldExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceFieldExpression) {
             listener.enterPrecedenceFieldExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceFieldExpression) {
             listener.exitPrecedenceFieldExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceFieldExpression) {
            return visitor.visitPrecedenceFieldExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceUnaryOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.MINUS, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.TILDE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceUnaryOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceUnaryOperator) {
             listener.enterPrecedenceUnaryOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceUnaryOperator) {
             listener.exitPrecedenceUnaryOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceUnaryOperator) {
            return visitor.visitPrecedenceUnaryOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceUnaryPrefixExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceFieldExpression(): PrecedenceFieldExpressionContext {
        return this.getRuleContext(0, PrecedenceFieldExpressionContext)!;
    }
    public precedenceUnaryOperator(): PrecedenceUnaryOperatorContext[];
    public precedenceUnaryOperator(i: number): PrecedenceUnaryOperatorContext | null;
    public precedenceUnaryOperator(i?: number): PrecedenceUnaryOperatorContext[] | PrecedenceUnaryOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceUnaryOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceUnaryOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceUnaryPrefixExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceUnaryPrefixExpression) {
             listener.enterPrecedenceUnaryPrefixExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceUnaryPrefixExpression) {
             listener.exitPrecedenceUnaryPrefixExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceUnaryPrefixExpression) {
            return visitor.visitPrecedenceUnaryPrefixExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceBitwiseXorOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BITWISEXOR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.BITWISEXOR, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceBitwiseXorOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceBitwiseXorOperator) {
             listener.enterPrecedenceBitwiseXorOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceBitwiseXorOperator) {
             listener.exitPrecedenceBitwiseXorOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceBitwiseXorOperator) {
            return visitor.visitPrecedenceBitwiseXorOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceBitwiseXorExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceUnaryPrefixExpression(): PrecedenceUnaryPrefixExpressionContext[];
    public precedenceUnaryPrefixExpression(i: number): PrecedenceUnaryPrefixExpressionContext | null;
    public precedenceUnaryPrefixExpression(i?: number): PrecedenceUnaryPrefixExpressionContext[] | PrecedenceUnaryPrefixExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceUnaryPrefixExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceUnaryPrefixExpressionContext);
    }
    public precedenceBitwiseXorOperator(): PrecedenceBitwiseXorOperatorContext[];
    public precedenceBitwiseXorOperator(i: number): PrecedenceBitwiseXorOperatorContext | null;
    public precedenceBitwiseXorOperator(i?: number): PrecedenceBitwiseXorOperatorContext[] | PrecedenceBitwiseXorOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceBitwiseXorOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceBitwiseXorOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceBitwiseXorExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceBitwiseXorExpression) {
             listener.enterPrecedenceBitwiseXorExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceBitwiseXorExpression) {
             listener.exitPrecedenceBitwiseXorExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceBitwiseXorExpression) {
            return visitor.visitPrecedenceBitwiseXorExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceStarOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.STAR, 0);
    }
    public DIVIDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.DIVIDE, 0);
    }
    public MOD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.MOD, 0);
    }
    public DIV(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.DIV, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceStarOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceStarOperator) {
             listener.enterPrecedenceStarOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceStarOperator) {
             listener.exitPrecedenceStarOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceStarOperator) {
            return visitor.visitPrecedenceStarOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceStarExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceBitwiseXorExpression(): PrecedenceBitwiseXorExpressionContext[];
    public precedenceBitwiseXorExpression(i: number): PrecedenceBitwiseXorExpressionContext | null;
    public precedenceBitwiseXorExpression(i?: number): PrecedenceBitwiseXorExpressionContext[] | PrecedenceBitwiseXorExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceBitwiseXorExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceBitwiseXorExpressionContext);
    }
    public precedenceStarOperator(): PrecedenceStarOperatorContext[];
    public precedenceStarOperator(i: number): PrecedenceStarOperatorContext | null;
    public precedenceStarOperator(i?: number): PrecedenceStarOperatorContext[] | PrecedenceStarOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceStarOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceStarOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceStarExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceStarExpression) {
             listener.enterPrecedenceStarExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceStarExpression) {
             listener.exitPrecedenceStarExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceStarExpression) {
            return visitor.visitPrecedenceStarExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedencePlusOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedencePlusOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedencePlusOperator) {
             listener.enterPrecedencePlusOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedencePlusOperator) {
             listener.exitPrecedencePlusOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedencePlusOperator) {
            return visitor.visitPrecedencePlusOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedencePlusExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceStarExpression(): PrecedenceStarExpressionContext[];
    public precedenceStarExpression(i: number): PrecedenceStarExpressionContext | null;
    public precedenceStarExpression(i?: number): PrecedenceStarExpressionContext[] | PrecedenceStarExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceStarExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceStarExpressionContext);
    }
    public precedencePlusOperator(): PrecedencePlusOperatorContext[];
    public precedencePlusOperator(i: number): PrecedencePlusOperatorContext | null;
    public precedencePlusOperator(i?: number): PrecedencePlusOperatorContext[] | PrecedencePlusOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedencePlusOperatorContext);
        }

        return this.getRuleContext(i, PrecedencePlusOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedencePlusExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedencePlusExpression) {
             listener.enterPrecedencePlusExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedencePlusExpression) {
             listener.exitPrecedencePlusExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedencePlusExpression) {
            return visitor.visitPrecedencePlusExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceConcatenateOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONCATENATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.CONCATENATE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceConcatenateOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceConcatenateOperator) {
             listener.enterPrecedenceConcatenateOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceConcatenateOperator) {
             listener.exitPrecedenceConcatenateOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceConcatenateOperator) {
            return visitor.visitPrecedenceConcatenateOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceConcatenateExpressionContext extends antlr.ParserRuleContext {
    public _plus?: PrecedencePlusExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedencePlusExpression(): PrecedencePlusExpressionContext[];
    public precedencePlusExpression(i: number): PrecedencePlusExpressionContext | null;
    public precedencePlusExpression(i?: number): PrecedencePlusExpressionContext[] | PrecedencePlusExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedencePlusExpressionContext);
        }

        return this.getRuleContext(i, PrecedencePlusExpressionContext);
    }
    public precedenceConcatenateOperator(): PrecedenceConcatenateOperatorContext[];
    public precedenceConcatenateOperator(i: number): PrecedenceConcatenateOperatorContext | null;
    public precedenceConcatenateOperator(i?: number): PrecedenceConcatenateOperatorContext[] | PrecedenceConcatenateOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceConcatenateOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceConcatenateOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceConcatenateExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceConcatenateExpression) {
             listener.enterPrecedenceConcatenateExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceConcatenateExpression) {
             listener.exitPrecedenceConcatenateExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceConcatenateExpression) {
            return visitor.visitPrecedenceConcatenateExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceAmpersandOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AMPERSAND(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.AMPERSAND, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceAmpersandOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceAmpersandOperator) {
             listener.enterPrecedenceAmpersandOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceAmpersandOperator) {
             listener.exitPrecedenceAmpersandOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceAmpersandOperator) {
            return visitor.visitPrecedenceAmpersandOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceAmpersandExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceConcatenateExpression(): PrecedenceConcatenateExpressionContext[];
    public precedenceConcatenateExpression(i: number): PrecedenceConcatenateExpressionContext | null;
    public precedenceConcatenateExpression(i?: number): PrecedenceConcatenateExpressionContext[] | PrecedenceConcatenateExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceConcatenateExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceConcatenateExpressionContext);
    }
    public precedenceAmpersandOperator(): PrecedenceAmpersandOperatorContext[];
    public precedenceAmpersandOperator(i: number): PrecedenceAmpersandOperatorContext | null;
    public precedenceAmpersandOperator(i?: number): PrecedenceAmpersandOperatorContext[] | PrecedenceAmpersandOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceAmpersandOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceAmpersandOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceAmpersandExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceAmpersandExpression) {
             listener.enterPrecedenceAmpersandExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceAmpersandExpression) {
             listener.exitPrecedenceAmpersandExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceAmpersandExpression) {
            return visitor.visitPrecedenceAmpersandExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceBitwiseOrOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BITWISEOR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.BITWISEOR, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceBitwiseOrOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceBitwiseOrOperator) {
             listener.enterPrecedenceBitwiseOrOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceBitwiseOrOperator) {
             listener.exitPrecedenceBitwiseOrOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceBitwiseOrOperator) {
            return visitor.visitPrecedenceBitwiseOrOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceBitwiseOrExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceAmpersandExpression(): PrecedenceAmpersandExpressionContext[];
    public precedenceAmpersandExpression(i: number): PrecedenceAmpersandExpressionContext | null;
    public precedenceAmpersandExpression(i?: number): PrecedenceAmpersandExpressionContext[] | PrecedenceAmpersandExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceAmpersandExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceAmpersandExpressionContext);
    }
    public precedenceBitwiseOrOperator(): PrecedenceBitwiseOrOperatorContext[];
    public precedenceBitwiseOrOperator(i: number): PrecedenceBitwiseOrOperatorContext | null;
    public precedenceBitwiseOrOperator(i?: number): PrecedenceBitwiseOrOperatorContext[] | PrecedenceBitwiseOrOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceBitwiseOrOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceBitwiseOrOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceBitwiseOrExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceBitwiseOrExpression) {
             listener.enterPrecedenceBitwiseOrExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceBitwiseOrExpression) {
             listener.exitPrecedenceBitwiseOrExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceBitwiseOrExpression) {
            return visitor.visitPrecedenceBitwiseOrExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceRegexpOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LIKE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REGEXP, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceRegexpOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceRegexpOperator) {
             listener.enterPrecedenceRegexpOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceRegexpOperator) {
             listener.exitPrecedenceRegexpOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceRegexpOperator) {
            return visitor.visitPrecedenceRegexpOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceRegexpOperator(): PrecedenceRegexpOperatorContext | null {
        return this.getRuleContext(0, PrecedenceRegexpOperatorContext);
    }
    public LESSTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LESSTHANOREQUALTO, 0);
    }
    public LESSTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LESSTHAN, 0);
    }
    public GREATERTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.GREATERTHANOREQUALTO, 0);
    }
    public GREATERTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.GREATERTHAN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceSimilarOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceSimilarOperator) {
             listener.enterPrecedenceSimilarOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceSimilarOperator) {
             listener.exitPrecedenceSimilarOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarOperator) {
            return visitor.visitPrecedenceSimilarOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubQueryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_subQueryExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSubQueryExpression) {
             listener.enterSubQueryExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSubQueryExpression) {
             listener.exitSubQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSubQueryExpression) {
            return visitor.visitSubQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceSimilarExpressionMain(): PrecedenceSimilarExpressionMainContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionMainContext);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXISTS, 0);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceSimilarExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceSimilarExpression) {
             listener.enterPrecedenceSimilarExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceSimilarExpression) {
             listener.exitPrecedenceSimilarExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpression) {
            return visitor.visitPrecedenceSimilarExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionMainContext extends antlr.ParserRuleContext {
    public _a?: PrecedenceBitwiseOrExpressionContext;
    public _part?: PrecedenceSimilarExpressionPartContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext {
        return this.getRuleContext(0, PrecedenceBitwiseOrExpressionContext)!;
    }
    public precedenceSimilarExpressionPart(): PrecedenceSimilarExpressionPartContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionPartContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceSimilarExpressionMain;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceSimilarExpressionMain) {
             listener.enterPrecedenceSimilarExpressionMain(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceSimilarExpressionMain) {
             listener.exitPrecedenceSimilarExpressionMain(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionMain) {
            return visitor.visitPrecedenceSimilarExpressionMain(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionPartContext extends antlr.ParserRuleContext {
    public _equalExpr?: PrecedenceBitwiseOrExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceSimilarOperator(): PrecedenceSimilarOperatorContext | null {
        return this.getRuleContext(0, PrecedenceSimilarOperatorContext);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext | null {
        return this.getRuleContext(0, PrecedenceBitwiseOrExpressionContext);
    }
    public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionAtomContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOT, 0);
    }
    public precedenceSimilarExpressionPartNot(): PrecedenceSimilarExpressionPartNotContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionPartNotContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceSimilarExpressionPart;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceSimilarExpressionPart) {
             listener.enterPrecedenceSimilarExpressionPart(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceSimilarExpressionPart) {
             listener.exitPrecedenceSimilarExpressionPart(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionPart) {
            return visitor.visitPrecedenceSimilarExpressionPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionAtomContext extends antlr.ParserRuleContext {
    public _min?: PrecedenceBitwiseOrExpressionContext;
    public _max?: PrecedenceBitwiseOrExpressionContext;
    public _expr?: ExpressionsInParenthesisContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_IN, 0);
    }
    public precedenceSimilarExpressionIn(): PrecedenceSimilarExpressionInContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionInContext);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AND, 0);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext[];
    public precedenceBitwiseOrExpression(i: number): PrecedenceBitwiseOrExpressionContext | null;
    public precedenceBitwiseOrExpression(i?: number): PrecedenceBitwiseOrExpressionContext[] | PrecedenceBitwiseOrExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceBitwiseOrExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceBitwiseOrExpressionContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LIKE, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ANY, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ALL, 0);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public precedenceSimilarExpressionQuantifierPredicate(): PrecedenceSimilarExpressionQuantifierPredicateContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionQuantifierPredicateContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceSimilarExpressionAtom;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceSimilarExpressionAtom) {
             listener.enterPrecedenceSimilarExpressionAtom(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceSimilarExpressionAtom) {
             listener.exitPrecedenceSimilarExpressionAtom(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionAtom) {
            return visitor.visitPrecedenceSimilarExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionQuantifierPredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subQuerySelectorOperator(): SubQuerySelectorOperatorContext {
        return this.getRuleContext(0, SubQuerySelectorOperatorContext)!;
    }
    public quantifierType(): QuantifierTypeContext {
        return this.getRuleContext(0, QuantifierTypeContext)!;
    }
    public subQueryExpression(): SubQueryExpressionContext {
        return this.getRuleContext(0, SubQueryExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceSimilarExpressionQuantifierPredicate;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceSimilarExpressionQuantifierPredicate) {
             listener.enterPrecedenceSimilarExpressionQuantifierPredicate(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceSimilarExpressionQuantifierPredicate) {
             listener.exitPrecedenceSimilarExpressionQuantifierPredicate(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionQuantifierPredicate) {
            return visitor.visitPrecedenceSimilarExpressionQuantifierPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuantifierTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ANY, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SOME, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_quantifierType;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterQuantifierType) {
             listener.enterQuantifierType(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitQuantifierType) {
             listener.exitQuantifierType(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitQuantifierType) {
            return visitor.visitQuantifierType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionInContext extends antlr.ParserRuleContext {
    public _expr?: ExpressionsInParenthesisContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceSimilarExpressionIn;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceSimilarExpressionIn) {
             listener.enterPrecedenceSimilarExpressionIn(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceSimilarExpressionIn) {
             listener.exitPrecedenceSimilarExpressionIn(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionIn) {
            return visitor.visitPrecedenceSimilarExpressionIn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionPartNotContext extends antlr.ParserRuleContext {
    public _notExpr?: PrecedenceBitwiseOrExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceRegexpOperator(): PrecedenceRegexpOperatorContext | null {
        return this.getRuleContext(0, PrecedenceRegexpOperatorContext);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext | null {
        return this.getRuleContext(0, PrecedenceBitwiseOrExpressionContext);
    }
    public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionAtomContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceSimilarExpressionPartNot;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceSimilarExpressionPartNot) {
             listener.enterPrecedenceSimilarExpressionPartNot(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceSimilarExpressionPartNot) {
             listener.exitPrecedenceSimilarExpressionPartNot(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionPartNot) {
            return visitor.visitPrecedenceSimilarExpressionPartNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceDistinctOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_IS, 0)!;
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DISTINCT, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FROM, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceDistinctOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceDistinctOperator) {
             listener.enterPrecedenceDistinctOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceDistinctOperator) {
             listener.exitPrecedenceDistinctOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceDistinctOperator) {
            return visitor.visitPrecedenceDistinctOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceEqualOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.EQUAL, 0);
    }
    public EQUAL_NS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.EQUAL_NS, 0);
    }
    public NOTEQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.NOTEQUAL, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_IS, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOT, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DISTINCT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FROM, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceEqualOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceEqualOperator) {
             listener.enterPrecedenceEqualOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceEqualOperator) {
             listener.exitPrecedenceEqualOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceEqualOperator) {
            return visitor.visitPrecedenceEqualOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceEqualExpressionContext extends antlr.ParserRuleContext {
    public _precedenceEqualOperator?: PrecedenceEqualOperatorContext;
    public _equal: PrecedenceEqualOperatorContext[] = [];
    public _precedenceSimilarExpression?: PrecedenceSimilarExpressionContext;
    public _p: PrecedenceSimilarExpressionContext[] = [];
    public _precedenceDistinctOperator?: PrecedenceDistinctOperatorContext;
    public _dist: PrecedenceDistinctOperatorContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceSimilarExpression(): PrecedenceSimilarExpressionContext[];
    public precedenceSimilarExpression(i: number): PrecedenceSimilarExpressionContext | null;
    public precedenceSimilarExpression(i?: number): PrecedenceSimilarExpressionContext[] | PrecedenceSimilarExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceSimilarExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceSimilarExpressionContext);
    }
    public precedenceEqualOperator(): PrecedenceEqualOperatorContext[];
    public precedenceEqualOperator(i: number): PrecedenceEqualOperatorContext | null;
    public precedenceEqualOperator(i?: number): PrecedenceEqualOperatorContext[] | PrecedenceEqualOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceEqualOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceEqualOperatorContext);
    }
    public precedenceDistinctOperator(): PrecedenceDistinctOperatorContext[];
    public precedenceDistinctOperator(i: number): PrecedenceDistinctOperatorContext | null;
    public precedenceDistinctOperator(i?: number): PrecedenceDistinctOperatorContext[] | PrecedenceDistinctOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceDistinctOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceDistinctOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceEqualExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceEqualExpression) {
             listener.enterPrecedenceEqualExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceEqualExpression) {
             listener.exitPrecedenceEqualExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceEqualExpression) {
            return visitor.visitPrecedenceEqualExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NULL, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FALSE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNKNOWN, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_isCondition;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterIsCondition) {
             listener.enterIsCondition(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitIsCondition) {
             listener.exitIsCondition(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitIsCondition) {
            return visitor.visitIsCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceUnarySuffixExpressionContext extends antlr.ParserRuleContext {
    public _a?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceEqualExpression(): PrecedenceEqualExpressionContext {
        return this.getRuleContext(0, PrecedenceEqualExpressionContext)!;
    }
    public isCondition(): IsConditionContext | null {
        return this.getRuleContext(0, IsConditionContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_IS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceUnarySuffixExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceUnarySuffixExpression) {
             listener.enterPrecedenceUnarySuffixExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceUnarySuffixExpression) {
             listener.exitPrecedenceUnarySuffixExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceUnarySuffixExpression) {
            return visitor.visitPrecedenceUnarySuffixExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceNotOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_NOT, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceNotOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceNotOperator) {
             listener.enterPrecedenceNotOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceNotOperator) {
             listener.exitPrecedenceNotOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceNotOperator) {
            return visitor.visitPrecedenceNotOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceNotExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceUnarySuffixExpression(): PrecedenceUnarySuffixExpressionContext {
        return this.getRuleContext(0, PrecedenceUnarySuffixExpressionContext)!;
    }
    public precedenceNotOperator(): PrecedenceNotOperatorContext[];
    public precedenceNotOperator(i: number): PrecedenceNotOperatorContext | null;
    public precedenceNotOperator(i?: number): PrecedenceNotOperatorContext[] | PrecedenceNotOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceNotOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceNotOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceNotExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceNotExpression) {
             listener.enterPrecedenceNotExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceNotExpression) {
             listener.exitPrecedenceNotExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceNotExpression) {
            return visitor.visitPrecedenceNotExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceAndOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_AND, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceAndOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceAndOperator) {
             listener.enterPrecedenceAndOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceAndOperator) {
             listener.exitPrecedenceAndOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceAndOperator) {
            return visitor.visitPrecedenceAndOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceAndExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceNotExpression(): PrecedenceNotExpressionContext[];
    public precedenceNotExpression(i: number): PrecedenceNotExpressionContext | null;
    public precedenceNotExpression(i?: number): PrecedenceNotExpressionContext[] | PrecedenceNotExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceNotExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceNotExpressionContext);
    }
    public precedenceAndOperator(): PrecedenceAndOperatorContext[];
    public precedenceAndOperator(i: number): PrecedenceAndOperatorContext | null;
    public precedenceAndOperator(i?: number): PrecedenceAndOperatorContext[] | PrecedenceAndOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceAndOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceAndOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceAndExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceAndExpression) {
             listener.enterPrecedenceAndExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceAndExpression) {
             listener.exitPrecedenceAndExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceAndExpression) {
            return visitor.visitPrecedenceAndExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceOrOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OR(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_OR, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceOrOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceOrOperator) {
             listener.enterPrecedenceOrOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceOrOperator) {
             listener.exitPrecedenceOrOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceOrOperator) {
            return visitor.visitPrecedenceOrOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceOrExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceAndExpression(): PrecedenceAndExpressionContext[];
    public precedenceAndExpression(i: number): PrecedenceAndExpressionContext | null;
    public precedenceAndExpression(i?: number): PrecedenceAndExpressionContext[] | PrecedenceAndExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceAndExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceAndExpressionContext);
    }
    public precedenceOrOperator(): PrecedenceOrOperatorContext[];
    public precedenceOrOperator(i: number): PrecedenceOrOperatorContext | null;
    public precedenceOrOperator(i?: number): PrecedenceOrOperatorContext[] | PrecedenceOrOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceOrOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceOrOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_precedenceOrExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrecedenceOrExpression) {
             listener.enterPrecedenceOrExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrecedenceOrExpression) {
             listener.exitPrecedenceOrExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceOrExpression) {
            return visitor.visitPrecedenceOrExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FALSE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_booleanValue;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterBooleanValue) {
             listener.enterBooleanValue(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitBooleanValue) {
             listener.exitBooleanValue(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueTokContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FALSE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_booleanValueTok;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterBooleanValueTok) {
             listener.enterBooleanValueTok(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitBooleanValueTok) {
             listener.exitBooleanValueTok(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitBooleanValueTok) {
            return visitor.visitBooleanValueTok(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableOrPartitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_tableOrPartition;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTableOrPartition) {
             listener.enterTableOrPartition(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTableOrPartition) {
             listener.exitTableOrPartition(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTableOrPartition) {
            return visitor.visitTableOrPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PARTITION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public partitionVal(): PartitionValContext[];
    public partitionVal(i: number): PartitionValContext | null;
    public partitionVal(i?: number): PartitionValContext[] | PartitionValContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValContext);
        }

        return this.getRuleContext(i, PartitionValContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionSpec) {
             listener.enterPartitionSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionSpec) {
             listener.exitPartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpec) {
            return visitor.visitPartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.EQUAL, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionVal;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionVal) {
             listener.enterPartitionVal(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionVal) {
             listener.exitPartitionVal(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionVal) {
            return visitor.visitPartitionVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSelectorSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.LPAREN, 0)!;
    }
    public partitionSelectorVal(): PartitionSelectorValContext[];
    public partitionSelectorVal(i: number): PartitionSelectorValContext | null;
    public partitionSelectorVal(i?: number): PartitionSelectorValContext[] | PartitionSelectorValContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSelectorValContext);
        }

        return this.getRuleContext(i, PartitionSelectorValContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionSelectorSpec;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionSelectorSpec) {
             listener.enterPartitionSelectorSpec(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionSelectorSpec) {
             listener.exitPartitionSelectorSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionSelectorSpec) {
            return visitor.visitPartitionSelectorSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSelectorValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public partitionSelectorOperator(): PartitionSelectorOperatorContext {
        return this.getRuleContext(0, PartitionSelectorOperatorContext)!;
    }
    public constant(): ConstantContext {
        return this.getRuleContext(0, ConstantContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionSelectorVal;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionSelectorVal) {
             listener.enterPartitionSelectorVal(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionSelectorVal) {
             listener.exitPartitionSelectorVal(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionSelectorVal) {
            return visitor.visitPartitionSelectorVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSelectorOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LIKE, 0);
    }
    public subQuerySelectorOperator(): SubQuerySelectorOperatorContext | null {
        return this.getRuleContext(0, SubQuerySelectorOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_partitionSelectorOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPartitionSelectorOperator) {
             listener.enterPartitionSelectorOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPartitionSelectorOperator) {
             listener.exitPartitionSelectorOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionSelectorOperator) {
            return visitor.visitPartitionSelectorOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubQuerySelectorOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.EQUAL, 0);
    }
    public NOTEQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.NOTEQUAL, 0);
    }
    public LESSTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LESSTHANOREQUALTO, 0);
    }
    public LESSTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LESSTHAN, 0);
    }
    public GREATERTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.GREATERTHANOREQUALTO, 0);
    }
    public GREATERTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.GREATERTHAN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_subQuerySelectorOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSubQuerySelectorOperator) {
             listener.enterSubQuerySelectorOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSubQuerySelectorOperator) {
             listener.exitSubQuerySelectorOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSubQuerySelectorOperator) {
            return visitor.visitSubQuerySelectorOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SysFuncNamesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OR, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOT, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LIKE, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_IF, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CASE, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WHEN, 0);
    }
    public KW_FLOOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FLOOR, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TINYINT, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SMALLINT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INT, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BIGINT, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FLOAT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REAL, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DOUBLE, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BOOLEAN, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STRING, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BINARY, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ARRAY, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MAP, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STRUCT, 0);
    }
    public KW_UNIONTYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNIONTYPE, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.EQUAL, 0);
    }
    public EQUAL_NS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.EQUAL_NS, 0);
    }
    public NOTEQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.NOTEQUAL, 0);
    }
    public LESSTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LESSTHANOREQUALTO, 0);
    }
    public LESSTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LESSTHAN, 0);
    }
    public GREATERTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.GREATERTHANOREQUALTO, 0);
    }
    public GREATERTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.GREATERTHAN, 0);
    }
    public DIVIDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.DIVIDE, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.MINUS, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.STAR, 0);
    }
    public MOD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.MOD, 0);
    }
    public DIV(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.DIV, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.AMPERSAND, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.TILDE, 0);
    }
    public BITWISEOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.BITWISEOR, 0);
    }
    public BITWISEXOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.BITWISEXOR, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REGEXP, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_IN, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BETWEEN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_sysFuncNames;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSysFuncNames) {
             listener.enterSysFuncNames(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSysFuncNames) {
             listener.exitSysFuncNames(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSysFuncNames) {
            return visitor.visitSysFuncNames(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescFuncNamesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sysFuncNames(): SysFuncNamesContext | null {
        return this.getRuleContext(0, SysFuncNamesContext);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public functionIdentifier(): FunctionIdentifierContext | null {
        return this.getRuleContext(0, FunctionIdentifierContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_descFuncNames;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDescFuncNames) {
             listener.enterDescFuncNames(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDescFuncNames) {
             listener.exitDescFuncNames(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDescFuncNames) {
            return visitor.visitDescFuncNames(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Identifier(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Identifier, 0);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_id_;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterId_) {
             listener.enterId_(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitId_) {
             listener.exitId_(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitId_) {
            return visitor.visitId_(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionIdentifierContext extends antlr.ParserRuleContext {
    public _fn?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_functionIdentifier;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterFunctionIdentifier) {
             listener.enterFunctionIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitFunctionIdentifier) {
             listener.exitFunctionIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitFunctionIdentifier) {
            return visitor.visitFunctionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_principalIdentifier;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrincipalIdentifier) {
             listener.enterPrincipalIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrincipalIdentifier) {
             listener.exitPrincipalIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrincipalIdentifier) {
            return visitor.visitPrincipalIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ABORT, 0);
    }
    public KW_ACTIVATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ACTIVATE, 0);
    }
    public KW_ACTIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ACTIVE, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ADD, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ADMIN, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AFTER, 0);
    }
    public KW_ALLOC_FRACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ALLOC_FRACTION, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ANALYZE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ARCHIVE, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ASC, 0);
    }
    public KW_AST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AST, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AT, 0);
    }
    public KW_AUTOCOMMIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_AUTOCOMMIT, 0);
    }
    public KW_BATCH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BATCH, 0);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BEFORE, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BUCKETS, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CASCADE, 0);
    }
    public KW_CBO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CBO, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CHANGE, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CHECK, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CLUSTERED, 0);
    }
    public KW_CLUSTERSTATUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CLUSTERSTATUS, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COLLECTION, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMMENT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CONCATENATE, 0);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CONTINUE, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_COST, 0);
    }
    public KW_CRON(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CRON, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATA, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATABASES, 0);
    }
    public KW_DATETIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATETIME, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DAY, 0);
    }
    public KW_DAYOFWEEK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DAYOFWEEK, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DBPROPERTIES, 0);
    }
    public KW_DCPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DCPROPERTIES, 0);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEBUG, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEFAULT, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEFERRED, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEFINED, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DELIMITED, 0);
    }
    public KW_DEPENDENCY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEPENDENCY, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DESC, 0);
    }
    public KW_DETAIL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DETAIL, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DISABLE, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DISTRIBUTE, 0);
    }
    public KW_DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DISTRIBUTED, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DO, 0);
    }
    public KW_DOW(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DOW, 0);
    }
    public KW_DUMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DUMP, 0);
    }
    public KW_ELEM_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ELEM_TYPE, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ENABLE, 0);
    }
    public KW_ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ENFORCED, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ESCAPED, 0);
    }
    public KW_EVERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EVERY, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXCLUSIVE, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXECUTE, 0);
    }
    public KW_EXECUTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXECUTED, 0);
    }
    public KW_EXPIRE_SNAPSHOTS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXPIRE_SNAPSHOTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXPORT, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_EXPRESSION, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FIELDS, 0);
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FILE, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FIRST, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FORMATTED, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FUNCTIONS, 0);
    }
    public KW_HOLD_DDLTIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_HOLD_DDLTIME, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_HOUR, 0);
    }
    public KW_IDXPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_IDXPROPERTIES, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_IGNORE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INPATH, 0);
    }
    public KW_INPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INPUTDRIVER, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INPUTFORMAT, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ISOLATION, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ITEMS, 0);
    }
    public KW_JAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_JAR, 0);
    }
    public KW_JOINCOST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_JOINCOST, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_KEY, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_KEYS, 0);
    }
    public KW_KEY_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_KEY_TYPE, 0);
    }
    public KW_KILL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_KILL, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LAST, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LEVEL, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LINES, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOAD, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LOGICAL, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LONG, 0);
    }
    public KW_MANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MANAGED, 0);
    }
    public KW_MANAGEDLOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MANAGEDLOCATION, 0);
    }
    public KW_MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MANAGEMENT, 0);
    }
    public KW_MAPJOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MAPJOIN, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MAPPING, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MATCHED, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MATERIALIZED, 0);
    }
    public KW_METADATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_METADATA, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MINUTE, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MONTH, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MOVE, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MSCK, 0);
    }
    public KW_NORELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NORELY, 0);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOSCAN, 0);
    }
    public KW_NOVALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NOVALIDATE, 0);
    }
    public KW_NO_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NO_DROP, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NULLS, 0);
    }
    public KW_OFFLINE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OFFLINE, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OFFSET, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OPERATOR, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OPTION, 0);
    }
    public KW_OUTPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OUTPUTDRIVER, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OVERWRITE, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_OWNER, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PARTITIONS, 0);
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PATH, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PLAN, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PLANS, 0);
    }
    public KW_PLUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PLUS, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_POOL, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PRINCIPALS, 0);
    }
    public KW_PROTECTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PROTECTION, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_QUERY, 0);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_QUERY_PARALLELISM, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_READ, 0);
    }
    public KW_READONLY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_READONLY, 0);
    }
    public KW_REBUILD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REBUILD, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RECORDWRITER, 0);
    }
    public KW_RELOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RELOAD, 0);
    }
    public KW_RELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RELY, 0);
    }
    public KW_REMOTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REMOTE, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RENAME, 0);
    }
    public KW_REOPTIMIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REOPTIMIZATION, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REPAIR, 0);
    }
    public KW_REPL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REPL, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REPLACE, 0);
    }
    public KW_REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REPLICATION, 0);
    }
    public KW_RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RESOURCE, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RESTRICT, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REWRITE, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ROLES, 0);
    }
    public KW_SCHEDULED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SCHEDULED, 0);
    }
    public KW_SCHEDULING_POLICY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SCHEDULING_POLICY, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SECOND, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SEMI, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SERVER, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SETS, 0);
    }
    public KW_SET_CURRENT_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SET_CURRENT_SNAPSHOT, 0);
    }
    public KW_SHARED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SHARED, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SHOW, 0);
    }
    public KW_SHOW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SHOW_DATABASE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SKEWED, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SNAPSHOT, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SORTED, 0);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SPEC, 0);
    }
    public KW_SSL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SSL, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STATISTICS, 0);
    }
    public KW_STATUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STATUS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STORED, 0);
    }
    public KW_STREAMTABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STREAMTABLE, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STRUCT, 0);
    }
    public KW_SUMMARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SUMMARY, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TABLES, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TERMINATED, 0);
    }
    public KW_TIMESTAMPTZ(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TIMESTAMPTZ, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TINYINT, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TOUCH, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRANSACTIONAL, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRIM, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNARCHIVE, 0);
    }
    public KW_UNDO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNDO, 0);
    }
    public KW_UNIONTYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNIONTYPE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNKNOWN, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNLOCK, 0);
    }
    public KW_UNMANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNMANAGED, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNSET, 0);
    }
    public KW_UNSIGNED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNSIGNED, 0);
    }
    public KW_URI(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_URI, 0);
    }
    public KW_URL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_URL, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_USE, 0);
    }
    public KW_UTC(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UTC, 0);
    }
    public KW_UTCTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UTCTIMESTAMP, 0);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VALIDATE, 0);
    }
    public KW_VALUE_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VALUE_TYPE, 0);
    }
    public KW_VECTORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VECTORIZATION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VIEWS, 0);
    }
    public KW_WAIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WAIT, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WEEK, 0);
    }
    public KW_WHILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WHILE, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITHIN, 0);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WORK, 0);
    }
    public KW_WORKLOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WORKLOAD, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WRITE, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_YEAR, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ZONE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_nonReserved;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql11ReservedKeywordsUsedAsFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ARRAY, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BINARY, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_BOOLEAN, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DATE, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DOUBLE, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FLOAT, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_GROUPING, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_IF, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_INT, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MAP, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_REAL, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SMALLINT, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TIMESTAMP, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_sql11ReservedKeywordsUsedAsFunctionName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterSql11ReservedKeywordsUsedAsFunctionName) {
             listener.enterSql11ReservedKeywordsUsedAsFunctionName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitSql11ReservedKeywordsUsedAsFunctionName) {
             listener.exitSql11ReservedKeywordsUsedAsFunctionName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitSql11ReservedKeywordsUsedAsFunctionName) {
            return visitor.visitSql11ReservedKeywordsUsedAsFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public hintList(): HintListContext {
        return this.getRuleContext(0, HintListContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_hint;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterHint) {
             listener.enterHint(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitHint) {
             listener.exitHint(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitHint) {
            return visitor.visitHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public hintItem(): HintItemContext[];
    public hintItem(i: number): HintItemContext | null;
    public hintItem(i?: number): HintItemContext[] | HintItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintItemContext);
        }

        return this.getRuleContext(i, HintItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_hintList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterHintList) {
             listener.enterHintList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitHintList) {
             listener.exitHintList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitHintList) {
            return visitor.visitHintList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public hintName(): HintNameContext {
        return this.getRuleContext(0, HintNameContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.LPAREN, 0);
    }
    public hintArgs(): HintArgsContext | null {
        return this.getRuleContext(0, HintArgsContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_hintItem;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterHintItem) {
             listener.enterHintItem(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitHintItem) {
             listener.exitHintItem(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitHintItem) {
            return visitor.visitHintItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MAPJOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MAPJOIN, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SEMI, 0);
    }
    public KW_STREAMTABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_STREAMTABLE, 0);
    }
    public KW_PKFK_JOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PKFK_JOIN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_hintName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterHintName) {
             listener.enterHintName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitHintName) {
             listener.exitHintName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitHintName) {
            return visitor.visitHintName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintArgsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public hintArgName(): HintArgNameContext[];
    public hintArgName(i: number): HintArgNameContext | null;
    public hintArgName(i?: number): HintArgNameContext[] | HintArgNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintArgNameContext);
        }

        return this.getRuleContext(i, HintArgNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_hintArgs;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterHintArgs) {
             listener.enterHintArgs(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitHintArgs) {
             listener.exitHintArgs(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitHintArgs) {
            return visitor.visitHintArgs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintArgNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Identifier(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Identifier, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_NONE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_hintArgName;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterHintArgName) {
             listener.enterHintArgName(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitHintArgName) {
             listener.exitHintArgName(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitHintArgName) {
            return visitor.visitHintArgName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrepareStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PREPARE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PREPARE, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_FROM, 0)!;
    }
    public queryStatementExpression(): QueryStatementExpressionContext {
        return this.getRuleContext(0, QueryStatementExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_prepareStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPrepareStatement) {
             listener.enterPrepareStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPrepareStatement) {
             listener.exitPrepareStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPrepareStatement) {
            return visitor.visitPrepareStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecuteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_EXECUTE, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_USING, 0)!;
    }
    public executeParamList(): ExecuteParamListContext {
        return this.getRuleContext(0, ExecuteParamListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_executeStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExecuteStatement) {
             listener.enterExecuteStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExecuteStatement) {
             listener.exitExecuteStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExecuteStatement) {
            return visitor.visitExecuteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecuteParamListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_executeParamList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterExecuteParamList) {
             listener.enterExecuteParamList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitExecuteParamList) {
             listener.exitExecuteParamList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitExecuteParamList) {
            return visitor.visitExecuteParamList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourcePlanDdlStatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createResourcePlanStatement(): CreateResourcePlanStatementContext | null {
        return this.getRuleContext(0, CreateResourcePlanStatementContext);
    }
    public alterResourcePlanStatement(): AlterResourcePlanStatementContext | null {
        return this.getRuleContext(0, AlterResourcePlanStatementContext);
    }
    public dropResourcePlanStatement(): DropResourcePlanStatementContext | null {
        return this.getRuleContext(0, DropResourcePlanStatementContext);
    }
    public globalWmStatement(): GlobalWmStatementContext | null {
        return this.getRuleContext(0, GlobalWmStatementContext);
    }
    public replaceResourcePlanStatement(): ReplaceResourcePlanStatementContext | null {
        return this.getRuleContext(0, ReplaceResourcePlanStatementContext);
    }
    public createTriggerStatement(): CreateTriggerStatementContext | null {
        return this.getRuleContext(0, CreateTriggerStatementContext);
    }
    public alterTriggerStatement(): AlterTriggerStatementContext | null {
        return this.getRuleContext(0, AlterTriggerStatementContext);
    }
    public dropTriggerStatement(): DropTriggerStatementContext | null {
        return this.getRuleContext(0, DropTriggerStatementContext);
    }
    public createPoolStatement(): CreatePoolStatementContext | null {
        return this.getRuleContext(0, CreatePoolStatementContext);
    }
    public alterPoolStatement(): AlterPoolStatementContext | null {
        return this.getRuleContext(0, AlterPoolStatementContext);
    }
    public dropPoolStatement(): DropPoolStatementContext | null {
        return this.getRuleContext(0, DropPoolStatementContext);
    }
    public createMappingStatement(): CreateMappingStatementContext | null {
        return this.getRuleContext(0, CreateMappingStatementContext);
    }
    public alterMappingStatement(): AlterMappingStatementContext | null {
        return this.getRuleContext(0, AlterMappingStatementContext);
    }
    public dropMappingStatement(): DropMappingStatementContext | null {
        return this.getRuleContext(0, DropMappingStatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_resourcePlanDdlStatements;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterResourcePlanDdlStatements) {
             listener.enterResourcePlanDdlStatements(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitResourcePlanDdlStatements) {
             listener.exitResourcePlanDdlStatements(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitResourcePlanDdlStatements) {
            return visitor.visitResourcePlanDdlStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpAssignContext extends antlr.ParserRuleContext {
    public _parallelism?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_QUERY_PARALLELISM, 0);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.EQUAL, 0)!;
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEFAULT, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_POOL, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rpAssign;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRpAssign) {
             listener.enterRpAssign(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRpAssign) {
             listener.exitRpAssign(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRpAssign) {
            return visitor.visitRpAssign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpAssignListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rpAssign(): RpAssignContext[];
    public rpAssign(i: number): RpAssignContext | null;
    public rpAssign(i?: number): RpAssignContext[] | RpAssignContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RpAssignContext);
        }

        return this.getRuleContext(i, RpAssignContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rpAssignList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRpAssignList) {
             listener.enterRpAssignList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRpAssignList) {
             listener.exitRpAssignList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRpAssignList) {
            return visitor.visitRpAssignList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpUnassignContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_QUERY_PARALLELISM, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DEFAULT, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_POOL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rpUnassign;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRpUnassign) {
             listener.enterRpUnassign(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRpUnassign) {
             listener.exitRpUnassign(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRpUnassign) {
            return visitor.visitRpUnassign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpUnassignListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rpUnassign(): RpUnassignContext[];
    public rpUnassign(i: number): RpUnassignContext | null;
    public rpUnassign(i?: number): RpUnassignContext[] | RpUnassignContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RpUnassignContext);
        }

        return this.getRuleContext(i, RpUnassignContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_rpUnassignList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterRpUnassignList) {
             listener.enterRpUnassignList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitRpUnassignList) {
             listener.exitRpUnassignList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitRpUnassignList) {
            return visitor.visitRpUnassignList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateResourcePlanStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _likeName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_RESOURCE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_RESOURCE, 0)!;
    }
    public KW_PLAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PLAN, 0)!;
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_LIKE, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public rpAssignList(): RpAssignListContext | null {
        return this.getRuleContext(0, RpAssignListContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createResourcePlanStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateResourcePlanStatement) {
             listener.enterCreateResourcePlanStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateResourcePlanStatement) {
             listener.exitCreateResourcePlanStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateResourcePlanStatement) {
            return visitor.visitCreateResourcePlanStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithReplaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WITH, 0)!;
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REPLACE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_withReplace;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterWithReplace) {
             listener.enterWithReplace(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitWithReplace) {
             listener.exitWithReplace(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitWithReplace) {
            return visitor.visitWithReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ActivateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ACTIVATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ACTIVATE, 0)!;
    }
    public withReplace(): WithReplaceContext | null {
        return this.getRuleContext(0, WithReplaceContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_activate;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterActivate) {
             listener.enterActivate(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitActivate) {
             listener.exitActivate(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitActivate) {
            return visitor.visitActivate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ENABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ENABLE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_enable;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterEnable) {
             listener.enterEnable(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitEnable) {
             listener.exitEnable(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitEnable) {
            return visitor.visitEnable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DisableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISABLE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DISABLE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_disable;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDisable) {
             listener.enterDisable(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDisable) {
             listener.exitDisable(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDisable) {
            return visitor.visitDisable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnmanagedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNMANAGED(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_UNMANAGED, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_unmanaged;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterUnmanaged) {
             listener.enterUnmanaged(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitUnmanaged) {
             listener.exitUnmanaged(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitUnmanaged) {
            return visitor.visitUnmanaged(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterResourcePlanStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _newName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ALTER, 0)!;
    }
    public KW_RESOURCE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_RESOURCE, 0)!;
    }
    public KW_PLAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PLAN, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_VALIDATE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DISABLE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SET, 0);
    }
    public rpAssignList(): RpAssignListContext | null {
        return this.getRuleContext(0, RpAssignListContext);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNSET, 0);
    }
    public rpUnassignList(): RpUnassignListContext | null {
        return this.getRuleContext(0, RpUnassignListContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TO, 0);
    }
    public activate(): ActivateContext | null {
        return this.getRuleContext(0, ActivateContext);
    }
    public enable(): EnableContext | null {
        return this.getRuleContext(0, EnableContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterResourcePlanStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterResourcePlanStatement) {
             listener.enterAlterResourcePlanStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterResourcePlanStatement) {
             listener.exitAlterResourcePlanStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterResourcePlanStatement) {
            return visitor.visitAlterResourcePlanStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GlobalWmStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WORKLOAD(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WORKLOAD, 0)!;
    }
    public KW_MANAGEMENT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MANAGEMENT, 0)!;
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ENABLE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DISABLE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_globalWmStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterGlobalWmStatement) {
             listener.enterGlobalWmStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitGlobalWmStatement) {
             listener.exitGlobalWmStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitGlobalWmStatement) {
            return visitor.visitGlobalWmStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceResourcePlanStatementContext extends antlr.ParserRuleContext {
    public _src?: Id_Context;
    public _dest?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_REPLACE, 0)!;
    }
    public KW_ACTIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ACTIVE, 0);
    }
    public KW_RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_RESOURCE, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PLAN, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_replaceResourcePlanStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterReplaceResourcePlanStatement) {
             listener.enterReplaceResourcePlanStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitReplaceResourcePlanStatement) {
             listener.exitReplaceResourcePlanStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitReplaceResourcePlanStatement) {
            return visitor.visitReplaceResourcePlanStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropResourcePlanStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_RESOURCE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_RESOURCE, 0)!;
    }
    public KW_PLAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_PLAN, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropResourcePlanStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropResourcePlanStatement) {
             listener.enterDropResourcePlanStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropResourcePlanStatement) {
             listener.exitDropResourcePlanStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropResourcePlanStatement) {
            return visitor.visitDropResourcePlanStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PoolPathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.DOT);
    	} else {
    		return this.getToken(HiveSQLParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_poolPath;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPoolPath) {
             listener.enterPoolPath(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPoolPath) {
             listener.exitPoolPath(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPoolPath) {
            return visitor.visitPoolPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggerAtomExpression(): TriggerAtomExpressionContext {
        return this.getRuleContext(0, TriggerAtomExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_triggerExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTriggerExpression) {
             listener.enterTriggerExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTriggerExpression) {
             listener.exitTriggerExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTriggerExpression) {
            return visitor.visitTriggerExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerExpressionStandaloneContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggerExpression(): TriggerExpressionContext {
        return this.getRuleContext(0, TriggerExpressionContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_triggerExpressionStandalone;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTriggerExpressionStandalone) {
             listener.enterTriggerExpressionStandalone(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTriggerExpressionStandalone) {
             listener.exitTriggerExpressionStandalone(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTriggerExpressionStandalone) {
            return visitor.visitTriggerExpressionStandalone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerOrExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggerAndExpression(): TriggerAndExpressionContext[];
    public triggerAndExpression(i: number): TriggerAndExpressionContext | null;
    public triggerAndExpression(i?: number): TriggerAndExpressionContext[] | TriggerAndExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggerAndExpressionContext);
        }

        return this.getRuleContext(i, TriggerAndExpressionContext);
    }
    public KW_OR(): antlr.TerminalNode[];
    public KW_OR(i: number): antlr.TerminalNode | null;
    public KW_OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_OR);
    	} else {
    		return this.getToken(HiveSQLParser.KW_OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_triggerOrExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTriggerOrExpression) {
             listener.enterTriggerOrExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTriggerOrExpression) {
             listener.exitTriggerOrExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTriggerOrExpression) {
            return visitor.visitTriggerOrExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerAndExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggerAtomExpression(): TriggerAtomExpressionContext[];
    public triggerAtomExpression(i: number): TriggerAtomExpressionContext | null;
    public triggerAtomExpression(i?: number): TriggerAtomExpressionContext[] | TriggerAtomExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggerAtomExpressionContext);
        }

        return this.getRuleContext(i, TriggerAtomExpressionContext);
    }
    public KW_AND(): antlr.TerminalNode[];
    public KW_AND(i: number): antlr.TerminalNode | null;
    public KW_AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.KW_AND);
    	} else {
    		return this.getToken(HiveSQLParser.KW_AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_triggerAndExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTriggerAndExpression) {
             listener.enterTriggerAndExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTriggerAndExpression) {
             listener.exitTriggerAndExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTriggerAndExpression) {
            return visitor.visitTriggerAndExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerAtomExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public comparisionOperator(): ComparisionOperatorContext {
        return this.getRuleContext(0, ComparisionOperatorContext)!;
    }
    public triggerLiteral(): TriggerLiteralContext {
        return this.getRuleContext(0, TriggerLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_triggerAtomExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTriggerAtomExpression) {
             listener.enterTriggerAtomExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTriggerAtomExpression) {
             listener.exitTriggerAtomExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTriggerAtomExpression) {
            return visitor.visitTriggerAtomExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_triggerLiteral;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTriggerLiteral) {
             listener.enterTriggerLiteral(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTriggerLiteral) {
             listener.exitTriggerLiteral(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTriggerLiteral) {
            return visitor.visitTriggerLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisionOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.GREATERTHAN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_comparisionOperator;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterComparisionOperator) {
             listener.enterComparisionOperator(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitComparisionOperator) {
             listener.exitComparisionOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitComparisionOperator) {
            return visitor.visitComparisionOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerActionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_KILL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_KILL, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_MOVE, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TO, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_triggerActionExpression;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTriggerActionExpression) {
             listener.enterTriggerActionExpression(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTriggerActionExpression) {
             listener.exitTriggerActionExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTriggerActionExpression) {
            return visitor.visitTriggerActionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerActionExpressionStandaloneContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggerActionExpression(): TriggerActionExpressionContext {
        return this.getRuleContext(0, TriggerActionExpressionContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_triggerActionExpressionStandalone;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterTriggerActionExpressionStandalone) {
             listener.enterTriggerActionExpressionStandalone(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitTriggerActionExpressionStandalone) {
             listener.exitTriggerActionExpressionStandalone(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitTriggerActionExpressionStandalone) {
            return visitor.visitTriggerActionExpressionStandalone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTriggerStatementContext extends antlr.ParserRuleContext {
    public _rpName?: Id_Context;
    public _triggerName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TRIGGER, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.DOT, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WHEN, 0)!;
    }
    public triggerExpression(): TriggerExpressionContext {
        return this.getRuleContext(0, TriggerExpressionContext)!;
    }
    public KW_DO(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DO, 0)!;
    }
    public triggerActionExpression(): TriggerActionExpressionContext {
        return this.getRuleContext(0, TriggerActionExpressionContext)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createTriggerStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateTriggerStatement) {
             listener.enterCreateTriggerStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateTriggerStatement) {
             listener.exitCreateTriggerStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateTriggerStatement) {
            return visitor.visitCreateTriggerStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTriggerStatementContext extends antlr.ParserRuleContext {
    public _rpName?: Id_Context;
    public _triggerName?: Id_Context;
    public _poolName?: PoolPathContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ALTER, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TRIGGER, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.DOT, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WHEN, 0);
    }
    public triggerExpression(): TriggerExpressionContext | null {
        return this.getRuleContext(0, TriggerExpressionContext);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DO, 0);
    }
    public triggerActionExpression(): TriggerActionExpressionContext | null {
        return this.getRuleContext(0, TriggerActionExpressionContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ADD, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TO, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DROP, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_FROM, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_POOL, 0);
    }
    public KW_UNMANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNMANAGED, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterTriggerStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterTriggerStatement) {
             listener.enterAlterTriggerStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterTriggerStatement) {
             listener.exitAlterTriggerStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterTriggerStatement) {
            return visitor.visitAlterTriggerStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTriggerStatementContext extends antlr.ParserRuleContext {
    public _rpName?: Id_Context;
    public _triggerName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_TRIGGER, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.DOT, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropTriggerStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropTriggerStatement) {
             listener.enterDropTriggerStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropTriggerStatement) {
             listener.exitDropTriggerStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropTriggerStatement) {
            return visitor.visitDropTriggerStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PoolAssignContext extends antlr.ParserRuleContext {
    public _allocFraction?: Token | null;
    public _parallelism?: Token | null;
    public _policy?: Token | null;
    public _path?: PoolPathContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALLOC_FRACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ALLOC_FRACTION, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.EQUAL, 0);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_QUERY_PARALLELISM, 0);
    }
    public KW_SCHEDULING_POLICY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SCHEDULING_POLICY, 0);
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_PATH, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.StringLiteral, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_poolAssign;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPoolAssign) {
             listener.enterPoolAssign(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPoolAssign) {
             listener.exitPoolAssign(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPoolAssign) {
            return visitor.visitPoolAssign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PoolAssignListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public poolAssign(): PoolAssignContext[];
    public poolAssign(i: number): PoolAssignContext | null;
    public poolAssign(i?: number): PoolAssignContext[] | PoolAssignContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PoolAssignContext);
        }

        return this.getRuleContext(i, PoolAssignContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSQLParser.COMMA);
    	} else {
    		return this.getToken(HiveSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_poolAssignList;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterPoolAssignList) {
             listener.enterPoolAssignList(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitPoolAssignList) {
             listener.exitPoolAssignList(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitPoolAssignList) {
            return visitor.visitPoolAssignList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatePoolStatementContext extends antlr.ParserRuleContext {
    public _rpName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_POOL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_POOL, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.DOT, 0)!;
    }
    public poolPath(): PoolPathContext {
        return this.getRuleContext(0, PoolPathContext)!;
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_WITH, 0)!;
    }
    public poolAssignList(): PoolAssignListContext {
        return this.getRuleContext(0, PoolAssignListContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createPoolStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreatePoolStatement) {
             listener.enterCreatePoolStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreatePoolStatement) {
             listener.exitCreatePoolStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreatePoolStatement) {
            return visitor.visitCreatePoolStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPoolStatementContext extends antlr.ParserRuleContext {
    public _rpName?: Id_Context;
    public _triggerName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ALTER, 0)!;
    }
    public KW_POOL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_POOL, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.DOT, 0)!;
    }
    public poolPath(): PoolPathContext {
        return this.getRuleContext(0, PoolPathContext)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SET, 0);
    }
    public poolAssignList(): PoolAssignListContext | null {
        return this.getRuleContext(0, PoolAssignListContext);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_UNSET, 0);
    }
    public KW_SCHEDULING_POLICY(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_SCHEDULING_POLICY, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TRIGGER, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_DROP, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterPoolStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterPoolStatement) {
             listener.enterAlterPoolStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterPoolStatement) {
             listener.exitAlterPoolStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterPoolStatement) {
            return visitor.visitAlterPoolStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropPoolStatementContext extends antlr.ParserRuleContext {
    public _rpName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_POOL(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_POOL, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.DOT, 0)!;
    }
    public poolPath(): PoolPathContext {
        return this.getRuleContext(0, PoolPathContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropPoolStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropPoolStatement) {
             listener.enterDropPoolStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropPoolStatement) {
             listener.exitDropPoolStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropPoolStatement) {
            return visitor.visitDropPoolStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMappingStatementContext extends antlr.ParserRuleContext {
    public _mappingType?: Token | null;
    public _name?: Token | null;
    public _rpName?: Id_Context;
    public _path?: PoolPathContext;
    public _order?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_CREATE, 0)!;
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MAPPING, 0)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_IN, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_USER, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_GROUP, 0);
    }
    public KW_APPLICATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_APPLICATION, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TO, 0);
    }
    public unmanaged(): UnmanagedContext | null {
        return this.getRuleContext(0, UnmanagedContext);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ORDER, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_createMappingStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterCreateMappingStatement) {
             listener.enterCreateMappingStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitCreateMappingStatement) {
             listener.exitCreateMappingStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateMappingStatement) {
            return visitor.visitCreateMappingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterMappingStatementContext extends antlr.ParserRuleContext {
    public _mappingType?: Token | null;
    public _name?: Token | null;
    public _rpName?: Id_Context;
    public _path?: PoolPathContext;
    public _order?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_ALTER, 0)!;
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MAPPING, 0)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_IN, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_USER, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_GROUP, 0);
    }
    public KW_APPLICATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_APPLICATION, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_TO, 0);
    }
    public unmanaged(): UnmanagedContext | null {
        return this.getRuleContext(0, UnmanagedContext);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_WITH, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_ORDER, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_alterMappingStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterAlterMappingStatement) {
             listener.enterAlterMappingStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitAlterMappingStatement) {
             listener.exitAlterMappingStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterMappingStatement) {
            return visitor.visitAlterMappingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropMappingStatementContext extends antlr.ParserRuleContext {
    public _mappingType?: Token | null;
    public _name?: Token | null;
    public _rpName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_DROP, 0)!;
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_MAPPING, 0)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.KW_IN, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSQLParser.StringLiteral, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_USER, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_GROUP, 0);
    }
    public KW_APPLICATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSQLParser.KW_APPLICATION, 0);
    }
    public override get ruleIndex(): number {
        return HiveSQLParser.RULE_dropMappingStatement;
    }
    public override enterRule(listener: HiveSQLListener): void {
        if(listener.enterDropMappingStatement) {
             listener.enterDropMappingStatement(this);
        }
    }
    public override exitRule(listener: HiveSQLListener): void {
        if(listener.exitDropMappingStatement) {
             listener.exitDropMappingStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSQLVisitor<Result>): Result | null {
        if (visitor.visitDropMappingStatement) {
            return visitor.visitDropMappingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
